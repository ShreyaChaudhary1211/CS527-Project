/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 29 05:54:14 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SUBSEQUENCES_ESTest extends SUBSEQUENCES_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(50, 825, 825);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      SUBSEQUENCES.subsequences(0, 50, 1);
      ArrayList<ArrayList> arrayList1 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(50, 1, 497);
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 0;
      int int1 = 464;
      int int2 = 1978;
      SUBSEQUENCES.subsequences(0, 464, 1978);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      SUBSEQUENCES.subsequences(1, 464, 1);
      SUBSEQUENCES.subsequences(0, 1978, 0);
      SUBSEQUENCES.subsequences(int0, int2, int2);
      int int3 = (-537);
      int int4 = (-5366);
      SUBSEQUENCES.subsequences(int3, int4, int3);
      int int5 = 1813;
      int int6 = 1;
      SUBSEQUENCES.subsequences(int5, int3, int6);
      int int7 = 1;
      SUBSEQUENCES.subsequences(int6, int5, int7);
      int int8 = 841;
      SUBSEQUENCES.subsequences(int3, int6, int8);
      int int9 = 50;
      SUBSEQUENCES.subsequences(int6, int2, int9);
      SUBSEQUENCES.subsequences(int6, int4, int9);
      int int10 = 0;
      int int11 = 50;
      SUBSEQUENCES.subsequences(int10, int11, int0);
      int int12 = 0;
      int int13 = 0;
      SUBSEQUENCES.subsequences(int1, int12, int13);
      int int14 = 1248;
      int int15 = (-1286);
      SUBSEQUENCES.subsequences(int14, int3, int15);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1232);
      SUBSEQUENCES.subsequences(int0, int0, int1);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      int int2 = 0;
      int int3 = (-3160);
      SUBSEQUENCES.subsequences(int1, int2, int3);
      int int4 = 0;
      SUBSEQUENCES.subsequences(int1, int1, int4);
      int int5 = (-4133);
      SUBSEQUENCES.subsequences(int0, int0, int5);
      int int6 = (-1);
      SUBSEQUENCES.subsequences(int1, int1, int6);
      int int7 = 50;
      int int8 = 0;
      SUBSEQUENCES.subsequences(int7, int6, int8);
      int int9 = 0;
      int int10 = (-451);
      int int11 = 0;
      SUBSEQUENCES.subsequences(int9, int10, int11);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences((-1589), (-1589), 0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SUBSEQUENCES.subsequences(0, 0, 0);
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 4369, 0);
      SUBSEQUENCES.subsequences(0, 0, 0);
      ArrayList<ArrayList> arrayList1 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(0, 0, 2426);
      assertTrue(arrayList1.equals((Object)arrayList0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(2110, (-1700), (-961));
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SUBSEQUENCES sUBSEQUENCES0 = new SUBSEQUENCES();
      SUBSEQUENCES.subsequences(753, 1749, 1749);
      ArrayList<ArrayList> arrayList0 = (ArrayList<ArrayList>)SUBSEQUENCES.subsequences(911, 308, 1);
      assertEquals(0, arrayList0.size());
  }
}
