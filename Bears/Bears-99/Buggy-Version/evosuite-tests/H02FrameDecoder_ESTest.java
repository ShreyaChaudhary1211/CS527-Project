/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 03:04:05 GMT 2024
 */

package org.traccar.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandler;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.SimpleChannelDownstreamHandler;
import org.jboss.netty.channel.SimpleChannelHandler;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;
import org.traccar.protocol.H02FrameDecoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class H02FrameDecoder_ESTest extends H02FrameDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(614);
      assertEquals(0, h02FrameDecoder0.getMaxCumulationBufferCapacity());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)36;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      bigEndianHeapChannelBuffer0.duplicate();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      Class<ChannelHandler> class0 = ChannelHandler.class;
      defaultChannelPipeline0.getContext(class0);
      DefaultChannelPipeline defaultChannelPipeline1 = new DefaultChannelPipeline();
      defaultChannelPipeline1.getChannel();
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      ChannelSink channelSink0 = defaultChannelPipeline1.getSink();
      SocketChannel socketChannel0 = SocketChannel.open();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)8);
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(threadNameDeterminer0).determineThreadName(anyString() , anyString());
      NioWorker nioWorker0 = new NioWorker(scheduledThreadPoolExecutor0, threadNameDeterminer0);
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel((Channel) null, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      H02FrameDecoder h02FrameDecoder1 = new H02FrameDecoder((byte)8);
      h02FrameDecoder1.decode((ChannelHandlerContext) null, nioSocketChannel0, bigEndianHeapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(614);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)36;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = new BigEndianHeapChannelBuffer(byteArray0);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer1.duplicate();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      defaultChannelPipeline0.getChannel();
      h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, channelBuffer0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-828L));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(614);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)36;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.duplicate();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      Class<ChannelHandler> class0 = ChannelHandler.class;
      defaultChannelPipeline0.getContext(class0);
      DefaultChannelPipeline defaultChannelPipeline1 = new DefaultChannelPipeline();
      defaultChannelPipeline1.getChannel();
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      ChannelSink channelSink0 = defaultChannelPipeline1.getSink();
      SocketChannel socketChannel0 = SocketChannel.open();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)8);
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(threadNameDeterminer0).determineThreadName(anyString() , anyString());
      NioWorker nioWorker0 = new NioWorker(scheduledThreadPoolExecutor0, threadNameDeterminer0);
      NioSocketChannel nioSocketChannel0 = new NioSocketChannel((Channel) null, defaultLocalClientChannelFactory0, defaultChannelPipeline0, channelSink0, socketChannel0, nioWorker0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, nioSocketChannel0, channelBuffer0);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-246));
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      byte[] byteArray0 = new byte[1];
      defaultLocalServerChannelFactory0.releaseExternalResources();
      byteArray0[0] = (byte)45;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(952);
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.readSlice((byte)45);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(channelBuffer0);
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, localServerChannel0, littleEndianHeapChannelBuffer0);
      Class<SimpleChannelDownstreamHandler> class0 = SimpleChannelDownstreamHandler.class;
      defaultChannelPipeline0.getContext(class0);
      Object object0 = h02FrameDecoder0.decode((ChannelHandlerContext) null, localServerChannel0, littleEndianHeapChannelBuffer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(1);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)88;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, localChannel0, bigEndianHeapChannelBuffer0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(443L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(407);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext("");
      defaultChannelPipeline0.getChannel();
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(1024);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, bigEndianHeapChannelBuffer0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, bigEndianHeapChannelBuffer0);
      Class<SimpleChannelDownstreamHandler> class0 = SimpleChannelDownstreamHandler.class;
      defaultChannelPipeline0.getContext(class0);
      Object object0 = h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, bigEndianHeapChannelBuffer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-246));
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      byte[] byteArray0 = new byte[0];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      bigEndianHeapChannelBuffer0.duplicate();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      try { 
        h02FrameDecoder0.decode((ChannelHandlerContext) null, localChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(833);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      Class<SimpleChannelDownstreamHandler> class0 = SimpleChannelDownstreamHandler.class;
      defaultChannelPipeline0.getContext(class0);
      defaultChannelPipeline0.getChannel();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)45;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-120);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, bigEndianHeapChannelBuffer0);
      defaultChannelPipeline0.getContext(" CHILD_OPEN: ");
      try { 
        h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(1);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)36;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.duplicate();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      Class<ChannelHandler> class0 = ChannelHandler.class;
      defaultChannelPipeline0.getContext(class0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, localChannel0, channelBuffer0);
      System.setCurrentTimeMillis((-275L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-1321));
      ChannelHandlerContext channelHandlerContext0 = null;
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      ChannelState channelState0 = ChannelState.OPEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-17);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, localServerChannel0, bigEndianHeapChannelBuffer0);
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(localServerChannel0, channelState0, (Object) null);
      try { 
        h02FrameDecoder0.channelInterestChanged((ChannelHandlerContext) null, upstreamChannelStateEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.SimpleChannelUpstreamHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-428));
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      byte[] byteArray0 = new byte[5];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      h02FrameDecoder0.decode((ChannelHandlerContext) null, localServerChannel0, bigEndianHeapChannelBuffer0);
      //  // Unstable assertion: assertFalse(bigEndianHeapChannelBuffer0.readable());
      //  // Unstable assertion: assertEquals(15, (int)localServerChannel0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-428));
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(byteBufferBackedChannelBuffer0);
      Object object0 = new Object();
      Class<SimpleChannelHandler> class0 = SimpleChannelHandler.class;
      defaultChannelPipeline0.getContext(class0);
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      try { 
        h02FrameDecoder0.decode((ChannelHandlerContext) null, localServerChannel0, readOnlyChannelBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis(2162L);
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder((-274));
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext("");
      defaultChannelPipeline0.getChannel();
      try { 
        h02FrameDecoder0.decode((ChannelHandlerContext) null, (Channel) null, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.protocol.H02FrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(35);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext(";Hb[eaxZB");
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      ChannelBuffer channelBuffer0 = null;
      try { 
        h02FrameDecoder0.decode((ChannelHandlerContext) null, localChannel0, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.protocol.H02FrameDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      H02FrameDecoder h02FrameDecoder0 = new H02FrameDecoder(0);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getContext((ChannelHandler) h02FrameDecoder0);
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      defaultChannelPipeline0.getSink();
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        socketChannel0.shutdownInput();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }
}
