/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 23:33:07 GMT 2024
 */

package edu.harvard.h2ms.domain.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.time.Instant;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteUser_ESTest extends EvosuiteUser_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test00()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test01()  throws Throwable  {
      User user0 = new User("", "", "", "[@9k", (String) null, "Gurvyhx3gs<");
      assertEquals("[@9k", user0.getUsername());
      
      user0.setEmail("");
      user0.getUsername();
      assertEquals("", user0.getMiddleName());
  }

  @Test(timeout = 50)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.setType("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null");
      String string0 = user0.getType();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
  }

  @Test(timeout = 50)
  public void test03()  throws Throwable  {
      User user0 = new User();
      user0.setType("");
      String string0 = user0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test04()  throws Throwable  {
      User user0 = new User("", "", "", "[@9k", (String) null, "Gurvyhx3gs<");
      Role role0 = new Role();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      linkedHashSet0.add(role0);
      user0.setRoles(linkedHashSet0);
      user0.getRoles();
      assertEquals("", user0.getMiddleName());
      assertEquals("", user0.getFirstName());
      assertEquals("", user0.getLastName());
      assertEquals("Gurvyhx3gs<", user0.getType());
      assertEquals("[@9k", user0.getUsername());
  }

  @Test(timeout = 50)
  public void test05()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("j+wS=!zK/.SL");
      String string0 = user0.getResetToken();
      assertEquals("j+wS=!zK/.SL", string0);
  }

  @Test(timeout = 50)
  public void test06()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("");
      String string0 = user0.getResetToken();
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test07()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("mRNUEis");
      String string0 = user0.getNotificationFrequency();
      assertEquals("mRNUEis", string0);
  }

  @Test(timeout = 50)
  public void test08()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("");
      String string0 = user0.getNotificationFrequency();
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test09()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getMiddleName();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName(", firstName=");
      String string0 = user0.getMiddleName();
      assertEquals(", firstName=", string0);
  }

  @Test(timeout = 50)
  public void test11()  throws Throwable  {
      User user0 = new User((String) null, (String) null, "User [id=", (String) null, (String) null, "User [id=");
      String string0 = user0.getLastName();
      assertEquals("User [id=", string0);
  }

  @Test(timeout = 50)
  public void test12()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("");
      String string0 = user0.getLastName();
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test13()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(0L);
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 50)
  public void test14()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(294L);
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals(294L, (long)long1);
  }

  @Test(timeout = 50)
  public void test15()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-1661L));
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals((-1661L), (long)long1);
  }

  @Test(timeout = 50)
  public void test16()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("E 4eWM<i/2\"~.v");
      String string0 = user0.getFirstName();
      assertEquals("E 4eWM<i/2\"~.v", string0);
  }

  @Test(timeout = 50)
  public void test17()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("org.springframework.security.core.authority.SimpleGrantedAuthority");
      String string0 = user0.getEmail();
      assertEquals("org.springframework.security.core.authority.simplegrantedauthority", string0);
  }

  @Test(timeout = 50)
  public void test18()  throws Throwable  {
      User user0 = new User((String) null, (String) null, (String) null, "", (String) null, "!+J_%A");
      String string0 = user0.getEmail();
      assertEquals("!+J_%A", user0.getType());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test19()  throws Throwable  {
      User user0 = new User();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      user0.setCreatedOn(date0);
      Date date1 = user0.getCreatedOn();
      assertSame(date1, date0);
  }

  @Test(timeout = 50)
  public void test20()  throws Throwable  {
      User user0 = new User("", "", "", "[@9k", (String) null, "Gurvyhx3gs<");
      // Undeclared exception!
      user0.setPassword("edu.harvard.h2ms.domain.core.User");
  }

  @Test(timeout = 50)
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      assertNull(user0.getMiddleName());
  }

  @Test(timeout = 50)
  public void test22()  throws Throwable  {
      User user0 = new User();
      user0.setEmail((String) null);
      assertTrue(user0.isAccountNonLocked());
  }

  @Test(timeout = 50)
  public void test23()  throws Throwable  {
      User user0 = new User("&Vyd3%~h", "&Vyd3%~h", "&Vyd3%~h", "&Vyd3%~h", "&Vyd3%~h", "&Vyd3%~h");
  }

  @Test(timeout = 50)
  public void test24()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      user0.getLastLogin();
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
      assertEquals("Missing salt rounds", user0.getLastName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
  }

  @Test(timeout = 50)
  public void test25()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getNotificationFrequency();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test26()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getResetToken();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test27()  throws Throwable  {
      User user0 = new User("", "", "", "[@9k", (String) null, "Gurvyhx3gs<");
      String string0 = user0.getMiddleName();
      assertEquals("[@9k", user0.getEmail());
      assertEquals("", user0.getLastName());
      assertEquals("", user0.getFirstName());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("Gurvyhx3gs<", user0.getType());
  }

  @Test(timeout = 50)
  public void test28()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("");
      String string0 = user0.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 50)
  public void test29()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=qqd$sZw>KJax5Wg|, middleName=qqd$sZw>KJax5Wg|, lastName=Missing salt rounds, email=null, typenull, notificationFrequency=null", string0);
  }

  @Test(timeout = 50)
  public void test30()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      user0.getId();
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
      assertEquals("Missing salt rounds", user0.getLastName());
  }

  @Test(timeout = 50)
  public void test31()  throws Throwable  {
      User user0 = new User();
      user0.setEnabled(false);
      assertNull(user0.getResetToken());
  }

  @Test(timeout = 50)
  public void test32()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      user0.getAuthorities();
      assertEquals("Missing salt rounds", user0.getLastName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
  }

  @Test(timeout = 50)
  public void test33()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      Set<Role> set0 = user0.getRoles();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 50)
  public void test34()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test35()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test36()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test37()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test38()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
      assertEquals("Missing salt rounds", user0.getLastName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
  }

  @Test(timeout = 50)
  public void test39()  throws Throwable  {
      User user0 = new User("", "", "", "[@9k", (String) null, "Gurvyhx3gs<");
      String string0 = user0.getUsername();
      assertEquals("Gurvyhx3gs<", user0.getType());
      assertEquals("", user0.getMiddleName());
      assertEquals("", user0.getFirstName());
      assertEquals("[@9k", string0);
      assertEquals("", user0.getLastName());
      assertNotNull(string0);
  }

  @Test(timeout = 50)
  public void test40()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      boolean boolean0 = user0.isAccountNonExpired();
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
      assertEquals("Missing salt rounds", user0.getLastName());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test41()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      MockDate mockDate0 = new MockDate(501, (-1985), (-1985), (-529566248), (-1985));
      user0.setLastLogin(mockDate0);
      user0.getLastLogin();
      assertEquals("Missing salt rounds", user0.getLastName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
  }

  @Test(timeout = 50)
  public void test42()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test43()  throws Throwable  {
      User user0 = new User();
      Date date0 = user0.getCreatedOn();
      assertNull(date0);
  }

  @Test(timeout = 50)
  public void test44()  throws Throwable  {
      User user0 = new User("qqd$sZw>KJax5Wg|", "qqd$sZw>KJax5Wg|", "Missing salt rounds", (String) null, (String) null, (String) null);
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertEquals("qqd$sZw>KJax5Wg|", user0.getMiddleName());
      assertEquals("qqd$sZw>KJax5Wg|", user0.getFirstName());
      assertTrue(boolean0);
      assertEquals("Missing salt rounds", user0.getLastName());
  }

  @Test(timeout = 50)
  public void test45()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getType();
      assertNull(string0);
  }

  @Test(timeout = 50)
  public void test46()  throws Throwable  {
      User user0 = new User();
      Set<Role> set0 = user0.getRoles();
      assertNull(set0);
  }
}
