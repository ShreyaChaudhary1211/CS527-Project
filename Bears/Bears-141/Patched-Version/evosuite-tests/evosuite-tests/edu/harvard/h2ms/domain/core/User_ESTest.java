/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 13:49:36 GMT 2024
 */

package edu.harvard.h2ms.domain.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.harvard.h2ms.domain.core.Role;
import edu.harvard.h2ms.domain.core.User;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User("4}c2)Tp!>.i;^o^", "$", "$", "$", (String) null, "i0BOm\"$g1nr$-[Tk#}S");
      String string0 = user0.getUsername();
      assertEquals("$", user0.getMiddleName());
      assertNotNull(string0);
      assertEquals("$", string0);
      assertEquals("i0BOm\"$g1nr$-[Tk#}S", user0.getType());
      assertEquals("$", user0.getLastName());
      assertEquals("4}c2)Tp!>.i;^o^", user0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.setType("U");
      String string0 = user0.getType();
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User();
      user0.setType("");
      String string0 = user0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      user0.setRoles(linkedHashSet0);
      Set<Role> set0 = user0.getRoles();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("");
      String string0 = user0.getResetToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("$");
      String string0 = user0.getNotificationFrequency();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("");
      String string0 = user0.getNotificationFrequency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User("V1t<z", "V1t<z", "V1t<z", ";iW4dLqR+Q8?", (String) null, "V1t<z");
      String string0 = user0.getMiddleName();
      assertEquals("V1t<z", user0.getLastName());
      assertEquals("V1t<z", user0.getType());
      assertNotNull(string0);
      assertEquals("V1t<z", user0.getFirstName());
      assertEquals(";iw4dlqr+q8?", user0.getEmail());
      assertEquals("V1t<z", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName("");
      String string0 = user0.getMiddleName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User("eo:qH&&V>", "hB!9\"r_1R9%^'Uu)#", "eo:qH&&V>", "eo:qH&&V>", (String) null, "edu.harvard.h2ms.domain.core.User");
      String string0 = user0.getLastName();
      assertEquals("eo:qh&&v>", user0.getUsername());
      assertNotNull(string0);
      assertEquals("hB!9\"r_1R9%^'Uu)#", user0.getMiddleName());
      assertEquals("edu.harvard.h2ms.domain.core.User", user0.getType());
      assertEquals("eo:qH&&V>", string0);
      assertEquals("eo:qH&&V>", user0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("");
      String string0 = user0.getLastName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate(1, 1, 1, (-861), 1, 0);
      user0.setLastLogin(mockDate0);
      Date date0 = user0.getLastLogin();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(0L);
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-1621L));
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals((-1621L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("m");
      String string0 = user0.getFirstName();
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("");
      String string0 = user0.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User("", "", "", "", (String) null, ", type");
      String string0 = user0.getEmail();
      assertNotNull(string0);
      assertEquals(", type", user0.getType());
      assertEquals("", string0);
      assertEquals("", user0.getLastName());
      assertEquals("", user0.getMiddleName());
      assertEquals("", user0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate(1156, 1156, 5647, 3627, 1156);
      user0.setCreatedOn(mockDate0);
      Date date0 = user0.getCreatedOn();
      assertEquals("Fri Mar 15 22:16:00 GMT 3168", date0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("", "", "", "", "", "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      assertTrue(user0.isCredentialsNonExpired());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User();
      user0.setEmail((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      User user0 = new User("eo:qH&&V>", "hB!9\"r_1R9%^'Uu)#", "eo:qH&&V>", "eo:qH&&V>", (String) null, "edu.harvard.h2ms.domain.core.User");
      assertEquals("eo:qh&&v>", user0.getUsername());
      
      user0.setEmail("A granted authority textual representation is required");
      assertEquals("hB!9\"r_1R9%^'Uu)#", user0.getMiddleName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      User user0 = new User("", "", "", "", (String) null, "=sv");
      // Undeclared exception!
      user0.setPassword("");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      User user0 = new User();
      Date date0 = user0.getLastLogin();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getNotificationFrequency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      User user0 = new User("4}c2)Tp!>.i;^o^", "$", "$", "$", (String) null, "i0BOm\"$g1nr$-[Tk#}S");
      user0.getResetToken();
      assertEquals("4}c2)Tp!>.i;^o^", user0.getFirstName());
      assertEquals("$", user0.getMiddleName());
      assertEquals("$", user0.getLastName());
      assertEquals("$", user0.getEmail());
      assertEquals("i0BOm\"$g1nr$-[Tk#}S", user0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getMiddleName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User user0 = new User("4}c2)Tp!>.i;^o^", "$", "$", "$", (String) null, "i0BOm\"$g1nr$-[Tk#}S");
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=4}c2)Tp!>.i;^o^, middleName=$, lastName=$, email=$, typei0BOm\"$g1nr$-[Tk#}S, notificationFrequency=null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      User user0 = new User();
      Long long0 = user0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      User user0 = new User("4}c2)Tp!>.i;^o^", "$", "$", "$", (String) null, "i0BOm\"$g1nr$-[Tk#}S");
      user0.setEnabled(false);
      assertEquals("i0BOm\"$g1nr$-[Tk#}S", user0.getType());
      assertEquals("$", user0.getMiddleName());
      assertEquals("4}c2)Tp!>.i;^o^", user0.getFirstName());
      assertEquals("$", user0.getLastName());
      assertEquals("$", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      User user0 = new User("", "", "", "", (String) null, "=sv");
      user0.getAuthorities();
      assertEquals("", user0.getFirstName());
      assertEquals("", user0.getLastName());
      assertEquals("", user0.getMiddleName());
      assertEquals("=sv", user0.getType());
      assertEquals("", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      Set<Role> set0 = user0.getRoles();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("I@M{lNsP0N^8");
      String string0 = user0.getResetToken();
      assertEquals("I@M{lNsP0N^8", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      User user0 = new User("4}c2)Tp!>.i;^o^", "$", "$", "$", (String) null, "i0BOm\"$g1nr$-[Tk#}S");
      String string0 = user0.getEmail();
      assertEquals("4}c2)Tp!>.i;^o^", user0.getFirstName());
      assertEquals("i0BOm\"$g1nr$-[Tk#}S", user0.getType());
      assertNotNull(string0);
      assertEquals("$", user0.getLastName());
      assertEquals("$", string0);
      assertEquals("$", user0.getMiddleName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      User user0 = new User("", "", "", "", (String) null, "=sv");
      String string0 = user0.getUsername();
      assertEquals("=sv", user0.getType());
      assertEquals("", user0.getMiddleName());
      assertNotNull(string0);
      assertEquals("", user0.getFirstName());
      assertEquals("", user0.getLastName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonExpired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(827L);
      user0.setId(long0);
      Long long1 = user0.getId();
      assertEquals(827L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      User user0 = new User();
      Date date0 = user0.getCreatedOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      User user0 = new User();
      Set<Role> set0 = user0.getRoles();
      assertNull(set0);
  }
}
