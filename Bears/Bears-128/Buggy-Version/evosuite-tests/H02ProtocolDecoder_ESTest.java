/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 02:40:04 GMT 2024
 */

package org.traccar.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.cloudhopper.commons.util.NamingThreadFactory;
import java.nio.channels.SocketChannel;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.TruncatedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelSink;
import org.jboss.netty.channel.DefaultChannelPipeline;
import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;
import org.jboss.netty.channel.local.DefaultLocalServerChannelFactory;
import org.jboss.netty.channel.local.LocalChannel;
import org.jboss.netty.channel.local.LocalServerChannel;
import org.jboss.netty.channel.socket.nio.NioSocketChannel;
import org.jboss.netty.channel.socket.nio.NioWorker;
import org.jboss.netty.util.ThreadNameDeterminer;
import org.junit.runner.RunWith;
import org.traccar.Context;
import org.traccar.database.IdentityManager;
import org.traccar.protocol.GranitProtocolSmsEncoder;
import org.traccar.protocol.H02Protocol;
import org.traccar.protocol.H02ProtocolDecoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class H02ProtocolDecoder_ESTest extends H02ProtocolDecoder_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test0()  throws Throwable  {
      H02Protocol h02Protocol0 = new H02Protocol();
      H02ProtocolDecoder h02ProtocolDecoder0 = new H02ProtocolDecoder(h02Protocol0);
      assertEquals("h02", h02ProtocolDecoder0.getProtocolName());
      
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      Class<GranitProtocolSmsEncoder> class0 = GranitProtocolSmsEncoder.class;
      defaultChannelPipeline0.get(class0);
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      Context.init(identityManager0);
      String[] stringArray0 = new String[0];
      DefaultLocalClientChannelFactory defaultLocalClientChannelFactory0 = new DefaultLocalClientChannelFactory();
      LocalChannel localChannel0 = defaultLocalClientChannelFactory0.newChannel(defaultChannelPipeline0);
      String string0 = "#PHO\r\n";
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("#PHO\r\n", 0);
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(0);
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.duplicate();
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(channelBuffer0, 0);
      try { 
        h02ProtocolDecoder0.decode(localChannel0, mockInetSocketAddress0, truncatedChannelBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index of 1, maximum is 0
         //
         verifyException("org.jboss.netty.buffer.TruncatedChannelBuffer", e);
      }
  }

  @Test(timeout = 50)
  public void test1()  throws Throwable  {
      H02Protocol h02Protocol0 = new H02Protocol();
      H02ProtocolDecoder h02ProtocolDecoder0 = new H02ProtocolDecoder(h02Protocol0);
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      defaultChannelPipeline0.getChannel();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 0);
      try { 
        h02ProtocolDecoder0.decode((Channel) null, mockInetSocketAddress0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jboss.netty.buffer.ChannelBuffer
         //
         verifyException("org.traccar.protocol.H02ProtocolDecoder", e);
      }
  }

  @Test(timeout = 50)
  public void test2()  throws Throwable  {
      H02Protocol h02Protocol0 = new H02Protocol();
      H02ProtocolDecoder h02ProtocolDecoder0 = new H02ProtocolDecoder(h02Protocol0);
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(432);
      try { 
        h02ProtocolDecoder0.decode(localServerChannel0, mockInetSocketAddress0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.protocol.H02ProtocolDecoder", e);
      }
  }

  @Test(timeout = 50)
  public void test3()  throws Throwable  {
      H02Protocol h02Protocol0 = new H02Protocol();
      H02ProtocolDecoder h02ProtocolDecoder0 = new H02ProtocolDecoder(h02Protocol0);
      DefaultLocalServerChannelFactory defaultLocalServerChannelFactory0 = new DefaultLocalServerChannelFactory();
      DefaultChannelPipeline defaultChannelPipeline0 = new DefaultChannelPipeline();
      LocalServerChannel localServerChannel0 = defaultLocalServerChannelFactory0.newChannel(defaultChannelPipeline0);
      ChannelSink channelSink0 = defaultChannelPipeline0.getSink();
      int int0 = 0;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      String string0 = "$m}3Kg,U3VUw3Iuv=";
      NamingThreadFactory namingThreadFactory0 = new NamingThreadFactory("$m}3Kg,U3VUw3Iuv=");
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 753, 753, timeUnit0, linkedTransferQueue0, namingThreadFactory0, threadPoolExecutor_DiscardPolicy0);
      ThreadNameDeterminer threadNameDeterminer0 = mock(ThreadNameDeterminer.class, new ViolatedAssumptionAnswer());
      NioWorker nioWorker0 = new NioWorker(threadPoolExecutor0, threadNameDeterminer0);
      NioSocketChannel nioSocketChannel0 = null;
      try {
        nioSocketChannel0 = new NioSocketChannel(localServerChannel0, defaultLocalServerChannelFactory0, defaultChannelPipeline0, channelSink0, (SocketChannel) null, nioWorker0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // attached already
         //
         verifyException("org.jboss.netty.channel.DefaultChannelPipeline", e);
      }
  }
}
