/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 20:28:52 GMT 2024
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.lang.reflect.Type;
import java.sql.Date;
import java.text.DateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteDateTimeSerializerBase_ESTest extends EvosuiteDateTimeSerializerBase_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test00()  throws Throwable  {
      Date date0 = new Date(1L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DateSerializer dateSerializer0 = new DateSerializer();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (java.util.Date) date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test01()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      System.setCurrentTimeMillis((-125L));
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) mockGregorianCalendar0);
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test02()  throws Throwable  {
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      sqlDateSerializer0._acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null, false);
      assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 50)
  public void test03()  throws Throwable  {
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<StdDateFormat> class0 = StdDateFormat.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0);
      CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
      calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, arrayType0);
      assertFalse(arrayType0.isMapLikeType());
  }

  @Test(timeout = 50)
  public void test04()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DateSerializer dateSerializer0 = DateSerializer.instance;
      boolean boolean0 = dateSerializer0._asTimestamp(serializerProvider0);
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test05()  throws Throwable  {
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = sqlDateSerializer0._asTimestamp(serializerProvider0);
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test06()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 50)
  public void test07()  throws Throwable  {
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      jsonFormatVisitorWrapper_Base0.setProvider(defaultSerializerProvider_Impl0);
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      // Undeclared exception!
      try { 
        calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 50)
  public void test08()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        dateSerializer0._asTimestamp(defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 50)
  public void test09()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      // Undeclared exception!
      try { 
        dateSerializer0._asTimestamp((SerializerProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }

  @Test(timeout = 50)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SqlDateSerializer sqlDateSerializer0 = new SqlDateSerializer(boolean0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      sqlDateSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(sqlDateSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 50)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<StdDateFormat> class0 = StdDateFormat.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DateSerializer dateSerializer0 = DateSerializer.instance;
      JsonNode jsonNode0 = dateSerializer0.getSchema(serializerProvider0, (Type) class0);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 50)
  public void test12()  throws Throwable  {
      Class<StdDateFormat> class0 = StdDateFormat.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DateFormat dateFormat0 = DateFormat.getTimeInstance(0);
      CalendarSerializer calendarSerializer0 = new CalendarSerializer((Boolean) null, dateFormat0);
      JsonNode jsonNode0 = calendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0, true);
      assertEquals(1, jsonNode0.size());
  }

  @Test(timeout = 50)
  public void test13()  throws Throwable  {
      Date date0 = new Date(0L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DateSerializer dateSerializer0 = new DateSerializer();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (java.util.Date) date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test14()  throws Throwable  {
      Date date0 = new Date((-1524L));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DateSerializer dateSerializer0 = DateSerializer.instance;
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (java.util.Date) date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test15()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = dateSerializer0.isEmpty((SerializerProvider) defaultSerializerProvider_Impl0, (java.util.Date) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test16()  throws Throwable  {
      Date date0 = new Date(1L);
      DateSerializer dateSerializer0 = DateSerializer.instance;
      boolean boolean0 = dateSerializer0.isEmpty((java.util.Date) date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test17()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 0);
      java.util.Date date0 = java.util.Date.from(instant0);
      boolean boolean0 = dateSerializer0.isEmpty(date0);
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test18()  throws Throwable  {
      CalendarSerializer calendarSerializer0 = new CalendarSerializer();
      boolean boolean0 = calendarSerializer0.isEmpty((Calendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test19()  throws Throwable  {
      DateSerializer dateSerializer0 = DateSerializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonSerializer<?> jsonSerializer0 = dateSerializer0.createContextual(serializerProvider0, (BeanProperty) null);
      assertSame(dateSerializer0, jsonSerializer0);
  }

  @Test(timeout = 50)
  public void test20()  throws Throwable  {
      DateSerializer dateSerializer0 = new DateSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.construct("tiG", "tiG");
      JavaType javaType0 = TypeFactory.unknownType();
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, annotationMap0, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        dateSerializer0.createContextual(defaultSerializerProvider_Impl0, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 50)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      CalendarSerializer calendarSerializer0 = CalendarSerializer.instance;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      // Undeclared exception!
      try { 
        calendarSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, arrayType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null SerializerProvider passed for java.util.Calendar
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase", e);
      }
  }
}
