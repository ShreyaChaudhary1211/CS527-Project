/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 02 23:43:07 GMT 2024
 */

package edu.harvard.h2ms.domain.core;

import org.junit.Test;
import static org.junit.Assert.*;

import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteUser_ESTest extends EvosuiteUser_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test00()  throws Throwable  {
      User user0 = new User("{d", "{d", "{d", "{d", "", "");
  }

  @Test(timeout = 50)
  public void test01()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("users (after) ");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test03()  throws Throwable  {
      User user0 = new User();
      user0.setType("Sbdvg");
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test04()  throws Throwable  {
      User user0 = new User();
      user0.setType("");
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test05()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test06()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      user0.setRoles(linkedHashSet0);
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test07()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("Ta(LVwi X3v");
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test08()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("");
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test09()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("#b`;1@_. 6A&Bpa3K0e");
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("");
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test11()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null");
      user0.getMiddleName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test12()  throws Throwable  {
      User user0 = new User((String) null, "", "", "User [id=", (String) null, "3I9Op<=Qp");
      String string0 = user0.getMiddleName();
      assertEquals("3I9Op<=Qp", user0.getType());
      assertEquals("", string0);
      assertTrue(user0.isEnabled());
      assertEquals("user [id=", user0.getUsername());
      assertNotNull(string0);
      assertEquals("", user0.getLastName());
  }

  @Test(timeout = 50)
  public void test13()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("t+f");
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test14()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("");
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test15()  throws Throwable  {
      User user0 = new User();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1651));
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      Instant instant0 = MockInstant.from(zonedDateTime0);
      Date date0 = Date.from(instant0);
      user0.setLastLogin(date0);
      user0.getLastLogin();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test16()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(0L);
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test17()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(801L);
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test18()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-1L));
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test19()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName(", type");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test20()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("5Jz8");
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test22()  throws Throwable  {
      User user0 = new User((String) null, (String) null, "O,", "", (String) null, "");
      MockDate mockDate0 = new MockDate();
      user0.setCreatedOn(mockDate0);
      user0.getCreatedOn();
      assertEquals("O,", user0.getLastName());
      assertEquals("", user0.getUsername());
      assertTrue(user0.isEnabled());
      assertEquals("", user0.getType());
  }

  @Test(timeout = 50)
  public void test23()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      user0.setPassword("I)t`)J_");
  }

  @Test(timeout = 50)
  public void test24()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test25()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("");
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test26()  throws Throwable  {
      User user0 = new User((String) null, (String) null, (String) null, (String) null, (String) null, (String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test27()  throws Throwable  {
      User user0 = new User();
      user0.setEmail((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test28()  throws Throwable  {
      User user0 = new User();
      user0.getLastLogin();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test29()  throws Throwable  {
      User user0 = new User();
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test30()  throws Throwable  {
      User user0 = new User();
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test31()  throws Throwable  {
      User user0 = new User();
      user0.getMiddleName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test32()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test33()  throws Throwable  {
      User user0 = new User();
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test34()  throws Throwable  {
      User user0 = new User();
      assertTrue(user0.isEnabled());
      
      user0.setEnabled(false);
      boolean boolean0 = user0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test35()  throws Throwable  {
      User user0 = new User();
      user0.getAuthorities();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test36()  throws Throwable  {
      User user0 = new User();
      user0.getPassword();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test37()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test38()  throws Throwable  {
      User user0 = new User();
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test39()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(true);
      boolean boolean0 = user0.isVerified();
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test40()  throws Throwable  {
      User user0 = new User();
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test41()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(user0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test42()  throws Throwable  {
      User user0 = new User();
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test43()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test44()  throws Throwable  {
      User user0 = new User();
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test45()  throws Throwable  {
      User user0 = new User();
      user0.getCreatedOn();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test46()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(user0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test47()  throws Throwable  {
      User user0 = new User();
      user0.isVerified();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test48()  throws Throwable  {
      User user0 = new User();
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test49()  throws Throwable  {
      User user0 = new User();
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }
}
