/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 13:44:37 GMT 2024
 */

package edu.harvard.h2ms.domain.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.harvard.h2ms.domain.core.Role;
import edu.harvard.h2ms.domain.core.User;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test00()  throws Throwable  {
      User user0 = new User();
      assertTrue(user0.isEnabled());
      
      user0.setEnabled(false);
      boolean boolean0 = user0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test01()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("<.-");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test03()  throws Throwable  {
      User user0 = new User("", "CZ_rF_]fn[^?P~", "CZ_rF_]fn[^?P~", "CZ_rF_]fn[^?P~", (String) null, "uk4fUx:o)g");
      String string0 = user0.getType();
      assertNotNull(string0);
      assertEquals("CZ_rF_]fn[^?P~", user0.getLastName());
      assertEquals("CZ_rF_]fn[^?P~", user0.getMiddleName());
      assertEquals("cz_rf_]fn[^?p~", user0.getEmail());
      assertEquals("", user0.getFirstName());
      assertEquals("uk4fUx:o)g", string0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test04()  throws Throwable  {
      User user0 = new User();
      user0.setType("");
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test05()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      linkedHashSet0.add((Role) null);
      user0.setRoles(linkedHashSet0);
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test06()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("]V`8");
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test07()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("INJeo*I");
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test08()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency("");
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test09()  throws Throwable  {
      User user0 = new User("O82}}w72Rk/", "renSokIyJ7_R>rW?^AT", "renSokIyJ7_R>rW?^AT", "O82}}w72Rk/", (String) null, "");
      String string0 = user0.getMiddleName();
      assertEquals("renSokIyJ7_R>rW?^AT", string0);
      assertEquals("O82}}w72Rk/", user0.getFirstName());
      assertEquals("o82}}w72rk/", user0.getUsername());
      assertEquals("renSokIyJ7_R>rW?^AT", user0.getLastName());
      assertEquals("", user0.getType());
      assertTrue(user0.isEnabled());
      assertNotNull(string0);
  }

  @Test(timeout = 50)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("W[s");
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test11()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate(0, (-357), (-1), (-1), 0, 0);
      user0.setLastLogin(mockDate0);
      user0.getLastLogin();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test12()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(0L);
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test13()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long(1L);
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test14()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-2655L));
      user0.setId(long0);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test15()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("A>.+Iv![yDYOXWHsW!");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test16()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test17()  throws Throwable  {
      User user0 = new User();
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test18()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("<.-");
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test19()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate();
      user0.setCreatedOn(mockDate0);
      user0.getCreatedOn();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test20()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      user0.setPassword("");
  }

  @Test(timeout = 50)
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test22()  throws Throwable  {
      User user0 = new User();
      user0.setEmail((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test23()  throws Throwable  {
      User user0 = new User("fb", (String) null, "X']7A(c", "users (after) ", "o9#gwV7)% t/cjy", "INJeo*I");
  }

  @Test(timeout = 50)
  public void test24()  throws Throwable  {
      User user0 = new User();
      user0.getLastLogin();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test25()  throws Throwable  {
      User user0 = new User();
      user0.getNotificationFrequency();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test26()  throws Throwable  {
      User user0 = new User();
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test27()  throws Throwable  {
      User user0 = new User();
      user0.getMiddleName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test28()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test29()  throws Throwable  {
      User user0 = new User();
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test30()  throws Throwable  {
      User user0 = new User();
      user0.getAuthorities();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test31()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName("");
      user0.getMiddleName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test32()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test33()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("");
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test34()  throws Throwable  {
      User user0 = new User();
      user0.getPassword();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test35()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test36()  throws Throwable  {
      User user0 = new User();
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test37()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(true);
      boolean boolean0 = user0.isVerified();
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test38()  throws Throwable  {
      User user0 = new User((String) null, "", "-%GS;Nb?", "", (String) null, "org.springframework.security.core.authority.SimpleGrantedAuthority");
      String string0 = user0.getEmail();
      assertNotNull(string0);
      assertEquals("org.springframework.security.core.authority.SimpleGrantedAuthority", user0.getType());
      assertEquals("-%GS;Nb?", user0.getLastName());
      assertEquals("", string0);
      assertEquals("", user0.getMiddleName());
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test39()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(user0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test40()  throws Throwable  {
      User user0 = new User();
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test41()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonExpired();
      assertTrue(user0.isEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test42()  throws Throwable  {
      User user0 = new User();
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test43()  throws Throwable  {
      User user0 = new User();
      user0.getCreatedOn();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test44()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test45()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("");
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test46()  throws Throwable  {
      User user0 = new User();
      user0.isVerified();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test47()  throws Throwable  {
      User user0 = new User();
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test48()  throws Throwable  {
      User user0 = new User();
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }
}
