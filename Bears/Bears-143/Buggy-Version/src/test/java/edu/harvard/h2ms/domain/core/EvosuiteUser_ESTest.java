/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 03 02:06:04 GMT 2024
 */

package edu.harvard.h2ms.domain.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.security.core.GrantedAuthority;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteUser_ESTest extends EvosuiteUser_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test00()  throws Throwable  {
      User user0 = new User();
      assertTrue(user0.isEnabled());
      
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
      
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      
      user0.getFirstName();
      user0.setEnabled(true);
      user0.getPassword();
      boolean boolean1 = user0.isCredentialsNonExpired();
      assertTrue(boolean1);
      
      user0.setFirstName("");
      user0.getRoles();
      user0.getFirstName();
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test01()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-3343L));
      user0.setId(long0);
      user0.setLastName("1>Ly0wtuma");
      user0.getId();
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.setEmail("");
      user0.getId();
      user0.getFirstName();
      Long long0 = new Long(2180L);
      user0.setId(long0);
      MockDate mockDate0 = new MockDate(2180L);
      MockDate mockDate1 = new MockDate(0, 0, 0);
      mockDate0.before(mockDate1);
      mockDate1.toInstant();
      mockDate0.after(mockDate1);
      user0.setLastLogin(mockDate0);
      user0.getFirstName();
      user0.getId();
      user0.getEmail();
      user0.getFirstName();
      user0.setVerified(true);
      user0.getRoles();
      user0.isAccountNonExpired();
      user0.getAuthorities();
      user0.getPassword();
      user0.getEmail();
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(user0.isVerified());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test03()  throws Throwable  {
      User user0 = new User("", "s+G0S`nFm9-dp+,RoMv", "", ", middleName=", (String) null, (String) null);
      user0.toString();
      user0.setMiddleName("User [id=null, firstName=, middleName=s+G0S`nFm9-dp+,RoMv, lastName=, email=, middlename=, typenull, notificationFrequency=null");
      user0.getPassword();
      user0.toString();
      user0.isAccountNonExpired();
      user0.setNotificationFrequency("");
      user0.isCredentialsNonExpired();
      user0.setVerified(true);
      user0.isCredentialsNonExpired();
      user0.setFirstName("");
      user0.setResetToken("");
      user0.isAccountNonExpired();
      user0.toString();
      user0.setMiddleName("User [id=null, firstName=, middleName=s+G0S`nFm9-dp+,RoMv, lastName=, email=, middlename=, typenull, notificationFrequency=null");
      user0.setResetToken("");
      user0.setMiddleName("Invalid salt");
      user0.getAuthorities();
      user0.isAccountNonLocked();
      user0.isVerified();
      user0.setFirstName("Invalid salt");
      user0.getFirstName();
      user0.isAccountNonLocked();
      user0.isAccountNonLocked();
      user0.getPassword();
      user0.isAccountNonLocked();
      user0.isVerified();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 50)
  public void test04()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(false);
      Long long0 = new Long(0L);
      user0.setId(long0);
      user0.getAuthorities();
      user0.setEnabled(true);
      user0.getLastName();
      User user1 = new User();
      user1.setType((String) null);
      user1.getCreatedOn();
      user1.setLastName((String) null);
      user0.setCreatedOn((Date) null);
      boolean boolean0 = user0.isVerified();
      boolean boolean1 = user1.isAccountNonExpired();
      assertTrue(boolean1);
      
      user0.setEmail("z:");
      Collection<? extends GrantedAuthority> collection0 = user1.getAuthorities();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Object object0 = new Object();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      linkedHashSet0.removeAll(collection0);
      String string0 = user1.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      
      linkedHashSet0.remove(object0);
      Role role1 = new Role();
      user0.setCreatedOn((Date) null);
      boolean boolean2 = user0.isAccountNonLocked();
      assertFalse(boolean2 == boolean0);
      
      User user2 = new User();
      user2.isVerified();
      user2.setType("");
      user0.setNotificationFrequency("O0p-#S");
      assertTrue(user0.isEnabled());
      
      user2.getId();
      user2.getId();
      user2.getType();
      assertTrue(user2.isAccountNonLocked());
  }

  @Test(timeout = 50)
  public void test05()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      assertTrue(user0.isEnabled());
      
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test06()  throws Throwable  {
      User user0 = new User("yygF=~", (String) null, "", (String) null, (String) null, "1%)|$j");
      user0.setResetToken((String) null);
      MockDate mockDate0 = new MockDate((-1L));
      mockDate0.setTime((-1L));
      mockDate0.getTime();
      user0.setCreatedOn(mockDate0);
      user0.setEmail((String) null);
      user0.setLastLogin(mockDate0);
      user0.setMiddleName((String) null);
      user0.getPassword();
      user0.getCreatedOn();
      String string0 = user0.getEmail();
      assertEquals("", user0.getLastName());
      assertEquals("1%)|$j", user0.getType());
      assertNull(string0);
      assertTrue(user0.isEnabled());
      assertEquals("yygF=~", user0.getFirstName());
  }

  @Test(timeout = 50)
  public void test07()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(false);
      Long long0 = new Long(0L);
      user0.setId(long0);
      user0.getAuthorities();
      user0.setEnabled(true);
      user0.getLastName();
      User user1 = new User();
      user1.setType((String) null);
      user1.getCreatedOn();
      user0.setCreatedOn((Date) null);
      boolean boolean0 = user0.isVerified();
      boolean boolean1 = user0.isAccountNonExpired();
      assertTrue(boolean1);
      
      user0.setEmail("z:");
      Collection<? extends GrantedAuthority> collection0 = user1.getAuthorities();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Object object0 = new Object();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      linkedHashSet0.removeAll(collection0);
      linkedHashSet0.remove(object0);
      Role role1 = new Role();
      linkedHashSet0.add(role1);
      user0.setRoles(linkedHashSet0);
      user1.setResetToken("edu.harvard.h2ms.domain.core.Role");
      user0.getUsername();
      user1.isAccountNonLocked();
      user1.isVerified();
      boolean boolean2 = user1.isAccountNonLocked();
      assertFalse(boolean2 == boolean0);
      
      user1.getCreatedOn();
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test08()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      Role role1 = new Role();
      linkedHashSet0.add(role1);
      linkedHashSet0.add(role1);
      user0.setRoles(linkedHashSet0);
      user0.setLastName("");
      MockDate mockDate0 = new MockDate();
      user0.setLastLogin(mockDate0);
      user0.setVerified(false);
      user0.setEmail("");
      user0.setNotificationFrequency("Rx2~Du>2%aohqp->");
      user0.getFirstName();
      boolean boolean0 = user0.isAccountNonExpired();
      user0.getAuthorities();
      boolean boolean1 = user0.isVerified();
      assertFalse(boolean1 == boolean0);
      
      user0.getPassword();
      user0.getFirstName();
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=, email=, typenull, notificationFrequency=Rx2~Du>2%aohqp->", string0);
      
      user0.getRoles();
      user0.getPassword();
      System.setCurrentTimeMillis(0L);
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test09()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("");
      assertTrue(user0.isEnabled());
      
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setType("<TlC76n PW(=cC");
      user0.setEmail("Kj8Y|#}gdT");
      user0.setFirstName("Kj8Y|#}gdT");
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=Kj8Y|#}gdT, middleName=null, lastName=null, email=kj8y|#}gdt, type<TlC76n PW(=cC, notificationFrequency=null", string0);
      
      user0.isVerified();
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test11()  throws Throwable  {
      User user0 = new User();
      user0.setLastName("Notification [id=");
      user0.setNotificationFrequency("H");
      user0.getNotificationFrequency();
      user0.setResetToken("");
      user0.setEmail("t8<!!.P5o*Ve&@T");
      user0.setFirstName("H");
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate((-737663887), 1206, (-352), (-352), 2020, (-737663887));
      mockDate0.after(mockDate1);
      mockDate0.getTime();
      user0.setCreatedOn(mockDate0);
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
      
      user0.isVerified();
      user0.setType("H");
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=H, middleName=null, lastName=Notification [id=, email=t8<!!.p5o*ve&@t, typeH, notificationFrequency=H", string0);
      
      user0.getResetToken();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test12()  throws Throwable  {
      User user0 = new User();
      Long long0 = new Long((-3112L));
      user0.setId(long0);
      user0.getCreatedOn();
      user0.setLastName("");
      MockDate mockDate0 = new MockDate(977, 977, 977);
      user0.setCreatedOn(mockDate0);
      user0.isVerified();
      boolean boolean0 = user0.isAccountNonExpired();
      user0.setEmail("");
      Collection<? extends GrantedAuthority> collection0 = user0.getAuthorities();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Object object0 = new Object();
      Role role0 = new Role();
      Role role1 = new Role();
      linkedHashSet0.add(role1);
      linkedHashSet0.removeAll(collection0);
      linkedHashSet0.remove((Object) null);
      Role role2 = new Role();
      linkedHashSet0.add(role0);
      user0.setRoles(linkedHashSet0);
      user0.setResetToken("");
      user0.getUsername();
      user0.getAuthorities();
      user0.setLastName(".Mx@_t<frpI1F1F;'4>");
      boolean boolean1 = user0.isEnabled();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 50)
  public void test13()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      user0.setRoles(linkedHashSet0);
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      
      User user1 = new User();
      user1.setResetToken("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null");
      user0.setNotificationFrequency("");
      user0.getNotificationFrequency();
      user0.setResetToken("1+2-kQU$[6Xu/");
      user1.setEmail("");
      user0.setFirstName("");
      MockDate mockDate0 = new MockDate();
      mockDate0.getTime();
      user1.setCreatedOn(mockDate0);
      boolean boolean0 = user1.isAccountNonLocked();
      assertTrue(boolean0);
      
      user1.isVerified();
      user1.setType("W&[a0");
      User user2 = new User();
      user2.setNotificationFrequency("");
      user1.getId();
      assertTrue(user1.isEnabled());
  }

  @Test(timeout = 50)
  public void test14()  throws Throwable  {
      User user0 = new User();
      user0.setType("}wU;D^");
      user0.getRoles();
      user0.setRoles((Set<Role>) null);
      user0.setResetToken("i=.Zd");
      user0.getEmail();
      user0.setNotificationFrequency((String) null);
      Long long0 = null;
      user0.setId((Long) null);
      user0.getType();
      user0.getNotificationFrequency();
      user0.getPassword();
      user0.getPassword();
      user0.setMiddleName("}wU;D^");
      user0.getLastLogin();
      // Undeclared exception!
      user0.setPassword("Dn.pCf`:3fLfo@");
  }

  @Test(timeout = 50)
  public void test15()  throws Throwable  {
      User user0 = new User();
      user0.getAuthorities();
      assertTrue(user0.isEnabled());
      
      Long long0 = Long.getLong("O;',u{ f;", 0L);
      user0.setId(long0);
      user0.setMiddleName("O;',u{ f;");
      user0.setLastName("]nw=");
      user0.setMiddleName("IF");
      user0.setMiddleName("`2X[{z#wpOd%I@xT");
      user0.setResetToken("e.*}^*rD");
      user0.getType();
      user0.getResetToken();
      user0.getRoles();
      user0.toString();
      user0.setMiddleName("User [id=0, firstName=null, middleName=`2X[{z#wpOd%I@xT, lastName=]nw=, email=null, typenull, notificationFrequency=null");
      user0.setMiddleName((String) null);
      boolean boolean0 = user0.isAccountNonExpired();
      assertTrue(boolean0);
      
      String string0 = user0.toString();
      assertEquals("User [id=0, firstName=null, middleName=null, lastName=]nw=, email=null, typenull, notificationFrequency=null", string0);
      
      user0.getResetToken();
      user0.setMiddleName("users (after) ");
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test16()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test17()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(false);
      Long long0 = new Long(0L);
      user0.setId(long0);
      user0.getAuthorities();
      user0.setEnabled(true);
      user0.getLastName();
      User user1 = new User();
      user1.setType((String) null);
      user1.getCreatedOn();
      user1.setLastName((String) null);
      user0.setCreatedOn((Date) null);
      user0.isVerified();
      user0.isAccountNonExpired();
      user0.setEmail("z:");
      Collection<? extends GrantedAuthority> collection0 = user1.getAuthorities();
      LinkedHashSet<Role> linkedHashSet0 = new LinkedHashSet<Role>();
      Object object0 = new Object();
      Role role0 = new Role();
      linkedHashSet0.add(role0);
      linkedHashSet0.removeAll(collection0);
      linkedHashSet0.remove(object0);
      Role role1 = new Role();
      linkedHashSet0.add(role1);
      user0.setRoles(linkedHashSet0);
      user1.setResetToken("edu.harvard.h2ms.domain.core.Role");
      user0.getUsername();
      user1.getAuthorities();
      assertTrue(user1.isEnabled());
      
      user1.setEnabled(false);
      user1.setLastName("z:");
      boolean boolean0 = user1.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test18()  throws Throwable  {
      User user0 = new User();
      user0.setEmail((String) null);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test19()  throws Throwable  {
      String string0 = null;
      String string1 = "clT%-\\{cR5oy?k5Z+\\d";
      User user0 = new User((String) null, (String) null, (String) null, (String) null, (String) null, "clT%-{cR5oy?k5Z+d");
      int int0 = (-1865);
      int int1 = (-1585);
      MockDate mockDate0 = new MockDate(2736, 2736, 2736, (-1865), (-1585));
      user0.setCreatedOn(mockDate0);
      // Undeclared exception!
      try { 
        mockDate0.before((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 50)
  public void test20()  throws Throwable  {
      User user0 = new User("edu.harvard.h2ms.domain.core.Notification", "users (after) ", "", "|&<q $U2%ir0h", "", "org.springframework.security.core.authority.SimpleGrantedAuthority");
  }

  @Test(timeout = 50)
  public void test21()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName("");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test22()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
      
      user0.setMiddleName("");
      user0.getUsername();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test23()  throws Throwable  {
      User user0 = new User((String) null, (String) null, (String) null, (String) null, (String) null, "");
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test24()  throws Throwable  {
      User user0 = new User();
      user0.setType("H(lpI#~Q*gi\"-m");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test25()  throws Throwable  {
      User user0 = new User();
      user0.getPassword();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test26()  throws Throwable  {
      User user0 = new User();
      user0.setVerified(true);
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(user0.isVerified());
      assertTrue(boolean0);
  }

  @Test(timeout = 50)
  public void test27()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertTrue(user0.isEnabled());
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      
      user0.getAuthorities();
      User user1 = new User();
      user1.setEnabled(false);
      user0.setLastName("gD/8% _[+~V");
      assertTrue(user0.isEnabled());
      
      boolean boolean0 = user1.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 50)
  public void test28()  throws Throwable  {
      User user0 = new User();
      user0.setNotificationFrequency(", notificationBody=");
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test29()  throws Throwable  {
      User user0 = new User();
      user0.getEmail();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test30()  throws Throwable  {
      User user0 = new User();
      user0.isVerified();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test31()  throws Throwable  {
      User user0 = new User();
      user0.getCreatedOn();
      assertTrue(user0.isEnabled());
      
      user0.setLastLogin((Date) null);
      user0.getPassword();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test32()  throws Throwable  {
      User user0 = new User();
      user0.setId((Long) null);
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test33()  throws Throwable  {
      User user0 = new User();
      user0.getLastName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test34()  throws Throwable  {
      User user0 = new User();
      user0.getNotificationFrequency();
      user0.setResetToken("");
      user0.setEmail("t8<!!.P5o*Ve&@T");
      user0.setFirstName((String) null);
      boolean boolean0 = user0.isAccountNonLocked();
      assertTrue(boolean0);
      
      user0.isVerified();
      user0.setNotificationFrequency("Invalid maxolen");
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test35()  throws Throwable  {
      User user0 = new User("", "", "", (String) null, (String) null, "");
      user0.setFirstName("");
      user0.getMiddleName();
      user0.getCreatedOn();
      // Undeclared exception!
      user0.setPassword("");
  }

  @Test(timeout = 50)
  public void test36()  throws Throwable  {
      User user0 = new User();
      user0.getRoles();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test37()  throws Throwable  {
      User user0 = new User();
      user0.getAuthorities();
      user0.setMiddleName("yPxk#h]6C.{,jDzF");
      Long long0 = new Long(1433L);
      user0.setId(long0);
      user0.setFirstName(".&B{Ds.o %_or");
      user0.isAccountNonLocked();
      user0.setFirstName("");
      user0.setLastName("edu.harvard.h2ms.domain.core.User");
      user0.getRoles();
      user0.setNotificationFrequency(", reportType=");
      String string0 = user0.toString();
      assertEquals("User [id=1433, firstName=, middleName=yPxk#h]6C.{,jDzF, lastName=edu.harvard.h2ms.domain.core.User, email=null, typenull, notificationFrequency=, reportType=", string0);
      
      user0.setVerified(false);
      user0.setRoles((Set<Role>) null);
      user0.setEnabled(true);
      user0.getCreatedOn();
      user0.getType();
      user0.getMiddleName();
      user0.getType();
      user0.setFirstName(")iyIF8N");
      boolean boolean0 = user0.isEnabled();
      user0.isAccountNonLocked();
      boolean boolean1 = user0.isVerified();
      assertFalse(boolean1 == boolean0);
      
      user0.getNotificationFrequency();
      boolean boolean2 = user0.isAccountNonLocked();
      assertTrue(boolean2);
      
      user0.getFirstName();
      user0.getId();
      user0.getCreatedOn();
      user0.getEmail();
      user0.getLastName();
      user0.setEnabled(true);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test38()  throws Throwable  {
      User user0 = new User();
      user0.setMiddleName("`q\"FwYp:-!#5u;rJA");
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test39()  throws Throwable  {
      User user0 = new User();
      user0.getId();
      assertTrue(user0.isEnabled());
      
      user0.getAuthorities();
      user0.setMiddleName("w");
      user0.setResetToken("users (after) ");
      user0.isCredentialsNonExpired();
      String string0 = "User [id=";
      // Undeclared exception!
      user0.setPassword("User [id=");
  }

  @Test(timeout = 50)
  public void test40()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      user0.setPassword("");
  }

  @Test(timeout = 50)
  public void test41()  throws Throwable  {
      User user0 = new User();
      user0.setFirstName("OBLjegHz");
      user0.setMiddleName("OBLjegHz");
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test42()  throws Throwable  {
      User user0 = new User();
      user0.setEnabled(true);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test43()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertEquals("User [id=null, firstName=null, middleName=null, lastName=null, email=null, typenull, notificationFrequency=null", string0);
      
      user0.isVerified();
      user0.getRoles();
      user0.setRoles((Set<Role>) null);
      user0.getResetToken();
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test44()  throws Throwable  {
      User user0 = new User();
      user0.getType();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test45()  throws Throwable  {
      User user0 = new User();
      user0.getFirstName();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test46()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate();
      user0.setCreatedOn(mockDate0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test47()  throws Throwable  {
      User user0 = new User();
      user0.getLastLogin();
      user0.setCreatedOn((Date) null);
      user0.getPassword();
      user0.setVerified(false);
      user0.isEnabled();
      user0.getAuthorities();
      user0.setPassword((String) null);
      user0.setType((String) null);
      user0.getLastName();
      user0.getCreatedOn();
      user0.getMiddleName();
      user0.getFirstName();
      user0.setNotificationFrequency((String) null);
      user0.isCredentialsNonExpired();
      user0.getAuthorities();
      user0.getAuthorities();
      user0.setEnabled(true);
      user0.setLastLogin((Date) null);
      user0.getEmail();
      user0.setVerified(true);
      user0.getLastName();
      user0.setLastLogin((Date) null);
      // Undeclared exception!
      user0.setPassword("&D8{N89(,^,U");
  }

  @Test(timeout = 50)
  public void test48()  throws Throwable  {
      User user0 = new User();
      user0.getLastLogin();
      user0.setCreatedOn((Date) null);
      user0.getId();
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test49()  throws Throwable  {
      User user0 = new User();
      user0.setResetToken("");
      boolean boolean0 = user0.isCredentialsNonExpired();
      assertTrue(boolean0);
      assertTrue(user0.isEnabled());
  }

  @Test(timeout = 50)
  public void test50()  throws Throwable  {
      User user0 = new User();
      MockDate mockDate0 = new MockDate((-1674), (-1870), 0, (-1674), 0, 0);
      user0.setLastLogin(mockDate0);
      Date date0 = user0.getLastLogin();
      mockDate0.getTime();
      user0.getResetToken();
      user0.setLastLogin(date0);
      user0.setResetToken((String) null);
      user0.getFirstName();
      user0.getType();
      user0.setFirstName((String) null);
      user0.setLastName((String) null);
      user0.setCreatedOn(date0);
      mockDate0.toInstant();
      user0.setCreatedOn(mockDate0);
      user0.isAccountNonLocked();
      user0.setEnabled(true);
      // Undeclared exception!
      user0.setPassword("");
  }

  @Test(timeout = 50)
  public void test51()  throws Throwable  {
      User user0 = new User("+[3", "yaRv9d", "", "", "yaRv9d", "");
  }

  @Test(timeout = 50)
  public void test52()  throws Throwable  {
      String string0 = "`q\"FwYp:-!#5u;rJA";
      User user0 = new User("`q\"FwYp:-!#5u;rJA", "`q\"FwYp:-!#5u;rJA", "`q\"FwYp:-!#5u;rJA", "`q\"FwYp:-!#5u;rJA", "`q\"FwYp:-!#5u;rJA", "`q\"FwYp:-!#5u;rJA");
  }

  @Test(timeout = 50)
  public void test53()  throws Throwable  {
      String string0 = "]+>1-)!lUqT";
      String string1 = "wG0";
      User user0 = new User("]+>1-)!lUqT", "wG0", "]ic@dHo&PgL\u0006yH}J/", "]ic@dHo&PgL\u0006yH}J/", "2o)<3R", "2o)<3R");
  }
}
