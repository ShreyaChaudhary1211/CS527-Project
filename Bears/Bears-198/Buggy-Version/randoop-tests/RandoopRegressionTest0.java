import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        com.amazonaws.encryptionsdk.model.CiphertextHeaders ciphertextHeaders0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.fromCiphertextHeaders(ciphertextHeaders0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = builder0.setEncryptionContext(strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setEncryptionContext(strMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = builder0.setEncryptedDataKeys(keyBlobList1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = strMap4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.lang.Class<?> wildcardClass6 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        java.lang.Class<?> wildcardClass10 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setEncryptionContext(strMap3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = builder0.setEncryptionContext(strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass5 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(keyBlobList4);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(keyBlobList6);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder4.getAlgorithm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = cryptoAlgorithm6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.lang.Class<?> wildcardClass9 = keyBlobList6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        java.lang.Class<?> wildcardClass6 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setEncryptedDataKeys(keyBlobList6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(keyBlobList4);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        java.lang.Class<?> wildcardClass5 = decryptionMaterialsRequest3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest1.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder6.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass21 = keyBlobList20.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.lang.Class<?> wildcardClass7 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder48.setEncryptionContext(strMap49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder3.setEncryptionContext(strMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        java.lang.Class<?> wildcardClass28 = builder27.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strMap15);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder8.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.lang.Class<?> wildcardClass8 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder9.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder21.setEncryptionContext(strMap22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder8.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptionContext(strMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder9.setEncryptionContext(strMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.lang.Class<?> wildcardClass15 = builder14.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder0.setEncryptionContext(strMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = strMap2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder4.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder4.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = strMap7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass16 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setEncryptionContext(strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder16.setEncryptionContext(strMap17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(cryptoAlgorithm20);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder0.setEncryptionContext(strMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass8 = keyBlobList7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(keyBlobList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder7.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder27.setEncryptionContext(strMap28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setEncryptionContext(strMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder4.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setEncryptionContext(strMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = builder48.getEncryptionContext();
        java.lang.Class<?> wildcardClass50 = builder48.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(strMap49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptionContext(strMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder8.setAlgorithm(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder8.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNull(cryptoAlgorithm16);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        java.lang.Class<?> wildcardClass9 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(keyBlobList3);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder4.setEncryptionContext(strMap8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNull(keyBlobList6);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder9.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder9.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder9.setAlgorithm(cryptoAlgorithm16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder18.build();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = decryptionMaterialsRequest19.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = decryptionMaterialsRequest19.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray23 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24, keyBlobArray23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder21.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest28 = builder26.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray29 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30, keyBlobArray29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm35 = builder6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(keyBlobArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest28);
        org.junit.Assert.assertNotNull(keyBlobArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(cryptoAlgorithm35);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest6.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass3 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        java.lang.Class<?> wildcardClass9 = decryptionMaterialsRequest8.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        java.lang.Class<?> wildcardClass10 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        java.lang.Class<?> wildcardClass8 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.lang.Class<?> wildcardClass7 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder6.setEncryptionContext(strMap30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(cryptoAlgorithm28);
        org.junit.Assert.assertNull(strMap29);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        java.lang.Class<?> wildcardClass10 = builder9.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder9.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder4.build();
        java.lang.Class<?> wildcardClass23 = builder4.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setEncryptionContext(strMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder3.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder11.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = builder11.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder11.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder16.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder16.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder16.setAlgorithm(cryptoAlgorithm20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder22.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder24.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray27 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28, keyBlobArray27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder24.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(keyBlobList18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNotNull(keyBlobArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder5.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder4.setAlgorithm(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder8.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass7 = decryptionMaterialsRequest3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(keyBlobList3);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setEncryptionContext(strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder6.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder4.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        java.lang.Class<?> wildcardClass49 = builder19.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest1.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest1.getAlgorithm();
        java.lang.Class<?> wildcardClass5 = decryptionMaterialsRequest1.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest6.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder11.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(keyBlobList7);
        org.junit.Assert.assertNotNull(keyBlobList8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder8.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder8.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(keyBlobList14);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        java.lang.Class<?> wildcardClass17 = keyBlobList12.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder7.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder7.setEncryptedDataKeys(keyBlobList9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder6.setAlgorithm(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder8.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptionContext(strMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder0.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder5.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder22.setEncryptionContext(strMap23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest7.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder6.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder8.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder11.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder8.setAlgorithm(cryptoAlgorithm9);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder10.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(keyBlobList11);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(keyBlobList6);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder8.setEncryptedDataKeys(keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder8.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(keyBlobList18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder8.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = strMap13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder0.setAlgorithm(cryptoAlgorithm12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobList11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        java.lang.Class<?> wildcardClass7 = decryptionMaterialsRequest5.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder6.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setAlgorithm(cryptoAlgorithm13);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        java.lang.Class<?> wildcardClass9 = decryptionMaterialsRequest5.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder0.setAlgorithm(cryptoAlgorithm11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder11.setAlgorithm(cryptoAlgorithm12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder13.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder4.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = builder16.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(cryptoAlgorithm17);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = strMap7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray12 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13, keyBlobArray12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = builder15.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(cryptoAlgorithm17);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = decryptionMaterialsRequest10.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobList12);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder5.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        java.lang.Class<?> wildcardClass23 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass10 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(keyBlobList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder18.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray25 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26, keyBlobArray25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList33 = builder31.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(keyBlobArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNotNull(keyBlobList33);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder8.setAlgorithm(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder3.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder10.setAlgorithm(cryptoAlgorithm11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder9.setAlgorithm(cryptoAlgorithm10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(keyBlobList12);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder11.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder10.build();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = decryptionMaterialsRequest11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = decryptionMaterialsRequest11.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder13.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray15 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList16, keyBlobArray15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList16);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder19.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder19.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(keyBlobList14);
        org.junit.Assert.assertNotNull(keyBlobArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNull(strMap21);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder4.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder16.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(keyBlobList18);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest6.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList1 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = builder0.setEncryptionContext(strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(keyBlobList1);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest7.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest7.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobList9);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder10.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder14.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray17 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18, keyBlobArray17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(keyBlobArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setAlgorithm(cryptoAlgorithm13);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder14.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder14.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder17.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setAlgorithm(cryptoAlgorithm22);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm24 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder17.setAlgorithm(cryptoAlgorithm24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest27 = builder26.build();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = decryptionMaterialsRequest27.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = decryptionMaterialsRequest27.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = builder29.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray31 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32, keyBlobArray31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder29.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest36 = builder34.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray37 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38, keyBlobArray37);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder34.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder25.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList45 = builder43.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest46 = builder43.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = decryptionMaterialsRequest46.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm48 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder49 = builder47.setAlgorithm(cryptoAlgorithm48);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm50 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = builder49.setAlgorithm(cryptoAlgorithm50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder49.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder53 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList55 = builder53.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest56 = builder53.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm57 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder58 = builder53.setAlgorithm(cryptoAlgorithm57);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder59 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest60 = builder59.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder61 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = builder61.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder61.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray64 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList65 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65, keyBlobArray64);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder67 = builder61.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder68 = builder59.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder69 = builder53.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder70 = builder49.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder71 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder72 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList65);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(keyBlobList15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest27);
        org.junit.Assert.assertNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(keyBlobList30);
        org.junit.Assert.assertNotNull(keyBlobArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest36);
        org.junit.Assert.assertNotNull(keyBlobArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNull(keyBlobList45);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(strMap52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strMap54);
        org.junit.Assert.assertNull(keyBlobList55);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(strMap62);
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNotNull(keyBlobArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder6.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNull(strMap21);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setAlgorithm(cryptoAlgorithm6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder5.setEncryptionContext(strMap8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder3.setAlgorithm(cryptoAlgorithm10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder11.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray10 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList11, keyBlobArray10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder13.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder13.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder19.build();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = decryptionMaterialsRequest20.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = decryptionMaterialsRequest20.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder22.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder22.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = builder22.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder22.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest30 = builder29.build();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = decryptionMaterialsRequest30.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = decryptionMaterialsRequest30.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList33 = builder32.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray34 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList35 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList35, keyBlobArray34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = builder32.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList35);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList39 = builder38.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder16.setEncryptedDataKeys(keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder5.setEncryptedDataKeys(keyBlobList39);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(keyBlobArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(keyBlobList23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(cryptoAlgorithm27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(keyBlobList33);
        org.junit.Assert.assertNotNull(keyBlobArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(keyBlobList39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest6.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder6.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(keyBlobList6);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setEncryptionContext(strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(strMap3);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray12 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13, keyBlobArray12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder15.setEncryptionContext(strMap17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder18.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray25 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26, keyBlobArray25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder31.getEncryptionContext();
        java.lang.Class<?> wildcardClass34 = builder31.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(keyBlobArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder8.build();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest9.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder8.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder5.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setEncryptionContext(strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNull(keyBlobList3);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder9.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = decryptionMaterialsRequest22.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNotNull(keyBlobList23);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        java.lang.Class<?> wildcardClass8 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNull(keyBlobList12);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder4.setEncryptionContext(strMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = strMap5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder6.getEncryptedDataKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = keyBlobList9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder0.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(keyBlobList13);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder7.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder7.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = decryptionMaterialsRequest10.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder4.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setEncryptedDataKeys(keyBlobList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder8.build();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest9.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest9.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray13 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList14, keyBlobArray13);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList14);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = decryptionMaterialsRequest18.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder21.build();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = decryptionMaterialsRequest22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest22.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder24.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray26 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList27 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27, keyBlobArray26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder24.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest31 = builder30.build();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = decryptionMaterialsRequest31.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = decryptionMaterialsRequest31.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = builder33.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder33.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList39 = builder38.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder29.setEncryptedDataKeys(keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder19.setEncryptedDataKeys(keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder7.setEncryptedDataKeys(keyBlobList39);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(keyBlobArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(keyBlobArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest31);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(keyBlobList34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(keyBlobList39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder0.setAlgorithm(cryptoAlgorithm9);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder10.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(keyBlobList11);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder15.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder15.setAlgorithm(cryptoAlgorithm20);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder15.setAlgorithm(cryptoAlgorithm22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest25 = builder24.build();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = decryptionMaterialsRequest25.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = decryptionMaterialsRequest25.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder27.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray29 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30, keyBlobArray29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder27.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest34 = builder32.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder32.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(keyBlobArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strMap33);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(strMap42);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder18.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray25 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26, keyBlobArray25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest32 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = decryptionMaterialsRequest32.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(keyBlobArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest32);
        org.junit.Assert.assertNull(strMap33);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder11.setAlgorithm(cryptoAlgorithm13);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder15.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder15.setAlgorithm(cryptoAlgorithm20);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder15.build();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder15.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest26 = builder25.build();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = decryptionMaterialsRequest26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = decryptionMaterialsRequest26.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder28.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray30 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31, keyBlobArray30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest35 = builder34.build();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = decryptionMaterialsRequest35.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = decryptionMaterialsRequest35.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = builder37.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray39 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList40 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40, keyBlobArray39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder37.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList43 = builder42.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder33.setEncryptedDataKeys(keyBlobList43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder15.setEncryptedDataKeys(keyBlobList43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder14.setEncryptedDataKeys(keyBlobList43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest47 = builder14.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(keyBlobList29);
        org.junit.Assert.assertNotNull(keyBlobArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest35);
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(keyBlobList38);
        org.junit.Assert.assertNotNull(keyBlobArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(keyBlobList43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest47);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setEncryptionContext(strMap8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest1.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptionContext(strMap9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        java.lang.Class<?> wildcardClass5 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder12.build();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = decryptionMaterialsRequest13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = decryptionMaterialsRequest13.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray17 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18, keyBlobArray17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder21.build();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = decryptionMaterialsRequest22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest22.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder24.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray26 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList27 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27, keyBlobArray26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder24.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder29.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest31 = builder29.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray32 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList33 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33, keyBlobArray32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder29.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(keyBlobList16);
        org.junit.Assert.assertNotNull(keyBlobArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(keyBlobArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest31);
        org.junit.Assert.assertNotNull(keyBlobArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder8.build();
        java.lang.Class<?> wildcardClass13 = decryptionMaterialsRequest12.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder14.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = decryptionMaterialsRequest15.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNotNull(keyBlobList16);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder7.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest2 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = decryptionMaterialsRequest2.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest2.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest2.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest7.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder15.build();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = decryptionMaterialsRequest16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = decryptionMaterialsRequest16.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder18.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = builder23.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder14.setEncryptedDataKeys(keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder5.setEncryptedDataKeys(keyBlobList24);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest29 = builder28.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(keyBlobList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest29);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder5.build();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = builder16.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder16.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder16.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass20 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(cryptoAlgorithm17);
        org.junit.Assert.assertNotNull(keyBlobList18);
        org.junit.Assert.assertNotNull(keyBlobList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder0.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray13 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList14, keyBlobArray13);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList14);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder8.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder7.setEncryptedDataKeys(keyBlobList19);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNotNull(keyBlobArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(keyBlobList19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder8.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(keyBlobList13);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder5.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest9.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(keyBlobList10);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder0.setAlgorithm(cryptoAlgorithm12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest1.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder5.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder8.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder8.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder18.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray25 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26, keyBlobArray25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = builder31.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder31.setEncryptionContext(strMap33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(keyBlobArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(strMap32);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = cryptoAlgorithm4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass13 = keyBlobList12.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(keyBlobList25);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder17.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        java.lang.Class<?> wildcardClass8 = decryptionMaterialsRequest5.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest1.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        java.lang.Class<?> wildcardClass9 = decryptionMaterialsRequest3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest1.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder3.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder20.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray23 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24, keyBlobArray23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder20.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(strMap22);
        org.junit.Assert.assertNotNull(keyBlobArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder0.setAlgorithm(cryptoAlgorithm12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = builder13.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray12 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13, keyBlobArray12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder15.setEncryptionContext(strMap16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder0.setAlgorithm(cryptoAlgorithm6);
        java.lang.Class<?> wildcardClass8 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder0.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass11 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest7.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder15.build();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = decryptionMaterialsRequest16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = decryptionMaterialsRequest16.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder18.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = builder23.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder14.setEncryptedDataKeys(keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder5.setEncryptedDataKeys(keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest27 = builder5.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(keyBlobList24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest27);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder3.getAlgorithm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = cryptoAlgorithm9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder7.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder7.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder0.setAlgorithm(cryptoAlgorithm9);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder5.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder13.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder13.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm23 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder22.setAlgorithm(cryptoAlgorithm23);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setEncryptedDataKeys(keyBlobList25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder5.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setAlgorithm(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(keyBlobList7);
        org.junit.Assert.assertNotNull(keyBlobList8);
        org.junit.Assert.assertNotNull(keyBlobList9);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder8.build();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        java.lang.Class<?> wildcardClass5 = decryptionMaterialsRequest1.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder14.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder14.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        java.lang.Class<?> wildcardClass3 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder6.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder11.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder11.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder17.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder19.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray22 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23, keyBlobArray22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNotNull(keyBlobArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = builder4.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = builder25.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder0.setEncryptedDataKeys(keyBlobList26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(keyBlobList26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder4.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder9.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder9.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder9.setAlgorithm(cryptoAlgorithm16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder18.build();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = decryptionMaterialsRequest19.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = decryptionMaterialsRequest19.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray23 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24, keyBlobArray23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder21.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest28 = builder26.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray29 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30, keyBlobArray29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList37 = builder35.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest38 = builder35.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = decryptionMaterialsRequest38.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm40 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder39.setAlgorithm(cryptoAlgorithm40);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm42 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = builder41.setAlgorithm(cryptoAlgorithm42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder41.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = builder45.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList47 = builder45.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest48 = builder45.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm49 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder45.setAlgorithm(cryptoAlgorithm49);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest52 = builder51.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder53 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = builder53.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder53.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray56 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList57 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57, keyBlobArray56);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder59 = builder53.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder60 = builder51.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder61 = builder45.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = builder41.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder63 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList57);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList64 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList65 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(keyBlobArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest28);
        org.junit.Assert.assertNotNull(keyBlobArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertNull(keyBlobList37);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(strMap46);
        org.junit.Assert.assertNull(keyBlobList47);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(strMap54);
        org.junit.Assert.assertNull(strMap55);
        org.junit.Assert.assertNotNull(keyBlobArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(keyBlobList64);
        org.junit.Assert.assertNotNull(keyBlobList65);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder10.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = decryptionMaterialsRequest11.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(keyBlobList12);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.lang.Class<?> wildcardClass6 = decryptionMaterialsRequest5.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder17.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder8.setEncryptionContext(strMap26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strMap25);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(keyBlobList8);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder14.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest7.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder9.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder9.setAlgorithm(cryptoAlgorithm12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = builder9.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = decryptionMaterialsRequest17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = decryptionMaterialsRequest17.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
        org.junit.Assert.assertNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(keyBlobList20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest2 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = decryptionMaterialsRequest2.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest2.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest2.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setAlgorithm(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder5.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest5.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.lang.Class<?> wildcardClass8 = decryptionMaterialsRequest7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder6.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass21 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(keyBlobList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest28 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest28);
        org.junit.Assert.assertNotNull(keyBlobList29);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(keyBlobList11);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = cryptoAlgorithm4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder4.setEncryptionContext(strMap7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder8.build();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = decryptionMaterialsRequest12.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(strMap13);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder7.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder7.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder7.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder17.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = builder8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(cryptoAlgorithm25);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = decryptionMaterialsRequest17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = decryptionMaterialsRequest17.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest26 = builder25.build();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = decryptionMaterialsRequest26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = decryptionMaterialsRequest26.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder28.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray30 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31, keyBlobArray30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = builder33.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder24.setEncryptedDataKeys(keyBlobList34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder6.setEncryptedDataKeys(keyBlobList34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = builder5.setEncryptedDataKeys(keyBlobList34);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(keyBlobList20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(keyBlobList29);
        org.junit.Assert.assertNotNull(keyBlobArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(keyBlobList34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest3.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest1.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder0.getEncryptionContext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = strMap6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest7.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(keyBlobList9);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder8.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest9.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setAlgorithm(cryptoAlgorithm11);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder15.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder15.setAlgorithm(cryptoAlgorithm20);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder15.setAlgorithm(cryptoAlgorithm22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest25 = builder24.build();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = decryptionMaterialsRequest25.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = decryptionMaterialsRequest25.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder27.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray29 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30, keyBlobArray29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder27.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList30);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest34 = builder32.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder32.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest42 = builder41.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(keyBlobArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strMap33);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest42);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.lang.Class<?> wildcardClass6 = decryptionMaterialsRequest3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder8.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = decryptionMaterialsRequest12.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setEncryptionContext(strMap15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest7.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setEncryptionContext(strMap6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest7.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder8.setAlgorithm(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder17.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest25 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest25);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest5.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.lang.Class<?> wildcardClass10 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder5.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = builder6.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(cryptoAlgorithm28);
        org.junit.Assert.assertNotNull(keyBlobList29);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder4.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder4.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = builder16.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder16.setEncryptionContext(strMap18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(cryptoAlgorithm17);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder3.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = builder3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder0.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(keyBlobList10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder10.setAlgorithm(cryptoAlgorithm12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder13.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder13.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder16.build();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = decryptionMaterialsRequest17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = decryptionMaterialsRequest17.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder19.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder19.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder19.setAlgorithm(cryptoAlgorithm22);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm24 = builder19.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest27 = builder26.build();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = decryptionMaterialsRequest27.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = decryptionMaterialsRequest27.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = builder29.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray31 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32, keyBlobArray31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder29.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = builder35.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = builder13.setEncryptedDataKeys(keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder0.setEncryptedDataKeys(keyBlobList36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(keyBlobList20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(cryptoAlgorithm24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest27);
        org.junit.Assert.assertNull(strMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(keyBlobList30);
        org.junit.Assert.assertNotNull(keyBlobArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(keyBlobList36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNull(keyBlobList4);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest1.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm49 = builder48.getAlgorithm();
        java.lang.Class<?> wildcardClass50 = builder48.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(cryptoAlgorithm49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        java.lang.Class<?> wildcardClass9 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setAlgorithm(cryptoAlgorithm8);
        java.lang.Class<?> wildcardClass10 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder10.build();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = decryptionMaterialsRequest11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = decryptionMaterialsRequest11.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder13.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray15 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList16, keyBlobArray15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder13.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList16);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder18.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray21 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22, keyBlobArray21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest25 = builder18.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest27 = builder26.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder28.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray31 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32, keyBlobArray31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = builder36.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm39 = builder36.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = builder40.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray43 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList44 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44, keyBlobArray43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder40.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList49 = builder48.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder18.setEncryptedDataKeys(keyBlobList49);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = builder8.setEncryptedDataKeys(keyBlobList49);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(keyBlobList14);
        org.junit.Assert.assertNotNull(keyBlobArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNotNull(keyBlobArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNotNull(keyBlobArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertNull(strMap38);
        org.junit.Assert.assertNull(cryptoAlgorithm39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strMap41);
        org.junit.Assert.assertNull(strMap42);
        org.junit.Assert.assertNotNull(keyBlobArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(keyBlobList49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder12.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder12.setAlgorithm(cryptoAlgorithm17);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder18.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest24 = builder21.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm26 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder21.setAlgorithm(cryptoAlgorithm26);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder21.setAlgorithm(cryptoAlgorithm28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest31 = builder30.build();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = decryptionMaterialsRequest31.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = decryptionMaterialsRequest31.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = builder33.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder33.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest40 = builder38.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder29.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList49 = builder47.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest50 = builder47.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = decryptionMaterialsRequest50.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm52 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder53 = builder51.setAlgorithm(cryptoAlgorithm52);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm54 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder55 = builder53.setAlgorithm(cryptoAlgorithm54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder53.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder57 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = builder57.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList59 = builder57.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest60 = builder57.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm61 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = builder57.setAlgorithm(cryptoAlgorithm61);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder63 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest64 = builder63.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder65 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = builder65.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder65.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray68 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList69 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69, keyBlobArray68);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder71 = builder65.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder72 = builder63.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder73 = builder57.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder74 = builder53.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder75 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder76 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder77 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest78 = builder77.build();
        java.util.Map<java.lang.String, java.lang.String> strMap79 = decryptionMaterialsRequest78.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder80 = decryptionMaterialsRequest78.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList81 = builder80.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray82 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList83 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList83, keyBlobArray82);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder85 = builder80.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList83);
        java.util.Map<java.lang.String, java.lang.String> strMap86 = builder85.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest87 = builder85.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder88 = decryptionMaterialsRequest87.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList89 = builder88.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder90 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest91 = builder90.build();
        java.util.Map<java.lang.String, java.lang.String> strMap92 = decryptionMaterialsRequest91.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder93 = decryptionMaterialsRequest91.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList94 = builder93.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray95 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList96 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList96, keyBlobArray95);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder98 = builder93.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList96);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder99 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest100 = builder99.build();
        java.util.Map<java.lang.String, java.lang.String> strMap101 = decryptionMaterialsRequest100.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder102 = decryptionMaterialsRequest100.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList103 = builder102.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray104 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList105 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean106 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList105, keyBlobArray104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder107 = builder102.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList105);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList108 = builder107.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder109 = builder98.setEncryptedDataKeys(keyBlobList108);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder110 = builder88.setEncryptedDataKeys(keyBlobList108);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder111 = builder76.setEncryptedDataKeys(keyBlobList108);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(keyBlobList14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNull(keyBlobList16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strMap22);
        org.junit.Assert.assertNull(keyBlobList23);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest31);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(keyBlobList34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(strMap48);
        org.junit.Assert.assertNull(keyBlobList49);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(strMap58);
        org.junit.Assert.assertNull(keyBlobList59);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(strMap66);
        org.junit.Assert.assertNull(strMap67);
        org.junit.Assert.assertNotNull(keyBlobArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest78);
        org.junit.Assert.assertNull(strMap79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(keyBlobList81);
        org.junit.Assert.assertNotNull(keyBlobArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(strMap86);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(keyBlobList89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest91);
        org.junit.Assert.assertNull(strMap92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(keyBlobList94);
        org.junit.Assert.assertNotNull(keyBlobArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest100);
        org.junit.Assert.assertNull(strMap101);
        org.junit.Assert.assertNotNull(builder102);
        org.junit.Assert.assertNull(keyBlobList103);
        org.junit.Assert.assertNotNull(keyBlobArray104);
        org.junit.Assert.assertTrue("'" + boolean106 + "' != '" + false + "'", boolean106 == false);
        org.junit.Assert.assertNotNull(builder107);
        org.junit.Assert.assertNotNull(keyBlobList108);
        org.junit.Assert.assertNotNull(builder109);
        org.junit.Assert.assertNotNull(builder110);
        org.junit.Assert.assertNotNull(builder111);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder11.setEncryptionContext(strMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder7.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = builder14.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest17 = builder14.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder14.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm19 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder14.setAlgorithm(cryptoAlgorithm19);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder20.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder20.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder23.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest26 = builder23.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList27 = builder23.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder23.setAlgorithm(cryptoAlgorithm28);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm30 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder23.setAlgorithm(cryptoAlgorithm30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder32.build();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = decryptionMaterialsRequest33.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = decryptionMaterialsRequest33.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = builder35.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray37 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38, keyBlobArray37);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder35.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList38);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest42 = builder40.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray43 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList44 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44, keyBlobArray43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder40.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder31.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder20.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder49 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList44);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder52 = builder0.setEncryptionContext(strMap51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(keyBlobList16);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest17);
        org.junit.Assert.assertNull(keyBlobList18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNull(strMap22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest26);
        org.junit.Assert.assertNull(keyBlobList27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNull(strMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(keyBlobList36);
        org.junit.Assert.assertNotNull(keyBlobArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strMap41);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest42);
        org.junit.Assert.assertNotNull(keyBlobArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.lang.Class<?> wildcardClass7 = builder4.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest8.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass10 = decryptionMaterialsRequest8.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        java.lang.Class<?> wildcardClass9 = decryptionMaterialsRequest7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder8.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder8.setAlgorithm(cryptoAlgorithm16);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest48 = builder26.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList49 = decryptionMaterialsRequest48.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder8.setEncryptedDataKeys(keyBlobList49);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest48);
        org.junit.Assert.assertNotNull(keyBlobList49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder14.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder14.build();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = decryptionMaterialsRequest16.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(strMap17);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder17.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setAlgorithm(cryptoAlgorithm22);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = builder23.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder23.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest29 = builder26.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm31 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder26.setAlgorithm(cryptoAlgorithm31);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm33 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder26.setAlgorithm(cryptoAlgorithm33);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest36 = builder35.build();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = decryptionMaterialsRequest36.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = decryptionMaterialsRequest36.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList39 = builder38.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray40 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList41 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList41, keyBlobArray40);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList41);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest45 = builder43.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray46 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList47 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47, keyBlobArray46);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder49 = builder43.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder34.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder52 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = builder52.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList54 = builder52.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest55 = builder52.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder56 = decryptionMaterialsRequest55.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm57 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder58 = builder56.setAlgorithm(cryptoAlgorithm57);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm59 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder60 = builder58.setAlgorithm(cryptoAlgorithm59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder58.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList64 = builder62.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest65 = builder62.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm66 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder67 = builder62.setAlgorithm(cryptoAlgorithm66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder68 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest69 = builder68.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder70 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = builder70.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder70.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray73 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList74 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74, keyBlobArray73);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder76 = builder70.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder77 = builder68.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder78 = builder62.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder79 = builder58.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder80 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder81 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder82 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList84 = builder82.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest85 = builder82.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder86 = decryptionMaterialsRequest85.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm87 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder88 = builder86.setAlgorithm(cryptoAlgorithm87);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm89 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder90 = builder88.setAlgorithm(cryptoAlgorithm89);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = builder88.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder92 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList94 = builder92.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest95 = builder92.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm96 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder97 = builder92.setAlgorithm(cryptoAlgorithm96);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder98 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest99 = builder98.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder100 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap101 = builder100.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap102 = builder100.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray103 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList104 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean105 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104, keyBlobArray103);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder106 = builder100.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder107 = builder98.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder108 = builder92.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder109 = builder88.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest110 = builder88.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList111 = decryptionMaterialsRequest110.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder112 = builder81.setEncryptedDataKeys(keyBlobList111);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm113 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder114 = builder81.setAlgorithm(cryptoAlgorithm113);
        java.util.Map<java.lang.String, java.lang.String> strMap115 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder116 = builder114.setEncryptionContext(strMap115);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(keyBlobList24);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest29);
        org.junit.Assert.assertNull(keyBlobList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest36);
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(keyBlobList39);
        org.junit.Assert.assertNotNull(keyBlobArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest45);
        org.junit.Assert.assertNotNull(keyBlobArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strMap53);
        org.junit.Assert.assertNull(keyBlobList54);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNull(keyBlobList64);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(strMap71);
        org.junit.Assert.assertNull(strMap72);
        org.junit.Assert.assertNotNull(keyBlobArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(strMap83);
        org.junit.Assert.assertNull(keyBlobList84);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(strMap91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(strMap93);
        org.junit.Assert.assertNull(keyBlobList94);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest99);
        org.junit.Assert.assertNotNull(builder100);
        org.junit.Assert.assertNull(strMap101);
        org.junit.Assert.assertNull(strMap102);
        org.junit.Assert.assertNotNull(keyBlobArray103);
        org.junit.Assert.assertTrue("'" + boolean105 + "' != '" + false + "'", boolean105 == false);
        org.junit.Assert.assertNotNull(builder106);
        org.junit.Assert.assertNotNull(builder107);
        org.junit.Assert.assertNotNull(builder108);
        org.junit.Assert.assertNotNull(builder109);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest110);
        org.junit.Assert.assertNotNull(keyBlobList111);
        org.junit.Assert.assertNotNull(builder112);
        org.junit.Assert.assertNotNull(builder114);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = builder5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(keyBlobList6);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder8.setEncryptedDataKeys(keyBlobList18);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder19.setEncryptionContext(strMap20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(keyBlobList18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest6.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest6.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        java.lang.Class<?> wildcardClass3 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder7.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder7.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = decryptionMaterialsRequest12.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = decryptionMaterialsRequest12.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = builder14.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray16 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17, keyBlobArray16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList17);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest21 = builder19.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = decryptionMaterialsRequest21.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder22.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm24 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder22.setAlgorithm(cryptoAlgorithm24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest29 = builder26.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm31 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder26.setAlgorithm(cryptoAlgorithm31);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList33 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest34 = builder26.build();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = decryptionMaterialsRequest37.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = decryptionMaterialsRequest37.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList40 = builder39.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder39.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest46 = builder45.build();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = decryptionMaterialsRequest46.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = decryptionMaterialsRequest46.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList49 = builder48.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray50 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList51 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList51, keyBlobArray50);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder53 = builder48.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList51);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList54 = builder53.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder55 = builder44.setEncryptedDataKeys(keyBlobList54);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder56 = builder26.setEncryptedDataKeys(keyBlobList54);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder57 = builder25.setEncryptedDataKeys(keyBlobList54);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder58 = builder10.setEncryptedDataKeys(keyBlobList54);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(keyBlobList15);
        org.junit.Assert.assertNotNull(keyBlobArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(keyBlobList23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest29);
        org.junit.Assert.assertNull(keyBlobList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(keyBlobList33);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest34);
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNull(strMap38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(keyBlobList40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest46);
        org.junit.Assert.assertNull(strMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(keyBlobList49);
        org.junit.Assert.assertNotNull(keyBlobArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(keyBlobList54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder10.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = builder14.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder14.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray17 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18, keyBlobArray17);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList18);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder6.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(keyBlobArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(keyBlobList23);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder9.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder9.setAlgorithm(cryptoAlgorithm11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest9 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest9);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm1 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest2 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest2.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(cryptoAlgorithm1);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder12.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder12.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = builder12.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder17.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder17.setAlgorithm(cryptoAlgorithm21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest24 = builder23.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder25.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray28 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29, keyBlobArray28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder25.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList35 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder0.setEncryptedDataKeys(keyBlobList35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNull(cryptoAlgorithm16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(keyBlobArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(keyBlobList35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder7.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = decryptionMaterialsRequest8.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest8.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder11.setAlgorithm(cryptoAlgorithm13);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder15.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder15.setAlgorithm(cryptoAlgorithm20);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder15.build();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder15.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest26 = builder25.build();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = decryptionMaterialsRequest26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = decryptionMaterialsRequest26.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder28.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray30 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31, keyBlobArray30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest35 = builder34.build();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = decryptionMaterialsRequest35.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder37 = decryptionMaterialsRequest35.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = builder37.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray39 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList40 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40, keyBlobArray39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder37.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList43 = builder42.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder33.setEncryptedDataKeys(keyBlobList43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder15.setEncryptedDataKeys(keyBlobList43);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder14.setEncryptedDataKeys(keyBlobList43);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList47 = builder46.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(keyBlobList29);
        org.junit.Assert.assertNotNull(keyBlobArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest35);
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(keyBlobList38);
        org.junit.Assert.assertNotNull(keyBlobArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(keyBlobList43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(keyBlobList47);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder9.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder9.setAlgorithm(cryptoAlgorithm13);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder15.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder17.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray20 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21, keyBlobArray20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList21);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm26 = builder25.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList27 = builder25.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder25.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder8.setEncryptedDataKeys(keyBlobList28);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm30 = builder29.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNotNull(keyBlobArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(cryptoAlgorithm26);
        org.junit.Assert.assertNotNull(keyBlobList27);
        org.junit.Assert.assertNotNull(keyBlobList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(cryptoAlgorithm30);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = decryptionMaterialsRequest5.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = decryptionMaterialsRequest5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder7.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder11.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray14 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15, keyBlobArray14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder11.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder7.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder20.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest23.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder24.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm27 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder26.setAlgorithm(cryptoAlgorithm27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder30.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm34 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setAlgorithm(cryptoAlgorithm34);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder36.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm49 = builder48.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm50 = builder48.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNotNull(keyBlobArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(cryptoAlgorithm49);
        org.junit.Assert.assertNull(cryptoAlgorithm50);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = decryptionMaterialsRequest5.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList3 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(keyBlobList3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest15 = builder12.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = builder12.setAlgorithm(cryptoAlgorithm17);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder18.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder21.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest24 = builder21.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm26 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder21.setAlgorithm(cryptoAlgorithm26);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder21.setAlgorithm(cryptoAlgorithm28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest31 = builder30.build();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = decryptionMaterialsRequest31.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = decryptionMaterialsRequest31.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = builder33.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder33.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest40 = builder38.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray41 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList42 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42, keyBlobArray41);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder29.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList42);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder47 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder47.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList49 = builder47.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest50 = builder47.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = decryptionMaterialsRequest50.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm52 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder53 = builder51.setAlgorithm(cryptoAlgorithm52);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm54 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder55 = builder53.setAlgorithm(cryptoAlgorithm54);
        java.util.Map<java.lang.String, java.lang.String> strMap56 = builder53.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder57 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = builder57.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList59 = builder57.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest60 = builder57.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm61 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = builder57.setAlgorithm(cryptoAlgorithm61);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder63 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest64 = builder63.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder65 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = builder65.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder65.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray68 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList69 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69, keyBlobArray68);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder71 = builder65.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder72 = builder63.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder73 = builder57.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder74 = builder53.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder75 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder76 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList69);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm77 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder78 = builder8.setAlgorithm(cryptoAlgorithm77);
        java.util.Map<java.lang.String, java.lang.String> strMap79 = builder78.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(keyBlobList14);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest15);
        org.junit.Assert.assertNull(keyBlobList16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(strMap22);
        org.junit.Assert.assertNull(keyBlobList23);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest31);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(keyBlobList34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(strMap39);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest40);
        org.junit.Assert.assertNotNull(keyBlobArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(strMap48);
        org.junit.Assert.assertNull(keyBlobList49);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(strMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(strMap58);
        org.junit.Assert.assertNull(keyBlobList59);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(strMap66);
        org.junit.Assert.assertNull(strMap67);
        org.junit.Assert.assertNotNull(keyBlobArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(strMap79);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest6.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = decryptionMaterialsRequest6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder6.setEncryptionContext(strMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder4.build();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = decryptionMaterialsRequest7.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest7.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.lang.Class<?> wildcardClass5 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest10.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder11.setAlgorithm(cryptoAlgorithm13);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder14.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList18 = builder16.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder16.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm20 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = builder16.setAlgorithm(cryptoAlgorithm20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest23 = builder22.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder24.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder24.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray27 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28, keyBlobArray27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder24.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList28);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm33 = builder32.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = builder32.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList35 = builder32.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder14.setEncryptedDataKeys(keyBlobList35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(keyBlobList18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNotNull(keyBlobArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(cryptoAlgorithm33);
        org.junit.Assert.assertNotNull(keyBlobList34);
        org.junit.Assert.assertNotNull(keyBlobList35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = decryptionMaterialsRequest5.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest5.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = builder10.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder10.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = builder10.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder15.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm19 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder15.setAlgorithm(cryptoAlgorithm19);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder21 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder21.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder23.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder23.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray26 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList27 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27, keyBlobArray26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder21.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder9.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList27);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNotNull(keyBlobArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest5.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(strMap7);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder11.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder11.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder11.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = decryptionMaterialsRequest14.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = builder15.setAlgorithm(cryptoAlgorithm16);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder18.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = builder18.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = builder22.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray25 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26, keyBlobArray25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = builder22.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder29 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList26);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder6.setEncryptedDataKeys(keyBlobList31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest33 = builder32.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = builder34.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = builder34.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder34.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = builder34.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm39 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder34.setAlgorithm(cryptoAlgorithm39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = builder40.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest42 = builder40.build();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = builder40.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder46 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = builder46.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = builder46.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm49 = builder46.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = builder50.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = builder50.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray53 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList54 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList54, keyBlobArray53);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder56 = builder50.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList54);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder57 = builder46.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList54);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder58 = builder44.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList54);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList59 = builder44.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder60 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder60.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = builder62.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm65 = builder62.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder66 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = builder66.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = builder66.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray69 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList70 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70, keyBlobArray69);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder72 = builder66.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder73 = builder62.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder74 = builder60.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder75 = builder44.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder76 = builder40.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder77 = builder32.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList70);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder78 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest79 = builder78.build();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = decryptionMaterialsRequest79.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder81 = decryptionMaterialsRequest79.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList82 = builder81.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder81.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm84 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder85 = builder81.setAlgorithm(cryptoAlgorithm84);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm86 = builder81.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList87 = builder81.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder88 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest89 = builder88.build();
        java.util.Map<java.lang.String, java.lang.String> strMap90 = decryptionMaterialsRequest89.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder91 = decryptionMaterialsRequest89.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList92 = builder91.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray93 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList94 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList94, keyBlobArray93);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder96 = builder91.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList94);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder97 = builder81.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList94);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder98 = builder77.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList94);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm99 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder100 = builder98.setAlgorithm(cryptoAlgorithm99);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(cryptoAlgorithm21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(strMap23);
        org.junit.Assert.assertNull(strMap24);
        org.junit.Assert.assertNotNull(keyBlobArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(keyBlobList31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertNull(keyBlobList36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNull(keyBlobList38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(strMap41);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest42);
        org.junit.Assert.assertNull(strMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(strMap47);
        org.junit.Assert.assertNull(strMap48);
        org.junit.Assert.assertNull(cryptoAlgorithm49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(strMap51);
        org.junit.Assert.assertNull(strMap52);
        org.junit.Assert.assertNotNull(keyBlobArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(keyBlobList59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNull(strMap64);
        org.junit.Assert.assertNull(cryptoAlgorithm65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(strMap67);
        org.junit.Assert.assertNull(strMap68);
        org.junit.Assert.assertNotNull(keyBlobArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest79);
        org.junit.Assert.assertNull(strMap80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(keyBlobList82);
        org.junit.Assert.assertNull(strMap83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(cryptoAlgorithm86);
        org.junit.Assert.assertNull(keyBlobList87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest89);
        org.junit.Assert.assertNull(strMap90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNull(keyBlobList92);
        org.junit.Assert.assertNotNull(keyBlobArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder100);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder0.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(keyBlobList17);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder15.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder15.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm18 = builder15.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm19 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = builder15.setAlgorithm(cryptoAlgorithm19);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest21 = builder15.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = decryptionMaterialsRequest21.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = decryptionMaterialsRequest21.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = decryptionMaterialsRequest21.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder24.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest27 = builder26.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder28.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray31 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32, keyBlobArray31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList32);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder26.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList37 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder24.setEncryptedDataKeys(keyBlobList37);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = builder0.setEncryptedDataKeys(keyBlobList37);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest40 = builder39.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNull(cryptoAlgorithm18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest21);
        org.junit.Assert.assertNull(cryptoAlgorithm22);
        org.junit.Assert.assertNull(keyBlobList23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(keyBlobList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNotNull(keyBlobArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertNotNull(keyBlobList37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest40);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder6.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder6.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = decryptionMaterialsRequest11.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm2 = builder0.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(cryptoAlgorithm2);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder8.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = decryptionMaterialsRequest11.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNull(keyBlobList10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = builder12.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder12.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder16.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray19 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList20, keyBlobArray19);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList20);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList20);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList25 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder28.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = builder28.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm31 = builder28.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = builder32.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = builder32.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray35 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList36 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36, keyBlobArray35);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder32.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = builder28.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder10.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList36);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm43 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder6.setAlgorithm(cryptoAlgorithm43);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(keyBlobArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(keyBlobList25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNull(cryptoAlgorithm31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(strMap33);
        org.junit.Assert.assertNull(strMap34);
        org.junit.Assert.assertNotNull(keyBlobArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setAlgorithm(cryptoAlgorithm5);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest8.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = decryptionMaterialsRequest8.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(cryptoAlgorithm11);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = decryptionMaterialsRequest3.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.lang.Class<?> wildcardClass8 = decryptionMaterialsRequest3.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        java.lang.Class<?> wildcardClass9 = builder8.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder6.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder6.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder4.setAlgorithm(cryptoAlgorithm5);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = builder8.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder12.getAlgorithm();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder12.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm16 = builder12.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder17.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm21 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder22 = builder17.setAlgorithm(cryptoAlgorithm21);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest24 = builder23.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = builder25.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder25.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray28 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29, keyBlobArray28);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder25.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder12.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList29);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList35 = builder12.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder11.setEncryptedDataKeys(keyBlobList35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = builder36.setEncryptionContext(strMap37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNull(cryptoAlgorithm16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(strMap26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNotNull(keyBlobArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(keyBlobList35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder10.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder10.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder10.setAlgorithm(cryptoAlgorithm14);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder10.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm17 = decryptionMaterialsRequest16.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = decryptionMaterialsRequest16.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder19.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm23 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder19.setAlgorithm(cryptoAlgorithm23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest26 = builder25.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder27.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = builder27.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray30 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31, keyBlobArray30);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder27.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder25.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList31);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm36 = builder35.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList37 = builder35.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList38 = builder35.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder39 = builder18.setEncryptedDataKeys(keyBlobList38);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder40 = builder8.setEncryptedDataKeys(keyBlobList38);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(cryptoAlgorithm17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strMap28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(keyBlobArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(cryptoAlgorithm36);
        org.junit.Assert.assertNotNull(keyBlobList37);
        org.junit.Assert.assertNotNull(keyBlobList38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = decryptionMaterialsRequest1.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = decryptionMaterialsRequest1.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest1.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest3.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm12 = decryptionMaterialsRequest3.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(cryptoAlgorithm12);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder4.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder4.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray7 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8, keyBlobArray7);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder4.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList8);
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray12 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13, keyBlobArray12);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList13);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = builder15.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder17.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder19.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray22 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23, keyBlobArray22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder19.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder17.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm28 = builder15.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(keyBlobArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(keyBlobArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNotNull(keyBlobArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(cryptoAlgorithm28);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder0.setAlgorithm(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder10.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList14 = builder10.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder10.setAlgorithm(cryptoAlgorithm15);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder16.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder16.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder19 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = builder19.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest22 = builder19.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = builder19.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm24 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder19.setAlgorithm(cryptoAlgorithm24);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm26 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder19.setAlgorithm(cryptoAlgorithm26);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder28 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest29 = builder28.build();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = decryptionMaterialsRequest29.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = decryptionMaterialsRequest29.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList32 = builder31.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray33 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList34 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList34, keyBlobArray33);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder36 = builder31.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList34);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = builder36.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest38 = builder36.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray39 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList40 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40, keyBlobArray39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder36.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = builder27.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = builder16.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder45 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList40);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList46 = builder45.getEncryptedDataKeys();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(keyBlobList12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNull(keyBlobList14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest22);
        org.junit.Assert.assertNull(keyBlobList23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(keyBlobList32);
        org.junit.Assert.assertNotNull(keyBlobArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest38);
        org.junit.Assert.assertNotNull(keyBlobArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(keyBlobList46);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder4.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = decryptionMaterialsRequest5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest5.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = builder3.setAlgorithm(cryptoAlgorithm6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList8 = builder7.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder7.setAlgorithm(cryptoAlgorithm9);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder7.setAlgorithm(cryptoAlgorithm11);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(keyBlobList8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder7 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder7.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder7.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = builder7.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder7.setAlgorithm(cryptoAlgorithm11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest13 = builder7.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = decryptionMaterialsRequest13.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList15 = decryptionMaterialsRequest13.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = decryptionMaterialsRequest13.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList17 = builder16.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest19 = builder18.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder20.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray23 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24, keyBlobArray23);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder20.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder18.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList24);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = builder18.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList29 = builder18.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = builder16.setEncryptedDataKeys(keyBlobList29);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder31 = builder0.setEncryptedDataKeys(keyBlobList29);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm32 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder33 = builder31.setAlgorithm(cryptoAlgorithm32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNull(cryptoAlgorithm10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest13);
        org.junit.Assert.assertNull(cryptoAlgorithm14);
        org.junit.Assert.assertNull(keyBlobList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(keyBlobList17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(strMap22);
        org.junit.Assert.assertNotNull(keyBlobArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(strMap28);
        org.junit.Assert.assertNotNull(keyBlobList29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm11 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder0.setAlgorithm(cryptoAlgorithm11);
        java.lang.Class<?> wildcardClass13 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(keyBlobList10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = decryptionMaterialsRequest3.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = decryptionMaterialsRequest3.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder10.setEncryptedDataKeys(keyBlobList11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNull(keyBlobList6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = builder6.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm9 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder10 = builder6.setAlgorithm(cryptoAlgorithm9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNull(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder5 = builder0.setAlgorithm(cryptoAlgorithm4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest6 = builder5.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder5.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder5.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = builder9.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList11 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder9.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList13 = builder9.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm14 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder15 = builder9.setAlgorithm(cryptoAlgorithm14);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList16 = builder15.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder15.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder18 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = builder18.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList20 = builder18.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest21 = builder18.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList22 = builder18.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm23 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder24 = builder18.setAlgorithm(cryptoAlgorithm23);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm25 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = builder18.setAlgorithm(cryptoAlgorithm25);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest28 = builder27.build();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = decryptionMaterialsRequest28.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder30 = decryptionMaterialsRequest28.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList31 = builder30.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray32 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList33 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33, keyBlobArray32);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = builder30.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList33);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = builder35.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest37 = builder35.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray38 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList39 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList39, keyBlobArray38);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder41 = builder35.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder42 = builder26.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList39);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder44 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = builder44.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList46 = builder44.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest47 = builder44.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder48 = decryptionMaterialsRequest47.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm49 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder48.setAlgorithm(cryptoAlgorithm49);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm51 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder52 = builder50.setAlgorithm(cryptoAlgorithm51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = builder50.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder54 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = builder54.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList56 = builder54.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest57 = builder54.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm58 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder59 = builder54.setAlgorithm(cryptoAlgorithm58);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder60 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest61 = builder60.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = builder62.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray65 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList66 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66, keyBlobArray65);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder68 = builder62.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder69 = builder60.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder70 = builder54.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder71 = builder50.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder72 = builder15.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder73 = builder5.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList66);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(cryptoAlgorithm3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(keyBlobList11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(keyBlobList13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(keyBlobList16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNull(keyBlobList20);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest21);
        org.junit.Assert.assertNull(keyBlobList22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest28);
        org.junit.Assert.assertNull(strMap29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(keyBlobList31);
        org.junit.Assert.assertNotNull(keyBlobArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(strMap36);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest37);
        org.junit.Assert.assertNotNull(keyBlobArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(strMap45);
        org.junit.Assert.assertNull(keyBlobList46);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strMap53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(strMap55);
        org.junit.Assert.assertNull(keyBlobList56);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNull(strMap64);
        org.junit.Assert.assertNotNull(keyBlobArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest7 = builder6.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder6.setAlgorithm(cryptoAlgorithm8);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder9.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest11 = builder9.build();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = decryptionMaterialsRequest11.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest5 = builder0.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest5.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder6.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest8 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest8);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray3 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4, keyBlobArray3);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList4);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = builder0.getAlgorithm();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setAlgorithm(cryptoAlgorithm8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder9.setEncryptionContext(strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(keyBlobArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(cryptoAlgorithm7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest4 = builder0.build();
        java.lang.Class<?> wildcardClass5 = decryptionMaterialsRequest4.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList2 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest3 = builder0.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm4 = decryptionMaterialsRequest3.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList5 = decryptionMaterialsRequest3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = decryptionMaterialsRequest3.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm7 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder6.setAlgorithm(cryptoAlgorithm7);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList9 = builder8.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm10 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder11 = builder8.setAlgorithm(cryptoAlgorithm10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest12 = builder11.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm13 = builder11.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest14 = builder11.build();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = decryptionMaterialsRequest14.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = decryptionMaterialsRequest14.toBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder17.build();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = decryptionMaterialsRequest18.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder20 = decryptionMaterialsRequest18.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder20.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray22 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList23 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23, keyBlobArray22);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder25 = builder20.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList23);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList26 = builder25.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder27 = builder16.setEncryptedDataKeys(keyBlobList26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(keyBlobList2);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest3);
        org.junit.Assert.assertNull(cryptoAlgorithm4);
        org.junit.Assert.assertNull(keyBlobList5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(keyBlobList9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest12);
        org.junit.Assert.assertNull(cryptoAlgorithm13);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest14);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(strMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(keyBlobArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(keyBlobList26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList4 = builder3.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray5 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList6 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6, keyBlobArray5);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder8 = builder3.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList6);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = builder8.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest10 = builder8.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray11 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList12 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12, keyBlobArray11);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder8.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList12);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = builder14.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest16 = builder14.build();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = builder14.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest18 = builder14.build();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = decryptionMaterialsRequest18.getEncryptionContext();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(keyBlobList4);
        org.junit.Assert.assertNotNull(keyBlobArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest10);
        org.junit.Assert.assertNotNull(keyBlobArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(cryptoAlgorithm15);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest18);
        org.junit.Assert.assertNull(strMap19);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm3 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder4 = builder0.setAlgorithm(cryptoAlgorithm3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm6 = builder0.getAlgorithm();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList7 = builder0.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm8 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder9 = builder0.setAlgorithm(cryptoAlgorithm8);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(cryptoAlgorithm6);
        org.junit.Assert.assertNull(keyBlobList7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest1 = builder0.build();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = decryptionMaterialsRequest1.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder3 = decryptionMaterialsRequest1.toBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder3.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = builder3.setAlgorithm(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder0 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = builder0.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder2 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap3 = builder2.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = builder2.getEncryptionContext();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm5 = builder2.getAlgorithm();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder6 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = builder6.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder6.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray9 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList10 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10, keyBlobArray9);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder12 = builder6.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder13 = builder2.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder14 = builder0.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList10);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm15 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder16 = builder14.setAlgorithm(cryptoAlgorithm15);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder17 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = builder17.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList19 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest20 = builder17.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList21 = builder17.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm22 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder23 = builder17.setAlgorithm(cryptoAlgorithm22);
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList24 = builder23.getEncryptedDataKeys();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = builder23.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder26 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = builder26.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList28 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest29 = builder26.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList30 = builder26.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm31 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder32 = builder26.setAlgorithm(cryptoAlgorithm31);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm33 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder34 = builder26.setAlgorithm(cryptoAlgorithm33);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder35 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest36 = builder35.build();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = decryptionMaterialsRequest36.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder38 = decryptionMaterialsRequest36.toBuilder();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList39 = builder38.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray40 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList41 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList41, keyBlobArray40);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder43 = builder38.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList41);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = builder43.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest45 = builder43.build();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray46 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList47 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47, keyBlobArray46);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder49 = builder43.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder50 = builder34.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder51 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList47);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder52 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = builder52.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList54 = builder52.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest55 = builder52.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder56 = decryptionMaterialsRequest55.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm57 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder58 = builder56.setAlgorithm(cryptoAlgorithm57);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm59 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder60 = builder58.setAlgorithm(cryptoAlgorithm59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = builder58.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder62 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = builder62.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList64 = builder62.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest65 = builder62.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm66 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder67 = builder62.setAlgorithm(cryptoAlgorithm66);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder68 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest69 = builder68.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder70 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = builder70.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap72 = builder70.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray73 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList74 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74, keyBlobArray73);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder76 = builder70.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder77 = builder68.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder78 = builder62.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder79 = builder58.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder80 = builder23.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder81 = builder14.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList74);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder82 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap83 = builder82.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList84 = builder82.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest85 = builder82.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder86 = decryptionMaterialsRequest85.toBuilder();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm87 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder88 = builder86.setAlgorithm(cryptoAlgorithm87);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm89 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder90 = builder88.setAlgorithm(cryptoAlgorithm89);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = builder88.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder92 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap93 = builder92.getEncryptionContext();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList94 = builder92.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest95 = builder92.build();
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm96 = null;
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder97 = builder92.setAlgorithm(cryptoAlgorithm96);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder98 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest99 = builder98.build();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder100 = com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.newBuilder();
        java.util.Map<java.lang.String, java.lang.String> strMap101 = builder100.getEncryptionContext();
        java.util.Map<java.lang.String, java.lang.String> strMap102 = builder100.getEncryptionContext();
        com.amazonaws.encryptionsdk.model.KeyBlob[] keyBlobArray103 = new com.amazonaws.encryptionsdk.model.KeyBlob[] {};
        java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList104 = new java.util.ArrayList<com.amazonaws.encryptionsdk.model.KeyBlob>();
        boolean boolean105 = java.util.Collections.addAll((java.util.Collection<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104, keyBlobArray103);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder106 = builder100.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder107 = builder98.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder108 = builder92.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder109 = builder88.setEncryptedDataKeys((java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob>) keyBlobList104);
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest decryptionMaterialsRequest110 = builder88.build();
        java.util.List<com.amazonaws.encryptionsdk.model.KeyBlob> keyBlobList111 = decryptionMaterialsRequest110.getEncryptedDataKeys();
        com.amazonaws.encryptionsdk.model.DecryptionMaterialsRequest.Builder builder112 = builder81.setEncryptedDataKeys(keyBlobList111);
        com.amazonaws.encryptionsdk.CryptoAlgorithm cryptoAlgorithm113 = builder81.getAlgorithm();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(cryptoAlgorithm5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(keyBlobArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNull(keyBlobList19);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest20);
        org.junit.Assert.assertNull(keyBlobList21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(keyBlobList24);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(strMap27);
        org.junit.Assert.assertNull(keyBlobList28);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest29);
        org.junit.Assert.assertNull(keyBlobList30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest36);
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(keyBlobList39);
        org.junit.Assert.assertNotNull(keyBlobArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(strMap44);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest45);
        org.junit.Assert.assertNotNull(keyBlobArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(strMap53);
        org.junit.Assert.assertNull(keyBlobList54);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNull(keyBlobList64);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(strMap71);
        org.junit.Assert.assertNull(strMap72);
        org.junit.Assert.assertNotNull(keyBlobArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(strMap83);
        org.junit.Assert.assertNull(keyBlobList84);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(strMap91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(strMap93);
        org.junit.Assert.assertNull(keyBlobList94);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest99);
        org.junit.Assert.assertNotNull(builder100);
        org.junit.Assert.assertNull(strMap101);
        org.junit.Assert.assertNull(strMap102);
        org.junit.Assert.assertNotNull(keyBlobArray103);
        org.junit.Assert.assertTrue("'" + boolean105 + "' != '" + false + "'", boolean105 == false);
        org.junit.Assert.assertNotNull(builder106);
        org.junit.Assert.assertNotNull(builder107);
        org.junit.Assert.assertNotNull(builder108);
        org.junit.Assert.assertNotNull(builder109);
        org.junit.Assert.assertNotNull(decryptionMaterialsRequest110);
        org.junit.Assert.assertNotNull(keyBlobList111);
        org.junit.Assert.assertNotNull(builder112);
        org.junit.Assert.assertNull(cryptoAlgorithm113);
    }
}

