/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 02:58:28 GMT 2024
 */

package org.traccar.protocol;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteOrder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.TruncatedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.junit.runner.RunWith;
import org.traccar.protocol.EelinkProtocol;
import org.traccar.protocol.EelinkProtocolDecoder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EelinkProtocolDecoder_ESTest extends EelinkProtocolDecoder_ESTest_scaffolding {

  @Test(timeout = 50)
  public void test0()  throws Throwable  {
      EelinkProtocol eelinkProtocol0 = new EelinkProtocol();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      EelinkProtocolDecoder eelinkProtocolDecoder0 = new EelinkProtocolDecoder(eelinkProtocol0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, 495);
      ChannelBuffer channelBuffer0 = dynamicChannelBuffer0.slice(20, 368);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(channelBuffer0, 2);
      try { 
        eelinkProtocolDecoder0.decode((Channel) null, mockInetSocketAddress0, truncatedChannelBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 2
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 50)
  public void test1()  throws Throwable  {
      EelinkProtocol eelinkProtocol0 = new EelinkProtocol();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      EelinkProtocolDecoder eelinkProtocolDecoder0 = new EelinkProtocolDecoder(eelinkProtocol0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(byteOrder0);
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, 31, directChannelBufferFactory0);
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(dynamicChannelBuffer0);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(duplicatedChannelBuffer0, 21);
      try { 
        eelinkProtocolDecoder0.decode((Channel) null, mockInetSocketAddress0, truncatedChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.BaseProtocolDecoder", e);
      }
  }

  @Test(timeout = 50)
  public void test2()  throws Throwable  {
      EelinkProtocol eelinkProtocol0 = new EelinkProtocol();
      EelinkProtocolDecoder eelinkProtocolDecoder0 = new EelinkProtocolDecoder(eelinkProtocol0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      try { 
        eelinkProtocolDecoder0.decode((Channel) null, mockInetSocketAddress0, eelinkProtocol0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.traccar.protocol.EelinkProtocol cannot be cast to org.jboss.netty.buffer.ChannelBuffer
         //
         verifyException("org.traccar.protocol.EelinkProtocolDecoder", e);
      }
  }
}
