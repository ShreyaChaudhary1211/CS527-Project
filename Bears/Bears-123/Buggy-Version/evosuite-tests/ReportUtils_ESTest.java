/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 01 03:13:24 GMT 2024
 */

package org.traccar.reports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import org.apache.xmlbeans.XmlSimpleList;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMNamespace;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.jxls.common.Context;
import org.traccar.model.Position;
import org.traccar.reports.ReportUtils;
import org.traccar.reports.model.TripReport;
import org.traccar.reports.model.TripsConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReportUtils_ESTest extends ReportUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Position position0 = new Position();
      LinkedList<Position> linkedList0 = new LinkedList<Position>();
      linkedList0.add(position0);
      TripsConfig tripsConfig0 = new TripsConfig();
      MockDate mockDate0 = new MockDate(404, 0, 404, (-1501), 0);
      position0.setFixTime(mockDate0);
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedList0, tripsConfig0, false, 20.0, class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Position position0 = new Position();
      LinkedList<Position> linkedList0 = new LinkedList<Position>();
      linkedList0.add(position0);
      TripsConfig tripsConfig0 = new TripsConfig();
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedList0, tripsConfig0, false, (-905.34621405), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.events.MotionEventHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Position position0 = new Position();
      LinkedList<Position> linkedList0 = new LinkedList<Position>();
      linkedList0.add(position0);
      TripsConfig tripsConfig0 = new TripsConfig();
      linkedList0.add(position0);
      linkedList0.add(position0);
      MockDate mockDate0 = new MockDate(201, 404, 404, 33, 201);
      tripsConfig0.setMinimalNoDataDuration(4194304L);
      position0.setFixTime(mockDate0);
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedList0, tripsConfig0, true, (double) 404, class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("9eqe", "");
      BeanElement beanElement0 = new BeanElement((String) null, dOMNamespace0, "9eqe");
      Class<TripReport> class0 = TripReport.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      TripsConfig tripsConfig0 = new TripsConfig((-1403.01320599), 98L, 98L, 98L, true);
      tripsConfig0.setMinimalNoDataDuration((-1763L));
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) beanAttributeList0, tripsConfig0, true, (-646.10164664263), class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to org.traccar.model.Position
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Position position0 = new Position();
      Long long0 = new Long((-4007));
      position0.set("driverUniqueId", long0);
      Position position1 = new Position();
      // Undeclared exception!
      try { 
        ReportUtils.findDriver(position0, position1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      XmlSimpleList xmlSimpleList0 = new XmlSimpleList(linkedList0);
      Collection<Long> collection0 = ReportUtils.getDeviceList(xmlSimpleList0, linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-2181L));
      linkedList0.offer(long0);
      // Undeclared exception!
      try { 
        ReportUtils.getDeviceList(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Position position0 = new Position();
      double double0 = ReportUtils.calculateDistance(position0, position0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("sos", "motion");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        ReportUtils.processTemplateWithSheets(mockFileInputStream0, (OutputStream) null, context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jxls.builder.xls.XlsCommentAreaBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getTimezone(6144L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.findDriver((Position) null, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.checkPeriodLimit((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.calculateFuel((Position) null, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance((Position) null, (Position) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Position position0 = new Position();
      position0.set("totalDistance", "Time period exceeds the limit");
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance(position0, position0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getDistanceUnit(4004L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Position position0 = new Position();
      LinkedList<Position> linkedList0 = new LinkedList<Position>();
      linkedList0.add(position0);
      TripsConfig tripsConfig0 = new TripsConfig();
      MockDate mockDate0 = new MockDate(404, (-2146412048), 0, 0, (-4014));
      position0.setFixTime(mockDate0);
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedList0, tripsConfig0, true, (-1101.4), class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, (TripsConfig) null, true, 850.7801952406634, class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = ReportUtils.findDriverName("Ay3");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ReportUtils.findDriverName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Long long0 = new Long((-1L));
      Position position0 = new Position();
      position0.set("driverUniqueId", long0);
      Position position1 = new Position();
      // Undeclared exception!
      try { 
        ReportUtils.findDriver(position1, position0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Position position0 = new Position();
      String string0 = ReportUtils.findDriver(position0, position0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Position position0 = new Position();
      Position position1 = new Position();
      Long long0 = new Long(2520L);
      position1.set("fuel", long0);
      double double0 = ReportUtils.calculateFuel(position1, position0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Position position0 = new Position();
      Long long0 = new Long(2520L);
      position0.set("fuel", long0);
      double double0 = ReportUtils.calculateFuel(position0, position0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Position position0 = new Position();
      double double0 = ReportUtils.calculateFuel(position0, position0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Position position0 = new Position();
      Short short0 = new Short((short) (-1));
      position0.set("totalDistance", short0);
      Position position1 = new Position();
      double double0 = ReportUtils.calculateDistance(position0, position1, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Position position0 = new Position();
      Short short0 = new Short((short) (-1));
      position0.set("totalDistance", short0);
      double double0 = ReportUtils.calculateDistance(position0, position0, false);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Position position0 = new Position();
      double double0 = ReportUtils.calculateDistance(position0, position0, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      // Undeclared exception!
      try { 
        ReportUtils.getDeviceList(beanAttributeList0, beanAttributeList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to java.lang.Long
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Position position0 = new Position();
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance(position0, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getSpeedUnit(255L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.initializeContext((-2246L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }
}
