/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 03 00:48:33 GMT 2024
 */

package org.traccar.reports;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import org.apache.xmlbeans.XmlSimpleList;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.jxls.common.Context;
import org.traccar.model.Position;
import org.traccar.reports.model.TripReport;
import org.traccar.reports.model.TripsConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteReportUtils_ESTest extends EvosuiteReportUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Position position0 = new Position();
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getOutdated());
      assertFalse(position0.getValid());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNotNull(position0);
      
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(position0));
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertFalse(position1.getOutdated());
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getId());
      assertFalse(position1.getValid());
      assertNotNull(position1);
      
      boolean boolean0 = linkedHashSet0.add(position1);
      assertFalse(position1.equals((Object)position0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(position1.getOutdated());
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getId());
      assertFalse(position1.getValid());
      assertTrue(linkedHashSet0.contains(position1));
      assertFalse(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      assertNotSame(position1, position0);
      
      boolean boolean1 = linkedHashSet0.add(position0);
      assertFalse(position0.equals((Object)position1));
      assertTrue(boolean1 == boolean0);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getOutdated());
      assertFalse(position0.getValid());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean1);
      assertNotSame(position0, position1);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertNotNull(tripsConfig0);
      
      MockDate mockDate0 = new MockDate((-2028178999), 2143735858, (-2028178999), 2143735858, 56812);
      assertNotNull(mockDate0);
      
      position0.setTime(mockDate0);
      assertFalse(position0.equals((Object)position1));
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getOutdated());
      assertFalse(position0.getValid());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals("Sat Dec 11 16:09:34 GMT 101214608", mockDate0.toString());
      assertNotSame(position0, position1);
      
      tripsConfig0.setMinimalNoDataDuration(5289L);
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertEquals(5289L, tripsConfig0.getMinimalNoDataDuration());
      
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (double) 5289L, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getAddress());
      assertNotNull(position0);
      
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(position0));
      
      boolean boolean0 = linkedHashSet0.add(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getAddress());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertNotNull(tripsConfig0);
      
      tripsConfig0.setMinimalNoDataDuration((-2721L));
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals((-2721L), tripsConfig0.getMinimalNoDataDuration());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (double) (-2721L), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.events.MotionEventHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNotNull(position0);
      
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(position0));
      
      boolean boolean0 = linkedHashSet0.add(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertNotNull(tripsConfig0);
      
      MockDate mockDate0 = new MockDate((-20), (-1361), (-20), 1, 0);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      position0.setTime(mockDate0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, false, (double) (-20), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNotNull(position0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      position0.set("driverUniqueId", boolean0);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0L, position1.getId());
      assertEquals(0L, position1.getDeviceId());
      assertNull(position1.getType());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertFalse(position1.getOutdated());
      assertNotNull(position1);
      
      // Undeclared exception!
      try { 
        ReportUtils.findDriver(position0, position1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNotNull(position0);
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertFalse(position1.getOutdated());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertNotNull(position1);
      
      double double0 = ReportUtils.calculateFuel(position1, position0);
      assertFalse(position0.equals((Object)position1));
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertFalse(position1.getOutdated());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(position0, position1);
      assertNotSame(position1, position0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Position position0 = new Position();
      assertFalse(position0.getOutdated());
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNotNull(position0);
      
      Long long0 = new Long(2948L);
      assertNotNull(long0);
      assertEquals(2948L, (long)long0);
      
      position0.set("totalDistance", long0);
      assertFalse(position0.getOutdated());
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      
      double double0 = ReportUtils.calculateDistance(position0, position0);
      assertFalse(position0.getOutdated());
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((byte)13);
      assertNotNull(long0);
      assertEquals(13L, (long)long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(long0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ReportUtils.getDeviceList(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNotNull(position0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      position0.set("totalDistance", double0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      
      double double1 = ReportUtils.calculateDistance(position0, position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNotNull(position0);
      
      position0.set("odometer", double0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertNull(position1.getAddress());
      assertFalse(position1.getOutdated());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertNotNull(position1);
      
      double double1 = ReportUtils.calculateDistance(position0, position1);
      assertFalse(position0.equals((Object)position1));
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertNull(position1.getAddress());
      assertFalse(position1.getOutdated());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertNotSame(position0, position1);
      assertNotSame(position1, position0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Position position0 = new Position();
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getType());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNotNull(position0);
      
      Double double0 = new Double(0.01);
      assertNotNull(double0);
      assertEquals(0.01, (double)double0, 0.01);
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertFalse(position1.getOutdated());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertNull(position1.getProtocol());
      assertEquals(0L, position1.getId());
      assertFalse(position1.getValid());
      assertNotNull(position1);
      
      position1.set("odometer", double0);
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertFalse(position1.getOutdated());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertNull(position1.getProtocol());
      assertEquals(0L, position1.getId());
      assertFalse(position1.getValid());
      assertNotSame(position1, position0);
      
      double double1 = ReportUtils.calculateDistance(position1, position0);
      assertFalse(position0.equals((Object)position1));
      assertFalse(position1.equals((Object)position0));
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getType());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertNull(position1.getAddress());
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertFalse(position1.getOutdated());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertNull(position1.getProtocol());
      assertEquals(0L, position1.getId());
      assertFalse(position1.getValid());
      assertEquals((-0.01), double1, 0.01);
      assertNotSame(position0, position1);
      assertNotSame(position1, position0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      // Undeclared exception!
      try { 
        ReportUtils.processTemplateWithSheets((InputStream) null, byteArrayOutputStream0, (Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jxls.builder.xls.XlsCommentAreaBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getTimezone((-337L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertNotNull(position0);
      
      BeanElement beanElement0 = new BeanElement("raw", position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertTrue(beanElement0.supportsParent());
      assertEquals(0, beanElement0.nodeCount());
      assertEquals(0, beanElement0.attributeCount());
      assertFalse(beanElement0.isReadOnly());
      assertEquals((short)1, beanElement0.getNodeType());
      assertEquals("Element", beanElement0.getNodeTypeName());
      assertNotNull(beanElement0);
      
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertTrue(beanElement0.supportsParent());
      assertEquals(0, beanElement0.nodeCount());
      assertEquals(0, beanElement0.attributeCount());
      assertFalse(beanElement0.isReadOnly());
      assertEquals((short)1, beanElement0.getNodeType());
      assertEquals("Element", beanElement0.getNodeTypeName());
      assertEquals(20, beanAttributeList0.size());
      assertNotNull(beanAttributeList0);
      
      // Undeclared exception!
      try { 
        ReportUtils.getDeviceList(beanAttributeList0, beanAttributeList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to java.lang.Long
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.findDriver((Position) null, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<TripReport> class0 = TripReport.class;
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      XmlSimpleList xmlSimpleList0 = new XmlSimpleList(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(xmlSimpleList0.isEmpty());
      assertEquals(2, xmlSimpleList0.size());
      assertNotNull(xmlSimpleList0);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertNotNull(tripsConfig0);
      
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) xmlSimpleList0, tripsConfig0, false, (-1378.351944511702), class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.traccar.model.Position
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.checkPeriodLimit((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.calculateFuel((Position) null, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance((Position) null, (Position) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance((Position) null, (Position) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertNotNull(position0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      position0.set("totalDistance", double0);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      
      Position position1 = new Position();
      assertFalse(position1.equals((Object)position0));
      assertNull(position1.getAddress());
      assertFalse(position1.getOutdated());
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertNotNull(position1);
      
      double double1 = ReportUtils.calculateDistance(position0, position1, false);
      assertFalse(position0.equals((Object)position1));
      assertFalse(position1.equals((Object)position0));
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertNull(position0.getAddress());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getProtocol());
      assertNull(position1.getAddress());
      assertFalse(position1.getOutdated());
      assertFalse(position1.getValid());
      assertEquals(0.0, position1.getSpeed(), 0.01);
      assertNull(position1.getType());
      assertEquals(0L, position1.getId());
      assertNull(position1.getProtocol());
      assertEquals(0.0, position1.getAccuracy(), 0.01);
      assertEquals(0L, position1.getDeviceId());
      assertEquals(0.0, position1.getLongitude(), 0.01);
      assertEquals(0.0, position1.getAltitude(), 0.01);
      assertEquals(0.0, position1.getLatitude(), 0.01);
      assertEquals(0.0, position1.getCourse(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(position0, position1);
      assertNotSame(position1, position0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNotNull(position0);
      
      position0.set("totalDistance", "web.url");
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertFalse(position0.getValid());
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getProtocol());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance(position0, position0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getId());
      assertNull(position0.getProtocol());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNotNull(position0);
      
      double double0 = ReportUtils.calculateDistance(position0, position0, true);
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getId());
      assertNull(position0.getProtocol());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getDistanceUnit((-984L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0L, position0.getId());
      assertFalse(position0.getValid());
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertNotNull(position0);
      
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(position0));
      
      boolean boolean0 = linkedHashSet0.add(position0);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0L, position0.getId());
      assertFalse(position0.getValid());
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertNotNull(tripsConfig0);
      
      MockDate mockDate0 = new MockDate((-20), (-20), (-20), 1, 1);
      assertNotNull(mockDate0);
      
      position0.setTime(mockDate0);
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0L, position0.getId());
      assertFalse(position0.getValid());
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals("Wed Apr 10 01:01:00 GMT 1878", mockDate0.toString());
      
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (double) 1, class0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertNotNull(collection0);
      assertTrue(linkedHashSet0.contains(position0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Class<TripReport> class0 = TripReport.class;
      Collection<TripReport> collection0 = ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, (TripsConfig) null, true, 1835.3727295175715, class0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Position position0 = new Position();
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertNotNull(position0);
      
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(position0));
      
      boolean boolean0 = linkedHashSet0.add(position0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      
      TripsConfig tripsConfig0 = new TripsConfig();
      assertEquals(0.0, tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(0L, tripsConfig0.getMinimalTripDuration());
      assertEquals(0L, tripsConfig0.getMinimalParkingDuration());
      assertFalse(tripsConfig0.getUseIgnition());
      assertEquals(0L, tripsConfig0.getMinimalNoDataDuration());
      assertNotNull(tripsConfig0);
      
      Integer integer0 = new Integer((-2145169548));
      assertNotNull(integer0);
      assertEquals((-2145169548), (int)integer0);
      
      position0.set("motion", integer0);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertNull(position0.getProtocol());
      assertFalse(position0.getOutdated());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNull(position0.getType());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertEquals(0L, position0.getId());
      assertEquals(0L, position0.getDeviceId());
      assertFalse(position0.getValid());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertNull(position0.getAddress());
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (double) (-2145169548), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.events.MotionEventHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      TripsConfig tripsConfig0 = new TripsConfig((-1.0), 3216L, 3216L, 3216L, true);
      assertEquals(3216L, tripsConfig0.getMinimalNoDataDuration());
      assertEquals(3216L, tripsConfig0.getMinimalTripDuration());
      assertEquals((-1.0), tripsConfig0.getMinimalTripDistance(), 0.01);
      assertEquals(3216L, tripsConfig0.getMinimalParkingDuration());
      assertTrue(tripsConfig0.getUseIgnition());
      assertNotNull(tripsConfig0);
      
      Position position0 = new Position();
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertNotNull(position0);
      
      boolean boolean0 = linkedHashSet0.add(position0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNull(position0.getProtocol());
      assertEquals(0.0, position0.getCourse(), 0.01);
      assertEquals(0.0, position0.getLatitude(), 0.01);
      assertEquals(0.0, position0.getAltitude(), 0.01);
      assertEquals(0.0, position0.getLongitude(), 0.01);
      assertFalse(position0.getOutdated());
      assertEquals(0L, position0.getDeviceId());
      assertEquals(0.0, position0.getAccuracy(), 0.01);
      assertNull(position0.getAddress());
      assertFalse(position0.getValid());
      assertEquals(0L, position0.getId());
      assertNull(position0.getType());
      assertEquals(0.0, position0.getSpeed(), 0.01);
      assertTrue(linkedHashSet0.contains(position0));
      assertTrue(boolean0);
      
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (-1.0), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.events.MotionEventHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Position position0 = new Position();
      LinkedHashSet<Position> linkedHashSet0 = new LinkedHashSet<Position>();
      linkedHashSet0.add(position0);
      TripsConfig tripsConfig0 = new TripsConfig();
      MockDate mockDate0 = new MockDate((-20), (-20), (-20), 1, (-20));
      position0.setTime(mockDate0);
      Class<TripReport> class0 = TripReport.class;
      // Undeclared exception!
      try { 
        ReportUtils.detectTripsAndStops((Collection<Position>) linkedHashSet0, tripsConfig0, true, (double) (-20), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ReportUtils.findDriverName("driverUniqueId");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ReportUtils.findDriverName((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Position position0 = new Position();
      position0.set("driverUniqueId", "totalDistance");
      Position position1 = new Position();
      String string0 = ReportUtils.findDriver(position1, position0);
      assertEquals("totalDistance", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Position position0 = new Position();
      String string0 = ReportUtils.findDriver(position0, position0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Position position0 = new Position();
      position0.set("totalDistance", "satVisible");
      // Undeclared exception!
      try { 
        ReportUtils.calculateDistance(position0, position0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.traccar.model.ExtendedModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Position position0 = new Position();
      Short short0 = new Short((short)1243);
      position0.set("odometer", short0);
      double double0 = ReportUtils.calculateDistance(position0, position0, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      Collection<Long> collection0 = ReportUtils.getDeviceList(linkedHashSet0, linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.getSpeedUnit(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReportUtils.initializeContext(1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.traccar.reports.ReportUtils", e);
      }
  }
}
