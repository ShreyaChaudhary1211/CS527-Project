/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 07:09:53 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.codec.BeanInfo;
import com.alibaba.fastjson2.util.ParameterizedTypeImpl;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.DayOfWeek;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EvosuiteObjectReaderImplEnum_ESTest extends EvosuiteObjectReaderImplEnum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      long[] longArray0 = new long[3];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, (Enum[]) null, (Enum[]) null, longArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-11);
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider((ObjectReaderCreator) null);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, 5100336081510080343L);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readObject(jSONReader0, 0L);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // No enum ordinal java.lang.Byte.-184549376
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 8);
      long[] longArray0 = new long[2];
      longArray0[0] = 505L;
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByHashCode(505L);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<JSONReader.AutoTypeBeforeHandler> class0 = JSONReader.AutoTypeBeforeHandler.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      long[] longArray0 = new long[3];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Class class1 = objectReaderImplEnum0.getObjectClass();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 12);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Class class1 = objectReaderImplEnum0.getObjectClass();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 2);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      enumArray0[0] = (Enum<DayOfWeek>) dayOfWeek0;
      long[] longArray0 = new long[0];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByOrdinal(0);
      assertEquals(DayOfWeek.FRIDAY, enum0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      enumArray0[2] = (Enum<DayOfWeek>) dayOfWeek0;
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByHashCode(0L);
      assertEquals(DayOfWeek.WEDNESDAY, enum0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 0);
      long[] longArray0 = new long[1];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readObject(jSONReader0, (Type) null, (Object) jSONReader0, 0L);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // No enum ordinal java.lang.reflect.Field.0
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 2);
      long[] longArray0 = new long[9];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readObject((JSONReader) null, (Type) class0, (Object) null, (-1922L));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 7);
      long[] longArray0 = new long[8];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[4];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte)71, 10);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readObject(jSONReader0, (Type) null, (Object) enumArray0[6], 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      long[] longArray0 = new long[8];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, (Enum[]) null, enumArray0, longArray0);
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (-216L));
      JSONReader jSONReader0 = JSONReader.of(byteArray0, (-1775), (int) (byte) (-49), charset0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readJSONBObject(jSONReader0, class0, objectReaderProvider0, 131L);
        fail("Expecting exception: StringIndexOutOfBoundsException");

      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, jSONReader_FeatureArray0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      jSONReader0.readNumber();
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readJSONBObject(jSONReader0, beanInfo0.seeAlsoDefault, byteArray0[0], (-454L));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      long[] longArray0 = new long[2];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, (Enum[]) null, (Enum[]) null, longArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.of(1059);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 2);
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.getEnum("");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = null;
      try {
        objectReaderImplEnum0 = new ObjectReaderImplEnum((Class) null, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 2);
      long[] longArray0 = new long[0];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByOrdinal(0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      long[] longArray0 = new long[2];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.getEnumByOrdinal(1059);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // No enum ordinal java.lang.reflect.Method.1059
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 0);
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.getEnumByOrdinal((-2804));
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // No enum ordinal java.lang.Float.-2804
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JSONReader.AutoTypeBeforeHandler> class0 = JSONReader.AutoTypeBeforeHandler.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 0);
      long[] longArray0 = new long[0];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByHashCode(0L);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Method> class0 = Method.class;
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, (Enum[]) null, (Enum[]) null, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnumByHashCode(1027L);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      enumArray0[0] = (Enum<DayOfWeek>) dayOfWeek0;
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[5];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportSmartMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      Object object0 = objectReaderImplEnum0.readObject(jSONReader0, (Type) null, (Object) dayOfWeek0, (long) (byte) (-21));
      assertEquals(DayOfWeek.WEDNESDAY, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      enumArray0[0] = (Enum<DayOfWeek>) dayOfWeek0;
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      byte[] byteArray0 = new byte[7];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, jSONReader_FeatureArray0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      Object object0 = objectReaderImplEnum0.readJSONBObject(jSONReader0, beanInfo0.deserializer, (byte)0, (-454L));
      assertSame(object0, dayOfWeek0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 1);
      long[] longArray0 = new long[2];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      char[] charArray0 = new char[0];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context((ObjectReaderProvider) null, 0L);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      Object object0 = objectReaderImplEnum0.readJSONBObject(jSONReader0, (Type) null, enumArray0[0], 0L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      byte[] byteArray0 = new byte[7];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, jSONReader_FeatureArray0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      objectReaderImplEnum0.readJSONBObject(jSONReader0, beanInfo0.deserializer, (byte)0, (-454L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 1);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, 0L);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readJSONBObject(jSONReader0, class0, jSONReader0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportSmartMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readJSONBObject(jSONReader0, class0, beanInfo0, (-1L));
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // string value not support input INT32 0 offset 1/5
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<String> class0 = String.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 6);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.of(0);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // None enum ordinal or value 0
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      DayOfWeek dayOfWeek0 = DayOfWeek.SUNDAY;
      enumArray0[1] = (Enum<DayOfWeek>) dayOfWeek0;
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      Enum enum0 = objectReaderImplEnum0.of((byte)1);
      assertEquals(DayOfWeek.SUNDAY, enum0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 3);
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, (long[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)1;
      byteArray0[1] = (byte)72;
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, jSONReader_FeatureArray0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      jSONReader0.readNumber();
      // Undeclared exception!
      try {
        objectReaderImplEnum0.readJSONBObject(jSONReader0, beanInfo0.builder, (byte)0, (-454L));
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // No enum ordinal java.lang.String.16777216
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 4);
      DayOfWeek dayOfWeek0 = DayOfWeek.WEDNESDAY;
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      byte[] byteArray0 = new byte[5];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportSmartMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      objectReaderImplEnum0.readObject(jSONReader0, (Type) null, (Object) dayOfWeek0, (long) (byte) (-21));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 1);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Enum enum0 = objectReaderImplEnum0.getEnum((String) null);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 0);
      long[] longArray0 = new long[5];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      // Undeclared exception!
      try {
        objectReaderImplEnum0.getEnumByHashCode(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplEnum", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 1);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      char[] charArray0 = new char[1];
      JSONReader jSONReader0 = JSONReader.of(charArray0, (-16), (-16));
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      Object object0 = objectReaderImplEnum0.readObject(jSONReader0, (Type) null, (Object) parameterizedTypeImpl0, 0L);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<DayOfWeek> class0 = DayOfWeek.class;
      Enum<DayOfWeek>[] enumArray0 = (Enum<DayOfWeek>[]) Array.newInstance(Enum.class, 1);
      long[] longArray0 = new long[7];
      ObjectReaderImplEnum objectReaderImplEnum0 = new ObjectReaderImplEnum(class0, (Method) null, (Member) null, enumArray0, enumArray0, longArray0);
      Class class1 = objectReaderImplEnum0.getObjectClass();
      assertFalse(class1.isPrimitive());
  }
}
