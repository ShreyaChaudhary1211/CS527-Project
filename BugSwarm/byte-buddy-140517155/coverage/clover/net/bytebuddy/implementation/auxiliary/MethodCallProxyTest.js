var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":121,"id":46873,"methods":[{"el":36,"sc":5,"sl":25},{"el":49,"sc":5,"sl":38},{"el":68,"sc":5,"sl":51},{"el":77,"sc":5,"sl":70},{"el":86,"sc":5,"sl":79}],"name":"MethodCallProxyTest","sl":15},{"el":94,"id":46917,"methods":[{"el":93,"sc":9,"sl":91}],"name":"MethodCallProxyTest.NoParameterMethod","sl":89},{"el":104,"id":46919,"methods":[{"el":103,"sc":9,"sl":101}],"name":"MethodCallProxyTest.StaticMethod","sl":97},{"el":112,"id":46921,"methods":[{"el":111,"sc":9,"sl":109}],"name":"MethodCallProxyTest.MultipleParameterMethod","sl":107},{"el":120,"id":46923,"methods":[{"el":119,"sc":9,"sl":117}],"name":"MethodCallProxyTest.GenericType","sl":115}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_2858":{"methods":[{"sl":38},{"sl":101}],"name":"testStaticMethod","pass":true,"statements":[{"sl":40},{"sl":41},{"sl":42},{"sl":43},{"sl":44},{"sl":45},{"sl":46},{"sl":47},{"sl":48},{"sl":102}]},"test_4233":{"methods":[{"sl":70}],"name":"testNonGenericParameter","pass":true,"statements":[{"sl":72},{"sl":73},{"sl":74},{"sl":75},{"sl":76}]},"test_4247":{"methods":[{"sl":51},{"sl":109}],"name":"testMultipleParameterMethod","pass":true,"statements":[{"sl":53},{"sl":54},{"sl":59},{"sl":60},{"sl":61},{"sl":62},{"sl":63},{"sl":64},{"sl":65},{"sl":66},{"sl":67},{"sl":110}]},"test_4833":{"methods":[{"sl":79}],"name":"testObjectProperties","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":85}]},"test_651":{"methods":[{"sl":25},{"sl":91}],"name":"testNoParameterMethod","pass":true,"statements":[{"sl":27},{"sl":28},{"sl":29},{"sl":30},{"sl":31},{"sl":32},{"sl":33},{"sl":34},{"sl":35},{"sl":92}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
