/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 28 00:05:01 GMT 2024
 */

package net.bytebuddy.dynamic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.lang.instrument.Instrumentation;
import java.lang.reflect.Field;
import java.net.URL;
import java.net.URLStreamHandler;
import java.security.AccessControlContext;
import java.security.AllPermission;
import java.security.CodeSource;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.Principal;
import java.security.ProtectionDomain;
import java.security.cert.Certificate;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.jar.JarFile;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassFileLocator_ESTest extends ClassFileLocator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(instrumentation0).isRetransformClassesSupported();
      MockThread mockThread0 = new MockThread("/kD8\"Lmz@&#u");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate classFileLocator_AgentBased_ClassLoadingDelegate0 = ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0);
      ClassFileLocator.AgentBased classFileLocator_AgentBased0 = new ClassFileLocator.AgentBased(instrumentation0, classFileLocator_AgentBased_ClassLoadingDelegate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      String string0 = classFileLocator_Simple0.toString();
      assertEquals("ClassFileLocator.Simple{classFiles={}}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(instrumentation0).isRetransformClassesSupported();
      doReturn(false).when(instrumentation0).removeTransformer(any(java.lang.instrument.ClassFileTransformer.class));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassFileLocator.AgentBased classFileLocator_AgentBased0 = new ClassFileLocator.AgentBased(instrumentation0, classLoader0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_AgentBased0.locate("");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedList<Class<Principal>> linkedList0 = new LinkedList<Class<Principal>>();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit(classLoader0, linkedList0);
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(instrumentation0).toString();
      doReturn(false).when(instrumentation0).isRetransformClassesSupported();
      ClassFileLocator.AgentBased classFileLocator_AgentBased0 = null;
      try {
        classFileLocator_AgentBased0 = new ClassFileLocator.AgentBased(instrumentation0, classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null does not support retransformation
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$AgentBased", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassFileLocator.ForJarFile classFileLocator_ForJarFile0 = new ClassFileLocator.ForJarFile((JarFile) null);
      // Undeclared exception!
      try { 
        classFileLocator_ForJarFile0.locate("XMw!o.8*Z%i6W]jk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$ForJarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[2];
      AccessControlContext accessControlContext0 = new AccessControlContext(protectionDomainArray0);
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader((ClassLoader) null, accessControlContext0);
      // Undeclared exception!
      try { 
        classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0.locate("sun.misc.Launcher$ExtClassLoader");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$AgentBased$ClassLoadingDelegate$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ClassFileLocator.AgentBased.fromInstalledAgent(classLoader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The Byte Buddy agent is not installed or not accessible
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$AgentBased", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassFileLocator.ForClassLoader classFileLocator_ForClassLoader0 = new ClassFileLocator.ForClassLoader((ClassLoader) null);
      // Undeclared exception!
      try { 
        classFileLocator_ForClassLoader0.locate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$ForClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassFileLocator[] classFileLocatorArray0 = new ClassFileLocator[1];
      ClassFileLocator.Compound classFileLocator_Compound0 = new ClassFileLocator.Compound(classFileLocatorArray0);
      boolean boolean0 = classFileLocator_Compound0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader(classLoader0, (AccessControlContext) null);
      ClassFileLocator[] classFileLocatorArray0 = new ClassFileLocator[1];
      ClassFileLocator.Compound classFileLocator_Compound0 = new ClassFileLocator.Compound(classFileLocatorArray0);
      boolean boolean0 = classFileLocator_Compound0.equals(classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ClassFileLocator.ForFolder classFileLocator_ForFolder0 = new ClassFileLocator.ForFolder(mockFile0);
      ClassFileLocator.NoOp classFileLocator_NoOp0 = ClassFileLocator.NoOp.INSTANCE;
      ClassFileLocator[] classFileLocatorArray0 = new ClassFileLocator[3];
      classFileLocatorArray0[0] = (ClassFileLocator) classFileLocator_ForFolder0;
      classFileLocatorArray0[1] = (ClassFileLocator) classFileLocator_ForFolder0;
      classFileLocatorArray0[2] = (ClassFileLocator) classFileLocator_NoOp0;
      ClassFileLocator.Compound classFileLocator_Compound0 = new ClassFileLocator.Compound(classFileLocatorArray0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_Compound0.locate("");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer(classLoader0, "net.bytebuddy.agent.Installer");
      String string0 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer((ClassLoader) null, "");
      Class<String> class0 = String.class;
      AllPermission allPermission0 = new AllPermission();
      PermissionCollection permissionCollection0 = allPermission0.newPermissionCollection();
      Principal[] principalArray0 = new Principal[3];
      ProtectionDomain protectionDomain0 = new ProtectionDomain((CodeSource) null, permissionCollection0, (ClassLoader) null, principalArray0);
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.transform((ClassLoader) null, "The Byte Buddy agent is not installed", class0, protectionDomain0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer(classLoader0, "j'nKs&;CG4");
      Class<Field> class0 = Field.class;
      CodeSource codeSource0 = new CodeSource((URL) null, (Certificate[]) null);
      Permissions permissions0 = new Permissions();
      ProtectionDomain protectionDomain0 = new ProtectionDomain(codeSource0, permissions0);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.transform(classLoader0, "j'nKs&;CG4", class0, protectionDomain0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockThread mockThread0 = new MockThread("/kD8\"Lmz@&#u");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer(classLoader0, "net.bytebuddy.dynamic.ClassFileLocator$Compound");
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      Class<Principal> class0 = Principal.class;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Cannot access field", "ClassFileLocator.ForClassLoader.WeaklyReferenced{classLoader=org.evosuite.instrumentation.InstrumentingClassLoader@3575b351}", 2857, "ClassFileLocator.AgentBased{instrumentation=null, classLoadingDelegate=ClassFileLocator.AgentBased.ClassLoadingDelegate.Default{classLoader=org.evosuite.instrumentation.InstrumentingClassLoader@3575b351}}", uRLStreamHandler0);
      Certificate[] certificateArray0 = new Certificate[6];
      CodeSource codeSource0 = new CodeSource(uRL0, certificateArray0);
      ProtectionDomain protectionDomain0 = new ProtectionDomain(codeSource0, (PermissionCollection) null);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.transform(classLoader1, "Cannot access java.lang.reflect.MethodType#parameterArray", class0, protectionDomain0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer((ClassLoader) null, (String) null);
      Class<Integer> class0 = Integer.class;
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.transform((ClassLoader) null, (String) null, class0, (ProtectionDomain) null, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      Class<Field> class0 = Field.class;
      ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0 = (ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit)ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit.of(class0);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0.equals(classFileLocator_Simple0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved((Exception) null);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(mockThrowable0);
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved(mockException0);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0.equals("addModuleReads");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved((Field) null);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Cannot resolve declared methods of a latent type description: ");
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved((Field) null);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0.equals(mockThread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader(classLoader0, (AccessControlContext) null);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.Resolution classFileLocator_Resolution0 = ClassFileLocator.ForClassLoader.locate(classLoader0, "6y)R19P`Y%Z>E/.#P_.");
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader(classLoader0, (AccessControlContext) null);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0.equals(classFileLocator_Resolution0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.Default classFileLocator_AgentBased_ClassLoadingDelegate_Default0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.Default(classLoader0);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_Default0.equals(mockThread0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(instrumentation0).toString();
      doReturn(false).when(instrumentation0).isRetransformClassesSupported();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassFileLocator.AgentBased.of(instrumentation0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null does not support retransformation
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$AgentBased", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassFileLocator.ForClassLoader classFileLocator_ForClassLoader0 = new ClassFileLocator.ForClassLoader((ClassLoader) null);
      MockFile mockFile0 = new MockFile("VCMP");
      ClassFileLocator.ForFolder classFileLocator_ForFolder0 = new ClassFileLocator.ForFolder(mockFile0);
      boolean boolean0 = classFileLocator_ForFolder0.equals(classFileLocator_ForClassLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ClassFileLocator.ForFolder classFileLocator_ForFolder0 = new ClassFileLocator.ForFolder(mockFile0);
      ClassFileLocator[] classFileLocatorArray0 = new ClassFileLocator[3];
      classFileLocatorArray0[0] = (ClassFileLocator) classFileLocator_ForFolder0;
      ClassFileLocator.Compound classFileLocator_Compound0 = new ClassFileLocator.Compound(classFileLocatorArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ClassFileLocator/ForFolder{folder=}.class");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_Compound0.locate("ClassFileLocator.ForFolder{folder=}");
      assertTrue(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassFileLocator.ForJarFile classFileLocator_ForJarFile0 = new ClassFileLocator.ForJarFile((JarFile) null);
      boolean boolean0 = classFileLocator_ForJarFile0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = new ClassFileLocator.ForClassLoader.WeaklyReferenced((ClassLoader) null);
      boolean boolean0 = classFileLocator_ForClassLoader_WeaklyReferenced0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = new ClassFileLocator.ForClassLoader.WeaklyReferenced(classLoader0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = ClassFileLocator.ForClassLoader.locate(classLoader0, "6y)R19P`Y%Z>E/.#P_.");
      boolean boolean0 = classFileLocator_ForClassLoader_WeaklyReferenced0.equals(classFileLocator_Resolution0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = new ClassFileLocator.ForClassLoader.WeaklyReferenced((ClassLoader) null);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_ForClassLoader_WeaklyReferenced0.locate("N*8+");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = new ClassFileLocator.ForClassLoader.WeaklyReferenced(classLoader0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_ForClassLoader_WeaklyReferenced0.locate(", accessControlContext=");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockThread mockThread0 = new MockThread("/kD8\"Lmz@&#u");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = (ClassFileLocator.ForClassLoader.WeaklyReferenced)ClassFileLocator.ForClassLoader.WeaklyReferenced.of(classLoader0);
      assertFalse(classFileLocator_ForClassLoader_WeaklyReferenced0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassFileLocator classFileLocator0 = ClassFileLocator.ForClassLoader.WeaklyReferenced.of((ClassLoader) null);
      assertNotNull(classFileLocator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.ForClassLoader classFileLocator_ForClassLoader0 = new ClassFileLocator.ForClassLoader(classLoader0);
      boolean boolean0 = classFileLocator_ForClassLoader0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassFileLocator classFileLocator0 = ClassFileLocator.ForClassLoader.ofClassPath();
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator0.locate("sun.misc.Launcher$ExtClassLoader");
      assertTrue(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassFileLocator classFileLocator0 = ClassFileLocator.ForClassLoader.of((ClassLoader) null);
      assertNotNull(classFileLocator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      boolean boolean0 = classFileLocator_Simple0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      Object object0 = new Object();
      boolean boolean0 = classFileLocator_Simple0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_Simple0.locate("%)%xl4D9]%SS8(_Jg(");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ClassFileLocator classFileLocator0 = ClassFileLocator.Simple.of("Error invoking java.lang.invoke.Methodandles#publicLookup", byteArray0);
      ClassFileLocator.NoOp classFileLocator_NoOp0 = ClassFileLocator.NoOp.INSTANCE;
      ClassFileLocator[] classFileLocatorArray0 = new ClassFileLocator[9];
      classFileLocatorArray0[0] = (ClassFileLocator) classFileLocator_NoOp0;
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn("sun.misc.Launcher$AppClassLoader").when(instrumentation0).toString();
      doReturn(true).when(instrumentation0).isRetransformClassesSupported();
      doReturn(false).when(instrumentation0).removeTransformer(any(java.lang.instrument.ClassFileTransformer.class));
      Class<Object> class0 = Object.class;
      ClassFileLocator classFileLocator1 = ClassFileLocator.AgentBased.of(instrumentation0, class0);
      classFileLocatorArray0[1] = classFileLocator1;
      classFileLocatorArray0[2] = classFileLocator0;
      ClassFileLocator.Compound classFileLocator_Compound0 = new ClassFileLocator.Compound(classFileLocatorArray0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_Compound0.locate("Error invoking java.lang.invoke.Methodandles#publicLookup");
      assertTrue(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ClassFileLocator.Resolution.Explicit classFileLocator_Resolution_Explicit0 = new ClassFileLocator.Resolution.Explicit(byteArray0);
      boolean boolean0 = classFileLocator_Resolution_Explicit0.equals("W]Tuia");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ClassFileLocator.Resolution.Explicit classFileLocator_Resolution_Explicit0 = new ClassFileLocator.Resolution.Explicit(byteArray0);
      boolean boolean0 = classFileLocator_Resolution_Explicit0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ClassFileLocator.ForFolder classFileLocator_ForFolder0 = new ClassFileLocator.ForFolder(mockFile0);
      ClassFileLocator.Resolution.Illegal classFileLocator_Resolution_Illegal0 = (ClassFileLocator.Resolution.Illegal)classFileLocator_ForFolder0.locate("");
      boolean boolean0 = classFileLocator_Resolution_Illegal0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator classFileLocator0 = ClassFileLocator.ForClassLoader.WeaklyReferenced.of(classLoader0);
      ClassFileLocator.Resolution.Illegal classFileLocator_Resolution_Illegal0 = (ClassFileLocator.Resolution.Illegal)classFileLocator0.locate(";(c+$>[gv%_");
      boolean boolean0 = classFileLocator_Resolution_Illegal0.equals(classFileLocator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("<");
      MockException mockException0 = new MockException(mockThrowable0);
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved(mockException0);
      String string0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0.toString();
      assertEquals("ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved{exception=org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: <}", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(mockThrowable0);
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Unresolved(mockException0);
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[7];
      AccessControlContext accessControlContext0 = new AccessControlContext(protectionDomainArray0);
      // Undeclared exception!
      try { 
        classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Unresolved0.initialize(accessControlContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not locate classes vector
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$AgentBased$ClassLoadingDelegate$ForDelegatingClassLoader$Dispatcher$Unresolved", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassFileLocator.ForJarFile classFileLocator_ForJarFile0 = new ClassFileLocator.ForJarFile((JarFile) null);
      String string0 = classFileLocator_ForJarFile0.toString();
      assertEquals("ClassFileLocator.ForJarFile{jarFile=null}", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassFileLocator.ForJarFile classFileLocator_ForJarFile0 = new ClassFileLocator.ForJarFile((JarFile) null);
      // Undeclared exception!
      try { 
        classFileLocator_ForJarFile0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$ForJarFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.ForClassLoader.WeaklyReferenced classFileLocator_ForClassLoader_WeaklyReferenced0 = new ClassFileLocator.ForClassLoader.WeaklyReferenced(classLoader0);
      String string0 = classFileLocator_ForClassLoader_WeaklyReferenced0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved((Field) null);
      String string0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader_Dispatcher_Resolved0.toString();
      assertEquals("ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.Dispatcher.Resolved{field=null}", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[0];
      AccessControlContext accessControlContext0 = new AccessControlContext(protectionDomainArray0);
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader(classLoader0, accessControlContext0);
      try { 
        classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0.locate("Cannot access java.lang.reflect.MethodHandles.Lookup#lookupClass");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassFileLocator.Resolution.Illegal classFileLocator_Resolution_Illegal0 = new ClassFileLocator.Resolution.Illegal("!;ju3");
      String string0 = classFileLocator_Resolution_Illegal0.toString();
      assertEquals("ClassFileLocator.Resolution.Illegal{typeName='!;ju3'}", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator classFileLocator0 = ClassFileLocator.ForClassLoader.WeaklyReferenced.of(classLoader0);
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator0.locate(";(c+$>[gv%_");
      boolean boolean0 = classFileLocator_Resolution0.isResolved();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassFileLocator.Resolution.Illegal classFileLocator_Resolution_Illegal0 = new ClassFileLocator.Resolution.Illegal("!;ju3");
      // Undeclared exception!
      try { 
        classFileLocator_Resolution_Illegal0.resolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not locate class file for !;ju3
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$Resolution$Illegal", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassFileLocator.ForClassLoader.read(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.bytebuddy.dynamic.ClassFileLocator$ForClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassFileLocator.ForClassLoader classFileLocator_ForClassLoader0 = (ClassFileLocator.ForClassLoader)ClassFileLocator.ForClassLoader.ofClassPath();
      String string0 = classFileLocator_ForClassLoader0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.ForClassLoader classFileLocator_ForClassLoader0 = new ClassFileLocator.ForClassLoader(classLoader0);
      boolean boolean0 = classFileLocator_ForClassLoader0.equals(classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassFileLocator.NoOp classFileLocator_NoOp0 = ClassFileLocator.NoOp.INSTANCE;
      String string0 = classFileLocator_NoOp0.toString();
      assertEquals("ClassFileLocator.NoOp.INSTANCE", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassFileLocator.NoOp classFileLocator_NoOp0 = ClassFileLocator.NoOp.INSTANCE;
      ClassFileLocator.Resolution classFileLocator_Resolution0 = classFileLocator_NoOp0.locate("");
      assertFalse(classFileLocator_Resolution0.isResolved());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ClassFileLocator.Simple classFileLocator_Simple0 = new ClassFileLocator.Simple(hashMap0);
      byte[] byteArray0 = new byte[8];
      ClassFileLocator.Compound classFileLocator_Compound0 = (ClassFileLocator.Compound)ClassFileLocator.Simple.of("v4|b,i*b_=rzSeW", byteArray0, (ClassFileLocator) classFileLocator_Simple0);
      String string0 = classFileLocator_Compound0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      File file0 = MockFile.createTempFile("ZKtmt[q4kX", "addModuleReads");
      ClassFileLocator.ForFolder classFileLocator_ForFolder0 = new ClassFileLocator.ForFolder(file0);
      String string0 = classFileLocator_ForFolder0.toString();
      assertEquals("ClassFileLocator.ForFolder{folder=/var/folders/70/9z8mmtr153x2znr25_zb57mr0000gn/T/ZKtmt[q4kX0addModuleReads}", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ExtractionClassFileTransformer classFileLocator_AgentBased_ExtractionClassFileTransformer0 = new ClassFileLocator.AgentBased.ExtractionClassFileTransformer(classLoader0, "net.bytebuddy.agent.Installer");
      byte[] byteArray0 = classFileLocator_AgentBased_ExtractionClassFileTransformer0.getBinaryRepresentation();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn("0xW1'I5").when(instrumentation0).toString();
      doReturn(true).when(instrumentation0).isRetransformClassesSupported();
      ClassFileLocator.AgentBased classFileLocator_AgentBased0 = new ClassFileLocator.AgentBased(instrumentation0, classLoader0);
      String string0 = classFileLocator_AgentBased0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Instrumentation instrumentation0 = mock(Instrumentation.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(instrumentation0).isRetransformClassesSupported();
      ClassFileLocator.AgentBased classFileLocator_AgentBased0 = new ClassFileLocator.AgentBased(instrumentation0, classLoader0);
      Object object0 = new Object();
      boolean boolean0 = classFileLocator_AgentBased0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ClassFileLocator.Resolution.Explicit classFileLocator_Resolution_Explicit0 = new ClassFileLocator.Resolution.Explicit(byteArray0);
      String string0 = classFileLocator_Resolution_Explicit0.toString();
      assertEquals("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<8 bytes>}", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ClassFileLocator.Resolution.Explicit classFileLocator_Resolution_Explicit0 = new ClassFileLocator.Resolution.Explicit(byteArray0);
      byte[] byteArray1 = classFileLocator_Resolution_Explicit0.resolve();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate classFileLocator_AgentBased_ClassLoadingDelegate0 = ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0);
      LinkedHashSet<Class<Principal>> linkedHashSet0 = new LinkedHashSet<Class<Principal>>();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit(classFileLocator_AgentBased_ClassLoadingDelegate0, linkedHashSet0);
      String string0 = classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0 = (ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit)ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit.of(class0);
      boolean boolean0 = classFileLocator_AgentBased_ClassLoadingDelegate_Explicit0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0 = new ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader(classLoader0, (AccessControlContext) null);
      String string0 = classFileLocator_AgentBased_ClassLoadingDelegate_ForDelegatingClassLoader0.toString();
      assertNotNull(string0);
  }
}
