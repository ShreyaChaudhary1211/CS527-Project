import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray1);
        org.junit.Assert.assertNotNull(classFileLocator2);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray12 = explicit4.resolve();
        byte[] byteArray13 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = compound30.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str33 = compound30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.String str44 = explicit40.toString();
        byte[] byteArray45 = explicit40.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray45);
        boolean boolean47 = compound30.equals((java.lang.Object) byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray53);
        byte[] byteArray55 = explicit54.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray57 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound58 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = noOp63.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution68 = noOp63.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str69 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution71 = noOp63.locate("");
        boolean boolean72 = compound58.equals((java.lang.Object) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray55, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        java.lang.String str74 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = noOp63.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray45, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution79 = noOp63.locate(".class");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str44, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocatorArray57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertNotNull(resolution68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str69, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str74, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(resolution79);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean3 = illegal2.isResolved();
        boolean boolean4 = illegal2.isResolved();
        java.lang.String str5 = illegal2.toString();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean12 = explicit9.equals((java.lang.Object) (short) 0);
        boolean boolean13 = illegal2.equals((java.lang.Object) explicit9);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        boolean boolean23 = explicit22.isResolved();
        byte[] byteArray24 = explicit22.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        boolean boolean26 = illegal2.equals((java.lang.Object) byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classFileLocator27);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        java.lang.String str91 = compound85.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp12.locate("ClassFileLocator.NoOp.INSTANCE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = resolution22.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        java.lang.String str25 = explicit20.toString();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        boolean boolean29 = explicit5.equals((java.lang.Object) byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str56 = noOp55.toString();
        java.lang.String str57 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator40, noOp42, classFileLocator54, noOp55 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp60 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str61 = noOp60.toString();
        java.lang.String str62 = noOp60.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = noOp60.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean65 = compound59.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal67 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean68 = compound59.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = compound59.locate("");
        boolean boolean71 = explicit5.equals((java.lang.Object) compound59);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution73 = compound59.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray74 = resolution73.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertTrue("'" + noOp60 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp60.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str61, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(resolution70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(resolution73);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str16 = noOp4.toString();
        java.lang.String str17 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp10 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean11 = explicit9.equals((java.lang.Object) noOp10);
        java.lang.String str12 = noOp10.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray4, (net.bytebuddy.dynamic.ClassFileLocator) noOp10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        java.lang.String str16 = explicit15.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp10 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp10.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean9 = illegal8.isResolved();
        java.lang.String str10 = illegal8.toString();
        boolean boolean11 = illegal8.isResolved();
        boolean boolean12 = explicit3.equals((java.lang.Object) illegal8);
        boolean boolean13 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.lang.ClassLoader classLoader0 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator1 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.WeaklyReferenced.of(classLoader0);
        java.lang.Class<?> wildcardClass2 = classFileLocator1.getClass();
        org.junit.Assert.assertNotNull(classFileLocator1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        boolean boolean7 = explicit3.isResolved();
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        boolean boolean14 = illegal1.isResolved();
        java.lang.String str15 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str15, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator0 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = classFileLocator0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = classFileLocator0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.Class<?> wildcardClass5 = classFileLocator0.getClass();
        org.junit.Assert.assertNotNull(classFileLocator0);
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        java.lang.String str6 = noOp0.toString();
        java.lang.String str7 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str10 = noOp0.toString();
        java.lang.String str11 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str7, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray16);
        boolean boolean24 = explicit7.equals((java.lang.Object) byteArray16);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray51 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray48, classFileLocator52);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp54 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str55 = noOp54.toString();
        java.lang.String str56 = noOp54.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray57 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator39, noOp41, classFileLocator53, noOp54 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound58 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray57);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound58.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray61 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator28, compound58 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound62 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound63 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        java.lang.String str64 = compound63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound63);
        java.lang.String str66 = compound63.toString();
        java.lang.String str67 = compound63.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + noOp54 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp54.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray57);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(classFileLocatorArray61);
        org.junit.Assert.assertNotNull(classFileLocator65);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        byte[] byteArray8 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean12 = illegal10.equals((java.lang.Object) classFileLocator11);
        java.lang.String str13 = illegal10.toString();
        boolean boolean14 = illegal10.isResolved();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22, classFileLocator26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str42 = noOp41.toString();
        java.lang.String str43 = noOp41.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray44 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator26, noOp28, classFileLocator40, noOp41 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound45 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray44);
        boolean boolean47 = compound45.equals((java.lang.Object) "hi!");
        boolean boolean49 = compound45.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution51 = compound45.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound45.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        boolean boolean67 = compound45.equals((java.lang.Object) byteArray57);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray57);
        boolean boolean69 = illegal10.equals((java.lang.Object) byteArray57);
        boolean boolean70 = explicit3.equals((java.lang.Object) illegal10);
        boolean boolean71 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(resolution51);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray11, classFileLocator36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        boolean boolean44 = explicit42.isResolved();
        boolean boolean46 = explicit42.equals((java.lang.Object) 10L);
        boolean boolean47 = explicit42.isResolved();
        java.lang.String str48 = explicit42.toString();
        byte[] byteArray49 = explicit42.resolve();
        byte[] byteArray50 = explicit42.resolve();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp60 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean61 = explicit59.equals((java.lang.Object) noOp60);
        java.lang.String str62 = noOp60.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray54, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray50, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution67 = classFileLocator65.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str48, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp60 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp60.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertNotNull(resolution67);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean7 = illegal6.isResolved();
        java.lang.String str8 = illegal6.toString();
        java.lang.String str9 = illegal6.toString();
        java.lang.String str10 = illegal6.toString();
        boolean boolean11 = illegal6.isResolved();
        boolean boolean12 = compound2.equals((java.lang.Object) illegal6);
        java.lang.String str13 = illegal6.toString();
        java.lang.String str14 = illegal6.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray15);
        boolean boolean23 = explicit6.equals((java.lang.Object) byteArray15);
        byte[] byteArray24 = explicit6.resolve();
        java.lang.String str25 = explicit6.toString();
        boolean boolean26 = explicit6.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray26);
        byte[] byteArray28 = explicit27.resolve();
        boolean boolean29 = explicit27.isResolved();
        boolean boolean31 = explicit27.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = classFileLocator32.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean35 = explicit27.equals((java.lang.Object) classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray48 = explicit47.resolve();
        boolean boolean49 = explicit47.isResolved();
        boolean boolean51 = explicit47.equals((java.lang.Object) 10L);
        boolean boolean52 = explicit47.isResolved();
        java.lang.String str53 = explicit47.toString();
        byte[] byteArray54 = explicit47.resolve();
        java.lang.String str55 = explicit47.toString();
        boolean boolean56 = explicit47.isResolved();
        boolean boolean57 = illegal43.equals((java.lang.Object) explicit47);
        boolean boolean58 = explicit47.isResolved();
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        byte[] byteArray63 = explicit62.resolve();
        boolean boolean64 = explicit62.isResolved();
        boolean boolean66 = explicit62.equals((java.lang.Object) 10L);
        java.lang.String str67 = explicit62.toString();
        java.lang.String str68 = explicit62.toString();
        byte[] byteArray69 = explicit62.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit70 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray69);
        boolean boolean71 = explicit47.equals((java.lang.Object) byteArray69);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray72 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound73 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray72);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution75 = compound73.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray69, (net.bytebuddy.dynamic.ClassFileLocator) compound73);
        java.lang.String str77 = compound73.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution79 = compound73.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) compound73);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str53, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str55, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str67, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str68, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray72);
        org.junit.Assert.assertNotNull(resolution75);
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str77, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution79);
        org.junit.Assert.assertNotNull(classFileLocator80);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        boolean boolean19 = resolution18.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray63 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray60, classFileLocator64);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp66 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str67 = noOp66.toString();
        java.lang.String str68 = noOp66.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray69 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator51, noOp53, classFileLocator65, noOp66 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound70 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray69);
        boolean boolean72 = compound70.equals((java.lang.Object) "hi!");
        boolean boolean74 = compound70.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = compound70.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = compound70.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray82 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray82);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit87 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray86);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp88 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean89 = explicit87.equals((java.lang.Object) noOp88);
        java.lang.String str90 = noOp88.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator91 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray82, (net.bytebuddy.dynamic.ClassFileLocator) noOp88);
        boolean boolean92 = compound70.equals((java.lang.Object) byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator93 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = classFileLocator93.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean96 = compound29.equals((java.lang.Object) resolution95);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution98 = compound29.locate(".class");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertTrue("'" + noOp66 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp66.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp88 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp88.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str90, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classFileLocator93);
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(resolution98);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp6 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean7 = explicit5.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp6.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str12 = noOp6.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp6.locate("");
        boolean boolean15 = compound1.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp6.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp6.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        boolean boolean22 = resolution21.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp6 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp6.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        byte[] byteArray11 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        boolean boolean7 = illegal1.equals((java.lang.Object) classFileLocator6);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str40 = noOp39.toString();
        java.lang.String str41 = noOp39.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray42 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator24, noOp26, classFileLocator38, noOp39 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = compound43.locate("");
        boolean boolean48 = explicit13.equals((java.lang.Object) compound43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean51 = illegal1.equals((java.lang.Object) compound43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound43.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray42);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(resolution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = resolution7.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22, classFileLocator26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str42 = noOp41.toString();
        java.lang.String str43 = noOp41.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray44 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator26, noOp28, classFileLocator40, noOp41 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound45 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray44);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = compound45.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator15, compound45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = explicit3.equals((java.lang.Object) classFileLocatorArray48);
        boolean boolean52 = explicit3.isResolved();
        byte[] byteArray53 = explicit3.resolve();
        java.lang.String str54 = explicit3.toString();
        byte[] byteArray55 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray44);
        org.junit.Assert.assertNotNull(resolution47);
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str54, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        java.lang.String str8 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp0.locate(".class");
        java.lang.String str11 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        java.lang.String str7 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str7, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray4 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        boolean boolean6 = compound2.equals((java.lang.Object) classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = compound8.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        java.lang.String str11 = compound8.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str11, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        java.lang.String str14 = illegal1.toString();
        boolean boolean15 = illegal1.isResolved();
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        java.lang.String str25 = noOp14.toString();
        java.lang.String str26 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.Class<?> wildcardClass29 = noOp14.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray14 = explicit13.resolve();
        boolean boolean15 = explicit13.isResolved();
        boolean boolean17 = explicit13.equals((java.lang.Object) 10L);
        boolean boolean18 = explicit13.isResolved();
        java.lang.String str19 = explicit13.toString();
        byte[] byteArray20 = explicit13.resolve();
        java.lang.String str21 = explicit13.toString();
        boolean boolean22 = explicit9.equals((java.lang.Object) str21);
        byte[] byteArray23 = explicit9.resolve();
        boolean boolean24 = illegal1.equals((java.lang.Object) byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str19, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str21, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean5 = explicit4.isResolved();
        java.lang.String str6 = explicit4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray14 = explicit13.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        boolean boolean14 = explicit3.isResolved();
        byte[] byteArray15 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("");
        java.lang.String str8 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        boolean boolean11 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.Object obj11 = null;
        boolean boolean12 = explicit3.equals(obj11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray44 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray41, classFileLocator45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str48 = noOp47.toString();
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator32, noOp34, classFileLocator46, noOp47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound51.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound51.locate("");
        boolean boolean56 = illegal21.equals((java.lang.Object) resolution55);
        boolean boolean57 = illegal1.equals((java.lang.Object) illegal21);
        boolean boolean58 = illegal21.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        java.lang.String str18 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str18, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        java.lang.String str14 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray14 = explicit13.resolve();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean20 = explicit18.equals((java.lang.Object) noOp19);
        java.lang.String str21 = noOp19.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp19.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp19.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp19.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution29 = noOp19.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        boolean boolean30 = explicit13.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertNotNull(resolution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray16);
        boolean boolean24 = explicit7.equals((java.lang.Object) byteArray16);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray51 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray48, classFileLocator52);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp54 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str55 = noOp54.toString();
        java.lang.String str56 = noOp54.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray57 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator39, noOp41, classFileLocator53, noOp54 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound58 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray57);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound58.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray61 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator28, compound58 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound62 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound63 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        java.lang.String str64 = compound63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound63);
        java.lang.String str66 = compound63.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution68 = compound63.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + noOp54 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp54.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray57);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(classFileLocatorArray61);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertNotNull(resolution68);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray30 = explicit29.resolve();
        boolean boolean31 = explicit29.isResolved();
        boolean boolean33 = explicit29.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = classFileLocator34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean37 = explicit29.equals((java.lang.Object) classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray14, classFileLocator39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean49 = explicit45.equals((java.lang.Object) 10L);
        boolean boolean50 = explicit45.isResolved();
        java.lang.String str51 = explicit45.toString();
        byte[] byteArray52 = explicit45.resolve();
        byte[] byteArray53 = explicit45.resolve();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray53, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        boolean boolean69 = illegal1.equals((java.lang.Object) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution71 = noOp63.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str51, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(resolution71);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        java.lang.String str17 = explicit5.toString();
        boolean boolean18 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray11 = explicit3.resolve();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        boolean boolean11 = explicit4.isResolved();
        boolean boolean12 = explicit4.isResolved();
        byte[] byteArray13 = explicit4.resolve();
        byte[] byteArray14 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean11 = explicit8.equals((java.lang.Object) (short) 0);
        boolean boolean12 = illegal1.equals((java.lang.Object) explicit8);
        java.lang.Class<?> wildcardClass13 = explicit8.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean44 = illegal43.isResolved();
        java.lang.String str45 = illegal43.toString();
        boolean boolean46 = illegal43.isResolved();
        boolean boolean47 = illegal43.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str50 = illegal49.toString();
        boolean boolean51 = illegal49.isResolved();
        boolean boolean52 = illegal43.equals((java.lang.Object) illegal49);
        boolean boolean53 = compound29.equals((java.lang.Object) illegal49);
        boolean boolean54 = illegal49.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray55 = illegal49.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str50, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray5 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp11 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean12 = explicit10.equals((java.lang.Object) noOp11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp11.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str17 = noOp11.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp11.locate("");
        boolean boolean20 = compound6.equals((java.lang.Object) noOp11);
        boolean boolean21 = illegal1.equals((java.lang.Object) compound6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp11 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp11.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        java.lang.String str7 = explicit5.toString();
        boolean boolean8 = explicit5.isResolved();
        java.lang.String str9 = explicit5.toString();
        byte[] byteArray10 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp16.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str26 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        java.lang.String str28 = noOp16.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray5 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp11 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean12 = explicit10.equals((java.lang.Object) noOp11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp11.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str17 = noOp11.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp11.locate("");
        boolean boolean20 = compound6.equals((java.lang.Object) noOp11);
        boolean boolean21 = illegal1.equals((java.lang.Object) compound6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound6.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = compound6.locate("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp11 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp11.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray46 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray46);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray43, classFileLocator47);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp49 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str50 = noOp49.toString();
        java.lang.String str51 = noOp49.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray52 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator34, noOp36, classFileLocator48, noOp49 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound53 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray52);
        boolean boolean55 = compound53.equals((java.lang.Object) "hi!");
        java.lang.String str56 = compound53.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) compound53);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = illegal1.equals((java.lang.Object) explicit59);
        boolean boolean62 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertTrue("'" + noOp49 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp49.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str50, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str51, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        boolean boolean4 = illegal1.isResolved();
        java.lang.Class<?> wildcardClass5 = illegal1.getClass();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp0.toString();
        java.lang.String str9 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str6 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str9 = noOp0.toString();
        java.lang.String str10 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        java.lang.String str13 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str16 = noOp9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str15 = noOp14.toString();
        java.lang.String str16 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str19 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str26 = noOp14.toString();
        java.lang.String str27 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution29 = noOp14.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean30 = explicit3.equals((java.lang.Object) noOp14);
        java.lang.String str31 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean7 = illegal6.isResolved();
        java.lang.String str8 = illegal6.toString();
        java.lang.String str9 = illegal6.toString();
        java.lang.String str10 = illegal6.toString();
        boolean boolean11 = illegal6.isResolved();
        boolean boolean12 = compound2.equals((java.lang.Object) illegal6);
        java.lang.String str13 = illegal6.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = illegal6.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray46 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray46);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray43, classFileLocator47);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp49 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str50 = noOp49.toString();
        java.lang.String str51 = noOp49.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray52 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator34, noOp36, classFileLocator48, noOp49 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound53 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray52);
        boolean boolean55 = compound53.equals((java.lang.Object) "hi!");
        java.lang.String str56 = compound53.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) compound53);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = illegal1.equals((java.lang.Object) explicit59);
        java.lang.String str62 = explicit59.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertTrue("'" + noOp49 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp49.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str50, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str51, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str62, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        java.lang.String str20 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate(".class");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        boolean boolean47 = illegal1.isResolved();
        boolean boolean48 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22, classFileLocator26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str29 = noOp28.toString();
        java.lang.String str30 = noOp28.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray31 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator13, noOp15, classFileLocator27, noOp28 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        boolean boolean34 = compound32.equals((java.lang.Object) "hi!");
        boolean boolean36 = compound32.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound32.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound32.locate("");
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit44 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean46 = explicit44.equals((java.lang.Object) noOp45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution48 = noOp45.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = noOp45.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str51 = noOp45.toString();
        java.lang.String str52 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = noOp45.locate("hi!");
        boolean boolean55 = compound32.equals((java.lang.Object) noOp45);
        boolean boolean56 = illegal1.equals((java.lang.Object) boolean55);
        boolean boolean57 = illegal1.isResolved();
        boolean boolean58 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(resolution48);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str51, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str52, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        java.lang.String str47 = illegal1.toString();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit58 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray57);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp59 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean60 = explicit58.equals((java.lang.Object) noOp59);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = noOp59.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = noOp59.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = noOp59.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray51, (net.bytebuddy.dynamic.ClassFileLocator) noOp59);
        boolean boolean68 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str47, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp59 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp59.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean10 = explicit9.isResolved();
        byte[] byteArray11 = explicit9.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = classFileLocator13.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str37 = compound29.toString();
        java.lang.String str38 = compound29.toString();
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        boolean boolean43 = explicit42.isResolved();
        byte[] byteArray44 = explicit42.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        boolean boolean46 = explicit45.isResolved();
        byte[] byteArray47 = explicit45.resolve();
        boolean boolean48 = compound29.equals((java.lang.Object) byteArray47);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(resolution50);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        java.lang.String str25 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp16.locate("");
        java.lang.String str28 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator29);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        boolean boolean21 = illegal1.equals((java.lang.Object) "");
        boolean boolean22 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean25 = illegal24.isResolved();
        boolean boolean26 = illegal24.isResolved();
        boolean boolean27 = illegal24.isResolved();
        boolean boolean28 = illegal1.equals((java.lang.Object) illegal24);
        java.lang.String str29 = illegal1.toString();
        boolean boolean30 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str29, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str37 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        java.lang.Class<?> wildcardClass12 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        java.lang.String str9 = noOp4.toString();
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("hi!");
        java.lang.String str15 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray55 = explicit54.resolve();
        java.lang.String str56 = explicit54.toString();
        boolean boolean57 = explicit54.isResolved();
        java.lang.Class<?> wildcardClass58 = explicit54.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str56, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp22 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp35 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str36 = noOp35.toString();
        java.lang.String str37 = noOp35.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator20, noOp22, classFileLocator34, noOp35 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound39.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound39.locate("");
        boolean boolean44 = illegal9.equals((java.lang.Object) resolution43);
        java.lang.String str45 = illegal9.toString();
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray48);
        boolean boolean50 = illegal9.equals((java.lang.Object) explicit49);
        boolean boolean51 = compound7.equals((java.lang.Object) explicit49);
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + noOp22 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp22.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertTrue("'" + noOp35 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp35.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str37, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean13 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean14 = explicit3.isResolved();
        byte[] byteArray15 = explicit3.resolve();
        boolean boolean16 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        byte[] byteArray15 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        boolean boolean19 = explicit12.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName=''}");
        byte[] byteArray20 = explicit12.resolve();
        java.lang.String str21 = explicit12.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str21, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        byte[] byteArray8 = explicit5.resolve();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray37 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator19, noOp21, classFileLocator33, noOp34 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray51);
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit58 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray57);
        byte[] byteArray59 = explicit58.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray59);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray71 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray71);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray68, classFileLocator72);
        byte[] byteArray76 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray76);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray68, classFileLocator77);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray59, classFileLocator77);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray51, classFileLocator79);
        boolean boolean81 = compound38.equals((java.lang.Object) byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator82 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit83 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray37);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(classFileLocator82);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        java.lang.String str10 = explicit5.toString();
        byte[] byteArray11 = explicit5.resolve();
        byte[] byteArray12 = explicit5.resolve();
        byte[] byteArray13 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        java.lang.String str10 = explicit3.toString();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        java.lang.Class<?> wildcardClass13 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        boolean boolean18 = illegal1.isResolved();
        java.lang.String str19 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str19, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray17 = explicit5.resolve();
        byte[] byteArray18 = explicit5.resolve();
        boolean boolean19 = explicit5.isResolved();
        boolean boolean20 = explicit5.isResolved();
        boolean boolean21 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray4 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        boolean boolean6 = compound2.equals((java.lang.Object) classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound9.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        java.lang.String str12 = compound9.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str12, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        byte[] byteArray1 = null;
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str36 = compound31.toString();
        java.lang.String str37 = compound31.toString();
        java.lang.String str38 = compound31.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray1, (net.bytebuddy.dynamic.ClassFileLocator) compound31);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocator39);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        boolean boolean14 = explicit3.isResolved();
        java.lang.String str15 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        byte[] byteArray1 = null;
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray1, (net.bytebuddy.dynamic.ClassFileLocator) compound31);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(classFileLocator42);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean9 = compound2.equals((java.lang.Object) boolean8);
        java.lang.String str10 = compound2.toString();
        java.lang.Object obj11 = null;
        boolean boolean12 = compound2.equals(obj11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = compound2.locate("");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str10, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp9.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str15 = noOp9.toString();
        java.lang.String str16 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp9.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean21 = explicit4.equals((java.lang.Object) noOp9);
        java.lang.String str22 = noOp9.toString();
        java.lang.String str23 = noOp9.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        java.lang.String str25 = explicit20.toString();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        boolean boolean29 = explicit5.equals((java.lang.Object) byteArray27);
        boolean boolean30 = explicit5.isResolved();
        java.lang.String str31 = explicit5.toString();
        boolean boolean32 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        java.lang.String str34 = compound29.toString();
        java.lang.String str35 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution37);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        boolean boolean21 = illegal1.equals((java.lang.Object) "");
        boolean boolean22 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean25 = illegal24.isResolved();
        boolean boolean26 = illegal24.isResolved();
        boolean boolean27 = illegal24.isResolved();
        boolean boolean28 = illegal1.equals((java.lang.Object) illegal24);
        boolean boolean29 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = explicit3.toString();
        boolean boolean7 = explicit3.isResolved();
        boolean boolean8 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.String str14 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        java.lang.String str46 = illegal1.toString();
        boolean boolean47 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str46, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound29.locate("");
        java.lang.String str56 = compound29.toString();
        java.lang.String str57 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        java.lang.String str6 = noOp0.toString();
        java.lang.String str7 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str7, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        boolean boolean21 = illegal1.equals((java.lang.Object) "");
        boolean boolean22 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean25 = illegal24.isResolved();
        boolean boolean26 = illegal24.isResolved();
        boolean boolean27 = illegal24.isResolved();
        boolean boolean28 = illegal1.equals((java.lang.Object) illegal24);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray37 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator19, noOp21, classFileLocator33, noOp34 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound38.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.Object obj45 = null;
        boolean boolean46 = compound38.equals(obj45);
        java.lang.String str47 = compound38.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution49 = compound38.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) compound38);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray37);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(resolution44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(resolution49);
        org.junit.Assert.assertNotNull(classFileLocator50);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str2 = illegal1.toString();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str25 = illegal1.toString();
        boolean boolean26 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit36 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit44 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray11, classFileLocator47);
        java.lang.Class<?> wildcardClass49 = classFileLocator48.getClass();
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray19 = explicit18.resolve();
        boolean boolean20 = explicit18.isResolved();
        boolean boolean22 = explicit18.equals((java.lang.Object) 10L);
        boolean boolean23 = explicit18.isResolved();
        boolean boolean24 = explicit18.isResolved();
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.Object obj15 = null;
        boolean boolean16 = explicit3.equals(obj15);
        java.lang.String str17 = explicit3.toString();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp22 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean23 = explicit21.equals((java.lang.Object) noOp22);
        java.lang.String str24 = explicit21.toString();
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit21);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp22 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp22.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str24, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate(".class");
        java.lang.String str7 = compound2.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str7, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        java.lang.String str2 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.String str15 = noOp4.toString();
        java.lang.String str16 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray18 = explicit6.resolve();
        java.lang.Class<?> wildcardClass19 = byteArray18.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        java.lang.String str43 = illegal1.toString();
        java.lang.String str44 = illegal1.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str43, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str44, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray10 = explicit9.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = classFileLocator10.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean13 = explicit5.equals((java.lang.Object) classFileLocator10);
        boolean boolean15 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray17 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray17, classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator20);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str9 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str9, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = noOp31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean36 = compound30.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str37 = compound30.toString();
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray43);
        boolean boolean45 = compound30.equals((java.lang.Object) byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray43);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classFileLocator46);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        java.lang.String str17 = explicit5.toString();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        boolean boolean26 = explicit21.isResolved();
        java.lang.String str27 = explicit21.toString();
        boolean boolean28 = explicit21.isResolved();
        boolean boolean29 = explicit21.isResolved();
        boolean boolean30 = explicit5.equals((java.lang.Object) boolean29);
        boolean boolean31 = explicit5.isResolved();
        byte[] byteArray32 = explicit5.resolve();
        java.lang.String str33 = explicit5.toString();
        boolean boolean34 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str33, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        boolean boolean11 = explicit3.isResolved();
        java.lang.String str12 = explicit3.toString();
        boolean boolean13 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        boolean boolean14 = explicit13.isResolved();
        java.lang.String str15 = explicit13.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        byte[] byteArray15 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean9 = compound2.equals((java.lang.Object) boolean8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound2.locate(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean44 = illegal43.isResolved();
        java.lang.String str45 = illegal43.toString();
        boolean boolean46 = illegal43.isResolved();
        boolean boolean47 = illegal43.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str50 = illegal49.toString();
        boolean boolean51 = illegal49.isResolved();
        boolean boolean52 = illegal43.equals((java.lang.Object) illegal49);
        boolean boolean53 = compound29.equals((java.lang.Object) illegal49);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray54 = illegal49.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str50, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str16 = noOp4.toString();
        java.lang.String str17 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp4.locate(".class");
        boolean boolean20 = resolution19.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        java.lang.String str14 = noOp4.toString();
        java.lang.Class<?> wildcardClass15 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound35.locate("");
        boolean boolean40 = explicit5.equals((java.lang.Object) compound35);
        java.lang.String str41 = compound35.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        boolean boolean43 = resolution42.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        java.lang.String str9 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit57 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean59 = explicit57.equals((java.lang.Object) noOp58);
        java.lang.String str60 = noOp58.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = noOp58.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = noOp58.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = noOp58.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean67 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.Class<?> wildcardClass68 = illegal1.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str60, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str3 = illegal2.toString();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        java.lang.String str12 = explicit7.toString();
        byte[] byteArray13 = explicit7.resolve();
        boolean boolean14 = illegal2.equals((java.lang.Object) byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        boolean boolean25 = explicit20.isResolved();
        boolean boolean26 = explicit20.isResolved();
        boolean boolean27 = explicit20.isResolved();
        java.lang.String str28 = explicit20.toString();
        boolean boolean30 = explicit20.equals((java.lang.Object) 0);
        boolean boolean31 = explicit20.isResolved();
        boolean boolean32 = explicit16.equals((java.lang.Object) explicit20);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str28, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str12 = noOp0.toString();
        java.lang.String str13 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp0.locate(".class");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution5);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        java.lang.String str5 = explicit3.toString();
        byte[] byteArray6 = explicit3.resolve();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray11 = explicit10.resolve();
        boolean boolean12 = explicit10.isResolved();
        boolean boolean14 = explicit10.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit10.isResolved();
        java.lang.String str16 = explicit10.toString();
        byte[] byteArray17 = explicit10.resolve();
        java.lang.String str18 = explicit10.toString();
        boolean boolean19 = explicit10.isResolved();
        byte[] byteArray20 = explicit10.resolve();
        boolean boolean21 = explicit3.equals((java.lang.Object) explicit10);
        boolean boolean22 = explicit10.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str18, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str16 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray11 = explicit3.resolve();
        byte[] byteArray12 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean5 = illegal4.isResolved();
        boolean boolean6 = illegal4.isResolved();
        java.lang.String str7 = illegal4.toString();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        boolean boolean14 = explicit11.equals((java.lang.Object) (short) 0);
        boolean boolean15 = illegal4.equals((java.lang.Object) explicit11);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray22);
        boolean boolean25 = explicit24.isResolved();
        byte[] byteArray26 = explicit24.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        boolean boolean28 = illegal4.equals((java.lang.Object) byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound34 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray26);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str7, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        byte[] byteArray14 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean19 = illegal18.isResolved();
        java.lang.String str20 = illegal18.toString();
        java.lang.String str21 = illegal18.toString();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit30 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray29);
        byte[] byteArray31 = explicit30.resolve();
        boolean boolean32 = explicit30.isResolved();
        boolean boolean34 = explicit30.equals((java.lang.Object) 10L);
        boolean boolean35 = explicit30.isResolved();
        java.lang.String str36 = explicit30.toString();
        byte[] byteArray37 = explicit30.resolve();
        java.lang.String str38 = explicit30.toString();
        boolean boolean39 = explicit26.equals((java.lang.Object) str38);
        byte[] byteArray40 = explicit26.resolve();
        boolean boolean41 = illegal18.equals((java.lang.Object) byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray14, classFileLocator42);
        java.lang.Class<?> wildcardClass44 = classFileLocator43.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str21, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str36, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str38, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        boolean boolean6 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = compound85.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution94 = compound85.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution96 = compound85.locate("hi!");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(resolution92);
        org.junit.Assert.assertNotNull(resolution94);
        org.junit.Assert.assertNotNull(resolution96);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.Object obj15 = null;
        boolean boolean16 = explicit3.equals(obj15);
        byte[] byteArray17 = explicit3.resolve();
        byte[] byteArray18 = explicit3.resolve();
        byte[] byteArray19 = explicit3.resolve();
        byte[] byteArray20 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str16 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean25 = illegal23.equals((java.lang.Object) classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray14, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean12 = resolution11.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray8);
        java.lang.Class<?> wildcardClass23 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str18 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        java.lang.String str18 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        java.lang.String str16 = illegal1.toString();
        boolean boolean17 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str16, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = resolution8.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean6 = explicit5.isResolved();
        byte[] byteArray7 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        boolean boolean21 = illegal1.equals((java.lang.Object) "");
        boolean boolean22 = illegal1.isResolved();
        boolean boolean23 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean9 = explicit8.isResolved();
        byte[] byteArray10 = explicit8.resolve();
        boolean boolean11 = illegal1.equals((java.lang.Object) explicit8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.String str15 = noOp4.toString();
        java.lang.String str16 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp4.locate("");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        java.lang.String str19 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp12.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.Class<?> wildcardClass22 = resolution21.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        boolean boolean8 = explicit7.isResolved();
        byte[] byteArray9 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp23 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str37 = noOp36.toString();
        java.lang.String str38 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator21, noOp23, classFileLocator35, noOp36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean42 = compound40.equals((java.lang.Object) "hi!");
        boolean boolean44 = compound40.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = compound40.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution48 = compound40.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound40.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}", byteArray9, (net.bytebuddy.dynamic.ClassFileLocator) compound40);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit63 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        byte[] byteArray64 = explicit63.resolve();
        boolean boolean65 = explicit63.isResolved();
        boolean boolean67 = explicit63.equals((java.lang.Object) 10L);
        boolean boolean68 = explicit63.isResolved();
        java.lang.String str69 = explicit63.toString();
        byte[] byteArray70 = explicit63.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp71 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str72 = noOp71.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = noOp71.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator75 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray70, (net.bytebuddy.dynamic.ClassFileLocator) noOp71);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray70);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray57, classFileLocator76);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray9, classFileLocator76);
        java.lang.Class<?> wildcardClass79 = classFileLocator78.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + noOp23 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp23.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str37, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(resolution46);
        org.junit.Assert.assertNotNull(resolution48);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str69, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp71 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp71.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertNotNull(classFileLocator75);
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        java.lang.String str17 = explicit5.toString();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        boolean boolean26 = explicit21.isResolved();
        java.lang.String str27 = explicit21.toString();
        boolean boolean28 = explicit21.isResolved();
        boolean boolean29 = explicit21.isResolved();
        boolean boolean30 = explicit5.equals((java.lang.Object) boolean29);
        byte[] byteArray31 = explicit5.resolve();
        byte[] byteArray32 = explicit5.resolve();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        boolean boolean14 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        byte[] byteArray14 = explicit5.resolve();
        boolean boolean15 = explicit5.isResolved();
        byte[] byteArray16 = explicit5.resolve();
        boolean boolean17 = illegal1.equals((java.lang.Object) byteArray16);
        boolean boolean18 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean11 = explicit8.equals((java.lang.Object) (short) 0);
        boolean boolean12 = illegal1.equals((java.lang.Object) explicit8);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray19 = explicit18.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        boolean boolean22 = explicit21.isResolved();
        byte[] byteArray23 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        boolean boolean25 = illegal1.equals((java.lang.Object) byteArray23);
        boolean boolean26 = illegal1.isResolved();
        boolean boolean27 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp11 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean12 = explicit10.equals((java.lang.Object) noOp11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp11.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp11);
        java.lang.String str20 = noOp11.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp11.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp11.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp11 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp11.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator6, compound36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound42 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean43 = illegal1.equals((java.lang.Object) compound42);
        boolean boolean44 = illegal1.isResolved();
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray47);
        byte[] byteArray49 = explicit48.resolve();
        boolean boolean50 = explicit48.isResolved();
        boolean boolean52 = explicit48.equals((java.lang.Object) 10L);
        boolean boolean54 = explicit48.equals((java.lang.Object) (byte) 100);
        boolean boolean55 = explicit48.isResolved();
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        java.lang.String str61 = explicit59.toString();
        boolean boolean62 = explicit59.isResolved();
        java.lang.String str63 = explicit59.toString();
        java.lang.String str64 = explicit59.toString();
        java.lang.String str65 = explicit59.toString();
        byte[] byteArray66 = explicit59.resolve();
        byte[] byteArray67 = explicit59.resolve();
        boolean boolean68 = explicit48.equals((java.lang.Object) byteArray67);
        byte[] byteArray69 = explicit48.resolve();
        boolean boolean70 = illegal1.equals((java.lang.Object) byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray71 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Compound{classFileLocator=[]}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str61, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str63, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str64, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str65, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp7 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean8 = explicit6.equals((java.lang.Object) noOp7);
        boolean boolean9 = illegal1.equals((java.lang.Object) explicit6);
        byte[] byteArray10 = explicit6.resolve();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp7 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp7.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray19);
        boolean boolean27 = explicit4.equals((java.lang.Object) ".class");
        byte[] byteArray28 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = noOp34.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = noOp34.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp34.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = noOp34.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.String str45 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(resolution44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator46);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean9 = compound2.equals((java.lang.Object) boolean8);
        java.lang.String str10 = compound2.toString();
        java.lang.Object obj11 = null;
        boolean boolean12 = compound2.equals(obj11);
        java.lang.String str13 = compound2.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str10, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str13, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str34 = compound31.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        byte[] byteArray42 = explicit41.resolve();
        java.lang.String str43 = explicit41.toString();
        boolean boolean44 = explicit41.isResolved();
        java.lang.String str45 = explicit41.toString();
        byte[] byteArray46 = explicit41.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray46);
        boolean boolean48 = compound31.equals((java.lang.Object) byteArray46);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray54);
        byte[] byteArray56 = explicit55.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray56);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit63 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean65 = explicit63.equals((java.lang.Object) noOp64);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution67 = noOp64.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution69 = noOp64.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str70 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution72 = noOp64.locate("");
        boolean boolean73 = compound59.equals((java.lang.Object) noOp64);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator74 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray56, (net.bytebuddy.dynamic.ClassFileLocator) noOp64);
        java.lang.String str75 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution77 = noOp64.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray46, (net.bytebuddy.dynamic.ClassFileLocator) noOp64);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}", byteArray46);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str43, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str45, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(resolution67);
        org.junit.Assert.assertNotNull(resolution69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str70, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classFileLocator74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str75, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution77);
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(classFileLocator79);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray11 = explicit3.resolve();
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        boolean boolean14 = explicit3.equals((java.lang.Object) wildcardClass13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        byte[] byteArray14 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean19 = illegal18.isResolved();
        java.lang.String str20 = illegal18.toString();
        java.lang.String str21 = illegal18.toString();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit30 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray29);
        byte[] byteArray31 = explicit30.resolve();
        boolean boolean32 = explicit30.isResolved();
        boolean boolean34 = explicit30.equals((java.lang.Object) 10L);
        boolean boolean35 = explicit30.isResolved();
        java.lang.String str36 = explicit30.toString();
        byte[] byteArray37 = explicit30.resolve();
        java.lang.String str38 = explicit30.toString();
        boolean boolean39 = explicit26.equals((java.lang.Object) str38);
        byte[] byteArray40 = explicit26.resolve();
        boolean boolean41 = illegal18.equals((java.lang.Object) byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray14, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = classFileLocator42.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str21, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str36, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str38, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(resolution45);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str25 = illegal1.toString();
        boolean boolean26 = illegal1.isResolved();
        boolean boolean27 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str2 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = compound1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str2, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(resolution8);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str12 = noOp0.toString();
        java.lang.String str13 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp0.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        java.lang.String str6 = illegal1.toString();
        java.lang.String str7 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str7, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        java.lang.String str20 = illegal1.toString();
        boolean boolean21 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        byte[] byteArray11 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        java.lang.Class<?> wildcardClass54 = explicit53.getClass();
        boolean boolean55 = compound12.equals((java.lang.Object) wildcardClass54);
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        boolean boolean37 = compound35.equals((java.lang.Object) "hi!");
        java.lang.String str38 = compound35.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray41 = explicit40.resolve();
        boolean boolean42 = explicit40.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray11, classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) byteArray15);
        boolean boolean17 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        byte[] byteArray5 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str8 = illegal7.toString();
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray13 = explicit12.resolve();
        boolean boolean14 = explicit12.isResolved();
        boolean boolean16 = explicit12.equals((java.lang.Object) 10L);
        java.lang.String str17 = explicit12.toString();
        byte[] byteArray18 = explicit12.resolve();
        boolean boolean19 = illegal7.equals((java.lang.Object) byteArray18);
        java.lang.String str20 = illegal7.toString();
        java.lang.String str21 = illegal7.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = classFileLocator22.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean25 = illegal7.equals((java.lang.Object) resolution24);
        boolean boolean26 = explicit3.equals((java.lang.Object) resolution24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str21, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate(".class");
        boolean boolean14 = resolution13.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        boolean boolean35 = compound33.equals((java.lang.Object) "hi!");
        boolean boolean37 = compound33.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound33.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit50 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp51 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean52 = explicit50.equals((java.lang.Object) noOp51);
        java.lang.String str53 = noOp51.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray45, (net.bytebuddy.dynamic.ClassFileLocator) noOp51);
        boolean boolean55 = compound33.equals((java.lang.Object) byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution57 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution59 = compound33.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution61 = compound33.locate("");
        boolean boolean62 = illegal1.equals((java.lang.Object) "");
        java.lang.String str63 = illegal1.toString();
        boolean boolean64 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp51 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp51.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str53, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(resolution57);
        org.junit.Assert.assertNotNull(resolution59);
        org.junit.Assert.assertNotNull(resolution61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str63, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = compound85.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution94 = compound85.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution96 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(resolution92);
        org.junit.Assert.assertNotNull(resolution94);
        org.junit.Assert.assertNotNull(resolution96);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp7 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str8 = noOp7.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp7.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp7.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp7.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean15 = explicit3.equals((java.lang.Object) resolution14);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = resolution14.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + noOp7 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp7.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = resolution36.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        boolean boolean13 = explicit12.isResolved();
        boolean boolean14 = explicit12.isResolved();
        boolean boolean15 = explicit12.isResolved();
        boolean boolean16 = explicit12.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        boolean boolean18 = illegal1.isResolved();
        java.lang.String str19 = illegal1.toString();
        boolean boolean20 = illegal1.isResolved();
        java.lang.String str21 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str19, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str21, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp17 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean18 = explicit16.equals((java.lang.Object) noOp17);
        java.lang.String str19 = noOp17.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp17);
        java.lang.String str21 = noOp17.toString();
        java.lang.String str22 = noOp17.toString();
        boolean boolean23 = explicit3.equals((java.lang.Object) str22);
        byte[] byteArray24 = explicit3.resolve();
        boolean boolean25 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp17 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp17.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        boolean boolean26 = explicit24.isResolved();
        boolean boolean28 = explicit24.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = classFileLocator29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean32 = explicit24.equals((java.lang.Object) classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit34 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        java.lang.Class<?> wildcardClass35 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str5 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str8 = noOp4.toString();
        boolean boolean9 = illegal1.equals((java.lang.Object) str8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray12);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray12, classFileLocator30);
        boolean boolean33 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str34 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str34, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean6 = illegal1.equals((java.lang.Object) 0);
        boolean boolean7 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        boolean boolean7 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray15);
        boolean boolean23 = explicit6.equals((java.lang.Object) byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        boolean boolean20 = explicit19.isResolved();
        byte[] byteArray21 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray21);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(classFileLocator22);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        byte[] byteArray8 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean12 = illegal10.equals((java.lang.Object) classFileLocator11);
        java.lang.String str13 = illegal10.toString();
        boolean boolean14 = illegal10.isResolved();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22, classFileLocator26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str42 = noOp41.toString();
        java.lang.String str43 = noOp41.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray44 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator26, noOp28, classFileLocator40, noOp41 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound45 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray44);
        boolean boolean47 = compound45.equals((java.lang.Object) "hi!");
        boolean boolean49 = compound45.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution51 = compound45.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound45.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        boolean boolean67 = compound45.equals((java.lang.Object) byteArray57);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray57);
        boolean boolean69 = illegal10.equals((java.lang.Object) byteArray57);
        boolean boolean70 = explicit3.equals((java.lang.Object) illegal10);
        boolean boolean71 = illegal10.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(resolution51);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray14 = explicit13.resolve();
        byte[] byteArray15 = explicit13.resolve();
        boolean boolean16 = explicit13.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.Object obj15 = null;
        boolean boolean16 = explicit3.equals(obj15);
        byte[] byteArray17 = explicit3.resolve();
        byte[] byteArray18 = explicit3.resolve();
        byte[] byteArray19 = explicit3.resolve();
        java.lang.String str20 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str20, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray8);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray37 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray34, classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp40 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str41 = noOp40.toString();
        java.lang.String str42 = noOp40.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray43 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator25, noOp27, classFileLocator39, noOp40 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound44 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray43);
        boolean boolean46 = compound44.equals((java.lang.Object) "hi!");
        boolean boolean48 = compound44.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound44.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound44.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray56 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray56);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit61 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray60);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp62 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean63 = explicit61.equals((java.lang.Object) noOp62);
        java.lang.String str64 = noOp62.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray56, (net.bytebuddy.dynamic.ClassFileLocator) noOp62);
        boolean boolean66 = compound44.equals((java.lang.Object) byteArray56);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution68 = compound44.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = compound44.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound44);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal73 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str74 = illegal73.toString();
        boolean boolean75 = compound44.equals((java.lang.Object) illegal73);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray76 = illegal73.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + noOp40 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp40.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp62 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp62.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str64, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(resolution68);
        org.junit.Assert.assertNotNull(resolution70);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str74, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray6 = explicit5.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.lang.ClassLoader classLoader0 = null;
        java.security.AccessControlContext accessControlContext1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0, accessControlContext1);
        java.lang.ClassLoader classLoader3 = classLoadingDelegate2.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = classLoadingDelegate2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassNotFoundException; message: ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        } catch (java.lang.ClassNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
        org.junit.Assert.assertNotNull(classLoader3);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        boolean boolean11 = explicit4.isResolved();
        boolean boolean12 = explicit4.isResolved();
        byte[] byteArray13 = explicit4.resolve();
        byte[] byteArray14 = explicit4.resolve();
        byte[] byteArray15 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str16 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray23 = explicit22.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray23);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        java.lang.String str14 = noOp4.toString();
        java.lang.String str15 = noOp4.toString();
        java.lang.String str16 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound29.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution57 = compound29.locate("");
        java.lang.Class<?> wildcardClass58 = resolution57.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertNotNull(resolution57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        java.lang.Class<?> wildcardClass21 = explicit19.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean4 = illegal1.equals((java.lang.Object) 100);
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str14 = noOp13.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp13.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) noOp13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean22 = illegal21.isResolved();
        java.lang.String str23 = illegal21.toString();
        boolean boolean24 = illegal21.isResolved();
        boolean boolean25 = illegal21.isResolved();
        boolean boolean26 = illegal21.isResolved();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean37 = explicit35.equals((java.lang.Object) noOp36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp36.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = noOp36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str42 = noOp36.toString();
        java.lang.String str43 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = noOp36.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = noOp36.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean48 = explicit31.equals((java.lang.Object) noOp36);
        boolean boolean49 = illegal21.equals((java.lang.Object) noOp36);
        boolean boolean50 = explicit19.equals((java.lang.Object) boolean49);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str23, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(resolution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate(".class");
        java.lang.String str9 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray18 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray20 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound21 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound22 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = compound23.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = compound23.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str28 = compound23.toString();
        boolean boolean29 = explicit19.equals((java.lang.Object) str28);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray20);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str28, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        boolean boolean44 = explicit42.isResolved();
        boolean boolean46 = explicit42.equals((java.lang.Object) 10L);
        byte[] byteArray47 = explicit42.resolve();
        boolean boolean48 = compound29.equals((java.lang.Object) byteArray47);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound39.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = resolution41.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9);
        java.lang.Class<?> wildcardClass18 = classFileLocator17.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str34 = compound31.toString();
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit39 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        byte[] byteArray40 = explicit39.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        boolean boolean43 = compound31.equals((java.lang.Object) byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray40);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator42);
        boolean boolean44 = illegal1.equals((java.lang.Object) classFileLocator42);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        boolean boolean37 = compound35.equals((java.lang.Object) "hi!");
        java.lang.String str38 = compound35.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        boolean boolean41 = explicit40.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        java.lang.String str12 = explicit4.toString();
        boolean boolean13 = explicit4.isResolved();
        java.lang.String str14 = explicit4.toString();
        boolean boolean15 = explicit4.isResolved();
        byte[] byteArray16 = explicit4.resolve();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str43 = noOp42.toString();
        java.lang.String str44 = noOp42.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray45 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator27, noOp29, classFileLocator41, noOp42 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound46 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray45);
        boolean boolean48 = compound46.equals((java.lang.Object) "hi!");
        boolean boolean50 = compound46.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound46.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = compound46.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray58 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray58);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit63 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean65 = explicit63.equals((java.lang.Object) noOp64);
        java.lang.String str66 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray58, (net.bytebuddy.dynamic.ClassFileLocator) noOp64);
        boolean boolean68 = compound46.equals((java.lang.Object) byteArray58);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit72 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray71);
        byte[] byteArray73 = explicit72.resolve();
        boolean boolean74 = explicit72.isResolved();
        boolean boolean76 = explicit72.equals((java.lang.Object) 10L);
        boolean boolean77 = explicit72.isResolved();
        boolean boolean78 = explicit72.isResolved();
        boolean boolean79 = explicit72.isResolved();
        java.lang.String str80 = explicit72.toString();
        boolean boolean82 = explicit72.equals((java.lang.Object) 0);
        boolean boolean83 = compound46.equals((java.lang.Object) 0);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit87 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray86);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp88 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean89 = explicit87.equals((java.lang.Object) noOp88);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution91 = noOp88.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution93 = noOp88.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = noOp88.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean96 = compound46.equals((java.lang.Object) noOp88);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator97 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound46);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str44, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str80, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp88 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp88.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(resolution91);
        org.junit.Assert.assertNotNull(resolution93);
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(classFileLocator97);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        byte[] byteArray5 = explicit3.resolve();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean11 = explicit9.isResolved();
        boolean boolean13 = explicit9.equals((java.lang.Object) 10L);
        boolean boolean14 = explicit9.isResolved();
        boolean boolean15 = explicit9.isResolved();
        boolean boolean16 = explicit9.isResolved();
        byte[] byteArray17 = explicit9.resolve();
        boolean boolean18 = explicit3.equals((java.lang.Object) explicit9);
        byte[] byteArray19 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        boolean boolean2 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str37 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray8);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound39.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = simple1.equals((java.lang.Object) classFileLocator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        java.lang.String str6 = illegal1.toString();
        java.lang.String str7 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str7, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean10 = explicit9.isResolved();
        byte[] byteArray11 = explicit9.resolve();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, -1, 1, -1, 0, 100]");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        java.lang.String str6 = explicit3.toString();
        boolean boolean7 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str20 = illegal19.toString();
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        boolean boolean26 = explicit24.isResolved();
        boolean boolean28 = explicit24.equals((java.lang.Object) 10L);
        java.lang.String str29 = explicit24.toString();
        byte[] byteArray30 = explicit24.resolve();
        boolean boolean31 = illegal19.equals((java.lang.Object) byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        boolean boolean33 = illegal1.equals((java.lang.Object) "hi!");
        boolean boolean34 = illegal1.isResolved();
        boolean boolean35 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str29, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        java.lang.String str10 = explicit9.toString();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit24);
        byte[] byteArray26 = explicit24.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        java.lang.String str52 = explicit46.toString();
        boolean boolean53 = explicit46.isResolved();
        byte[] byteArray54 = explicit46.resolve();
        boolean boolean55 = compound29.equals((java.lang.Object) explicit46);
        boolean boolean56 = explicit46.isResolved();
        byte[] byteArray57 = explicit46.resolve();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str52, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100]");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = explicit3.toString();
        boolean boolean7 = explicit3.isResolved();
        byte[] byteArray8 = explicit3.resolve();
        byte[] byteArray9 = explicit3.resolve();
        boolean boolean10 = explicit3.isResolved();
        java.lang.Class<?> wildcardClass11 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean57 = compound48.equals((java.lang.Object) 0.0f);
        java.lang.String str58 = compound48.toString();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean9 = explicit8.isResolved();
        byte[] byteArray10 = explicit8.resolve();
        boolean boolean11 = illegal1.equals((java.lang.Object) explicit8);
        boolean boolean12 = explicit8.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str37 = compound29.toString();
        java.lang.String str38 = compound29.toString();
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        boolean boolean43 = explicit42.isResolved();
        byte[] byteArray44 = explicit42.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        boolean boolean46 = explicit45.isResolved();
        byte[] byteArray47 = explicit45.resolve();
        boolean boolean48 = compound29.equals((java.lang.Object) byteArray47);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        byte[] byteArray54 = explicit53.resolve();
        java.lang.String str55 = explicit53.toString();
        boolean boolean56 = explicit53.isResolved();
        java.lang.String str57 = explicit53.toString();
        byte[] byteArray58 = explicit53.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray58);
        boolean boolean60 = compound29.equals((java.lang.Object) byteArray58);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str55, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str57, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp34.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str40 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp34.locate("");
        boolean boolean43 = compound29.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray51, classFileLocator55);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp57 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray67 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray64, classFileLocator68);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp70 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str71 = noOp70.toString();
        java.lang.String str72 = noOp70.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray73 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator55, noOp57, classFileLocator69, noOp70 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound74 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray73);
        boolean boolean76 = compound74.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) compound74);
        boolean boolean78 = explicit4.equals((java.lang.Object) classFileLocator77);
        byte[] byteArray79 = explicit4.resolve();
        byte[] byteArray80 = explicit4.resolve();
        java.lang.String str81 = explicit4.toString();
        byte[] byteArray82 = explicit4.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertTrue("'" + noOp57 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp57.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertTrue("'" + noOp70 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp70.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str71, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str81, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("hi!");
        java.lang.String str14 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp12.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp12.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp12.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertNotNull(resolution26);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean9 = compound2.equals((java.lang.Object) boolean8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound2.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = compound2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        java.lang.String str43 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray44 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str43, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound42 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray55 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray68 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray65, classFileLocator69);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp71 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str72 = noOp71.toString();
        java.lang.String str73 = noOp71.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray74 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator56, noOp58, classFileLocator70, noOp71 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound75 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray74);
        boolean boolean77 = compound75.equals((java.lang.Object) "hi!");
        boolean boolean79 = compound75.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution81 = compound75.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution83 = compound75.locate("");
        boolean boolean84 = illegal45.equals((java.lang.Object) "");
        java.lang.String str85 = illegal45.toString();
        boolean boolean86 = compound43.equals((java.lang.Object) str85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution88 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str89 = compound43.toString();
        java.lang.Object obj90 = null;
        boolean boolean91 = compound43.equals(obj90);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertTrue("'" + noOp71 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp71.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str73, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(resolution81);
        org.junit.Assert.assertNotNull(resolution83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str85, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(resolution88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit32 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray55 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str59 = noOp58.toString();
        java.lang.String str60 = noOp58.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray61 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator43, noOp45, classFileLocator57, noOp58 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound62 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        boolean boolean64 = compound62.equals((java.lang.Object) "hi!");
        java.lang.String str65 = compound62.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, (net.bytebuddy.dynamic.ClassFileLocator) compound62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound62);
        boolean boolean68 = explicit6.equals((java.lang.Object) "hi!");
        boolean boolean69 = illegal1.equals((java.lang.Object) explicit6);
        boolean boolean70 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str59, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str60, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit36 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        boolean boolean44 = explicit42.isResolved();
        boolean boolean46 = explicit42.equals((java.lang.Object) 10L);
        boolean boolean47 = explicit42.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound50.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean53 = explicit42.equals((java.lang.Object) compound50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) compound50);
        java.lang.String str55 = compound50.toString();
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str55, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        boolean boolean27 = explicit25.isResolved();
        boolean boolean29 = explicit25.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = classFileLocator30.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean33 = explicit25.equals((java.lang.Object) classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10, classFileLocator35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray46 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator35, classFileLocator45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound47 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray46);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution49 = compound47.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocatorArray46);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        byte[] byteArray5 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean7 = explicit6.isResolved();
        byte[] byteArray8 = explicit6.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator42);
        boolean boolean44 = illegal1.equals((java.lang.Object) classFileLocator42);
        java.lang.String str45 = illegal1.toString();
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        boolean boolean11 = explicit5.isResolved();
        boolean boolean12 = explicit5.isResolved();
        byte[] byteArray13 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        boolean boolean16 = explicit15.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        byte[] byteArray15 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        boolean boolean18 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        java.lang.String str25 = explicit20.toString();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        boolean boolean29 = explicit5.equals((java.lang.Object) byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str56 = noOp55.toString();
        java.lang.String str57 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator40, noOp42, classFileLocator54, noOp55 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp60 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str61 = noOp60.toString();
        java.lang.String str62 = noOp60.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = noOp60.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean65 = compound59.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal67 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean68 = compound59.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = compound59.locate("");
        boolean boolean71 = explicit5.equals((java.lang.Object) compound59);
        boolean boolean72 = explicit5.isResolved();
        byte[] byteArray73 = explicit5.resolve();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertTrue("'" + noOp60 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp60.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str61, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(resolution70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 100]");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        java.lang.String str12 = explicit4.toString();
        boolean boolean13 = explicit4.isResolved();
        java.lang.String str14 = explicit4.toString();
        boolean boolean15 = explicit4.isResolved();
        byte[] byteArray16 = explicit4.resolve();
        byte[] byteArray17 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str25 = illegal1.toString();
        java.lang.String str26 = illegal1.toString();
        boolean boolean27 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str26, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray13 = explicit12.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = classFileLocator5.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean8 = illegal1.equals((java.lang.Object) resolution7);
        java.lang.String str9 = illegal1.toString();
        java.lang.String str10 = illegal1.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        boolean boolean41 = compound37.equals((java.lang.Object) classFileLocatorArray38);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray51 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray48, classFileLocator52);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp54 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray64 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray64);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray61, classFileLocator65);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp67 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str68 = noOp67.toString();
        java.lang.String str69 = noOp67.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray70 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator52, noOp54, classFileLocator66, noOp67 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound71 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray70);
        boolean boolean73 = compound71.equals((java.lang.Object) "hi!");
        boolean boolean75 = compound71.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution77 = compound71.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution79 = compound71.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray83 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray83);
        byte[] byteArray87 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit88 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray87);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp89 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean90 = explicit88.equals((java.lang.Object) noOp89);
        java.lang.String str91 = noOp89.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator92 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray83, (net.bytebuddy.dynamic.ClassFileLocator) noOp89);
        boolean boolean93 = compound71.equals((java.lang.Object) byteArray83);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = compound71.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str96 = compound71.toString();
        boolean boolean97 = compound37.equals((java.lang.Object) str96);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + noOp54 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp54.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertTrue("'" + noOp67 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp67.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str69, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(resolution77);
        org.junit.Assert.assertNotNull(resolution79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp89 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp89.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str91, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = resolution14.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        java.lang.Class<?> wildcardClass16 = byteArray15.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("");
        java.lang.Class<?> wildcardClass35 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray11 = explicit3.resolve();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        java.lang.Class<?> wildcardClass14 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str16 = noOp4.toString();
        java.lang.String str17 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp4.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        boolean boolean15 = explicit6.isResolved();
        boolean boolean16 = illegal2.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        java.lang.String str26 = explicit21.toString();
        java.lang.String str27 = explicit21.toString();
        byte[] byteArray28 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        boolean boolean30 = explicit6.equals((java.lang.Object) byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray31 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) compound32);
        java.lang.String str36 = compound32.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str39 = compound32.toString();
        java.lang.Class<?> wildcardClass40 = compound32.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str36, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str39, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str33 = compound30.toString();
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray37);
        byte[] byteArray39 = explicit38.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        boolean boolean42 = compound30.equals((java.lang.Object) byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray39);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classFileLocator43);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        java.lang.String str11 = illegal1.toString();
        boolean boolean12 = illegal1.isResolved();
        boolean boolean13 = illegal1.isResolved();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24, classFileLocator28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray40 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray37, classFileLocator41);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp43 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str44 = noOp43.toString();
        java.lang.String str45 = noOp43.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray46 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator28, noOp30, classFileLocator42, noOp43 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound47 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray46);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution49 = compound47.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, compound47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound52 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound53 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        boolean boolean54 = illegal1.equals((java.lang.Object) compound53);
        boolean boolean55 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertTrue("'" + noOp43 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp43.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str44, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray46);
        org.junit.Assert.assertNotNull(resolution49);
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        java.lang.String str5 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit32 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray30);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray55 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str59 = noOp58.toString();
        java.lang.String str60 = noOp58.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray61 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator43, noOp45, classFileLocator57, noOp58 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound62 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray61);
        boolean boolean64 = compound62.equals((java.lang.Object) "hi!");
        java.lang.String str65 = compound62.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, (net.bytebuddy.dynamic.ClassFileLocator) compound62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound62);
        boolean boolean68 = explicit6.equals((java.lang.Object) "hi!");
        boolean boolean69 = illegal1.equals((java.lang.Object) explicit6);
        byte[] byteArray70 = explicit6.resolve();
        boolean boolean71 = explicit6.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str59, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str60, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str4 = illegal3.toString();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        java.lang.String str13 = explicit8.toString();
        byte[] byteArray14 = explicit8.resolve();
        boolean boolean15 = illegal3.equals((java.lang.Object) byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray43 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str47 = noOp46.toString();
        java.lang.String str48 = noOp46.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray49 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator31, noOp33, classFileLocator45, noOp46 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound50.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray53 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator20, compound50 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound54 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) compound54);
        java.lang.String str56 = compound54.toString();
        java.lang.String str57 = compound54.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution59 = compound54.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray49);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(classFileLocatorArray53);
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(resolution59);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        java.lang.String str17 = explicit5.toString();
        byte[] byteArray18 = explicit5.resolve();
        byte[] byteArray19 = explicit5.resolve();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean38 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str39 = compound29.toString();
        java.lang.String str40 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        byte[] byteArray5 = explicit3.resolve();
        boolean boolean6 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str27 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution29 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution29);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) byteArray15);
        boolean boolean17 = illegal1.isResolved();
        java.lang.String str18 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str18, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean4 = illegal3.isResolved();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray30);
        byte[] byteArray32 = explicit31.resolve();
        boolean boolean33 = explicit31.isResolved();
        boolean boolean35 = explicit31.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = classFileLocator36.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean39 = explicit31.equals((java.lang.Object) classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16, classFileLocator41);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray48 = explicit47.resolve();
        boolean boolean49 = explicit47.isResolved();
        boolean boolean51 = explicit47.equals((java.lang.Object) 10L);
        boolean boolean52 = explicit47.isResolved();
        java.lang.String str53 = explicit47.toString();
        byte[] byteArray54 = explicit47.resolve();
        byte[] byteArray55 = explicit47.resolve();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray59);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit64 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp65 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean66 = explicit64.equals((java.lang.Object) noOp65);
        java.lang.String str67 = noOp65.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray59, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray55, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        boolean boolean71 = illegal3.equals((java.lang.Object) noOp65);
        java.lang.String str72 = noOp65.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}", byteArray1, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str53, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp65 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp65.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator73);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        boolean boolean54 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        boolean boolean41 = compound37.equals((java.lang.Object) classFileLocatorArray38);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean48 = explicit45.isResolved();
        java.lang.String str49 = explicit45.toString();
        byte[] byteArray50 = explicit45.resolve();
        boolean boolean51 = compound37.equals((java.lang.Object) byteArray50);
        java.lang.Class<?> wildcardClass52 = compound37.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str49, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit8.isResolved();
        boolean boolean18 = illegal4.equals((java.lang.Object) explicit8);
        boolean boolean19 = explicit8.isResolved();
        byte[] byteArray20 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray20);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        boolean boolean11 = resolution10.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp5 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean6 = explicit4.equals((java.lang.Object) noOp5);
        java.lang.String str7 = explicit4.toString();
        boolean boolean8 = explicit4.isResolved();
        byte[] byteArray9 = explicit4.resolve();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp22 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp35 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str36 = noOp35.toString();
        java.lang.String str37 = noOp35.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator20, noOp22, classFileLocator34, noOp35 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound39.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, (net.bytebuddy.dynamic.ClassFileLocator) compound39);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray47);
        byte[] byteArray49 = explicit48.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit51 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray49);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray61 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray58, classFileLocator62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray74 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator75 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray74);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray71, classFileLocator75);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp77 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str78 = noOp77.toString();
        java.lang.String str79 = noOp77.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray80 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator62, noOp64, classFileLocator76, noOp77 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound81 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray80);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution83 = compound81.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str84 = compound81.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution86 = compound81.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator87 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray49, (net.bytebuddy.dynamic.ClassFileLocator) compound81);
        boolean boolean88 = compound39.equals((java.lang.Object) byteArray49);
        java.lang.Class<?> wildcardClass89 = compound39.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp5 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp5.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + noOp22 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp22.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertTrue("'" + noOp35 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp35.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str37, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator75);
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertTrue("'" + noOp77 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp77.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str78, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str79, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray80);
        org.junit.Assert.assertNotNull(resolution83);
        org.junit.Assert.assertNotNull(resolution86);
        org.junit.Assert.assertNotNull(classFileLocator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str25 = illegal1.toString();
        boolean boolean26 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray2 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean11 = compound4.equals((java.lang.Object) boolean10);
        boolean boolean12 = illegal1.equals((java.lang.Object) compound4);
        java.lang.String str13 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        boolean boolean38 = compound36.equals((java.lang.Object) "hi!");
        java.lang.String str39 = compound36.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray4, (net.bytebuddy.dynamic.ClassFileLocator) compound36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray43 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = classFileLocator44.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}", byteArray4, classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(resolution46);
        org.junit.Assert.assertNotNull(classFileLocator47);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        java.lang.String str34 = compound31.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean37 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str38 = illegal1.toString();
        java.lang.String str39 = illegal1.toString();
        boolean boolean40 = illegal1.isResolved();
        boolean boolean41 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str38, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str39, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = explicit3.toString();
        boolean boolean7 = explicit3.isResolved();
        byte[] byteArray8 = explicit3.resolve();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        java.lang.String str16 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        boolean boolean14 = explicit13.isResolved();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray30);
        boolean boolean38 = explicit21.equals((java.lang.Object) byteArray30);
        byte[] byteArray39 = explicit21.resolve();
        boolean boolean40 = explicit13.equals((java.lang.Object) byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classFileLocator43);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray19);
        boolean boolean27 = explicit4.equals((java.lang.Object) ".class");
        byte[] byteArray28 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        boolean boolean13 = explicit12.isResolved();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray29);
        boolean boolean37 = explicit20.equals((java.lang.Object) byteArray29);
        byte[] byteArray38 = explicit20.resolve();
        boolean boolean39 = explicit12.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean43 = explicit42.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        byte[] byteArray11 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray25);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray30);
        byte[] byteArray32 = explicit31.resolve();
        boolean boolean33 = explicit31.isResolved();
        boolean boolean35 = explicit31.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = classFileLocator36.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean39 = explicit31.equals((java.lang.Object) classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = classFileLocator36.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        boolean boolean42 = explicit27.equals((java.lang.Object) resolution41);
        byte[] byteArray43 = explicit27.resolve();
        boolean boolean44 = illegal1.equals((java.lang.Object) byteArray43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        byte[] byteArray15 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        java.lang.String str26 = explicit21.toString();
        java.lang.String str27 = explicit21.toString();
        byte[] byteArray28 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean37 = explicit35.equals((java.lang.Object) noOp36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp36.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = noOp36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str42 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = noOp36.locate("");
        boolean boolean45 = compound31.equals((java.lang.Object) noOp36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) noOp36);
        java.lang.String str47 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) noOp36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit50 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str42, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator48);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        java.lang.Class<?> wildcardClass31 = noOp29.getClass();
        boolean boolean32 = illegal1.equals((java.lang.Object) wildcardClass31);
        java.lang.String str33 = illegal1.toString();
        java.lang.String str34 = illegal1.toString();
        boolean boolean35 = illegal1.isResolved();
        java.lang.String str36 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str33, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str34, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str36, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        java.lang.Class<?> wildcardClass20 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        java.lang.String str13 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean16 = resolution15.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound39.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str42 = compound39.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = compound39.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution44);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean12 = explicit9.equals((java.lang.Object) (short) 0);
        byte[] byteArray13 = explicit9.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray22);
        boolean boolean25 = explicit24.isResolved();
        byte[] byteArray26 = explicit24.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray13, classFileLocator28);
        boolean boolean30 = illegal1.equals((java.lang.Object) classFileLocator28);
        java.lang.String str31 = illegal1.toString();
        boolean boolean32 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str31, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        boolean boolean13 = explicit6.isResolved();
        boolean boolean14 = explicit6.isResolved();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray51 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator18, compound48 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound52 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray51);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound53 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray51);
        boolean boolean54 = explicit6.equals((java.lang.Object) classFileLocatorArray51);
        byte[] byteArray55 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = simple1.equals((java.lang.Object) classFileLocator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertNotNull(classFileLocatorArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        java.lang.String str19 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp12.locate(".class");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution21);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        byte[] byteArray10 = explicit4.resolve();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        boolean boolean26 = explicit4.equals((java.lang.Object) explicit25);
        byte[] byteArray27 = explicit25.resolve();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray37 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray34, classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp40 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str54 = noOp53.toString();
        java.lang.String str55 = noOp53.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray56 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator38, noOp40, classFileLocator52, noOp53 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound57 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray56);
        boolean boolean59 = compound57.equals((java.lang.Object) "hi!");
        boolean boolean61 = compound57.equals((java.lang.Object) (-1.0d));
        java.lang.String str62 = compound57.toString();
        java.lang.String str63 = compound57.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = classFileLocator64.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean67 = compound57.equals((java.lang.Object) classFileLocator64);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray27, classFileLocator64);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + noOp40 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp40.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classFileLocator68);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound37.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp17 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean18 = explicit16.equals((java.lang.Object) noOp17);
        java.lang.String str19 = noOp17.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp17);
        java.lang.String str21 = noOp17.toString();
        java.lang.String str22 = noOp17.toString();
        boolean boolean23 = explicit3.equals((java.lang.Object) str22);
        boolean boolean24 = explicit3.isResolved();
        byte[] byteArray25 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp17 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp17.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp7 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean8 = explicit6.equals((java.lang.Object) noOp7);
        boolean boolean9 = illegal1.equals((java.lang.Object) explicit6);
        java.lang.String str10 = illegal1.toString();
        java.lang.String str11 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp7 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp7.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound9.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray18 = explicit17.resolve();
        boolean boolean19 = explicit17.isResolved();
        boolean boolean21 = explicit17.equals((java.lang.Object) 10L);
        boolean boolean22 = explicit17.isResolved();
        java.lang.String str23 = explicit17.toString();
        byte[] byteArray24 = explicit17.resolve();
        java.lang.String str25 = explicit17.toString();
        boolean boolean26 = explicit17.isResolved();
        boolean boolean27 = illegal13.equals((java.lang.Object) explicit17);
        byte[] byteArray28 = explicit17.resolve();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean36 = illegal35.isResolved();
        java.lang.String str37 = illegal35.toString();
        java.lang.String str38 = illegal35.toString();
        java.lang.String str39 = illegal35.toString();
        boolean boolean40 = illegal35.isResolved();
        boolean boolean41 = compound31.equals((java.lang.Object) illegal35);
        boolean boolean42 = explicit17.equals((java.lang.Object) illegal35);
        boolean boolean43 = compound9.equals((java.lang.Object) illegal35);
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str23, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str37, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str38, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str39, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray18 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray9);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        byte[] byteArray17 = explicit16.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray17, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit39 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray49 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray46, classFileLocator50);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp52 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray62 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray59, classFileLocator63);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp65 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str66 = noOp65.toString();
        java.lang.String str67 = noOp65.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray68 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator50, noOp52, classFileLocator64, noOp65 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound69 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray68);
        boolean boolean71 = compound69.equals((java.lang.Object) "hi!");
        boolean boolean73 = compound69.equals((java.lang.Object) (-1.0d));
        java.lang.String str74 = compound69.toString();
        java.lang.String str75 = compound69.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = classFileLocator76.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean79 = compound69.equals((java.lang.Object) classFileLocator76);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray9, (net.bytebuddy.dynamic.ClassFileLocator) compound69);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + noOp52 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp52.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertTrue("'" + noOp65 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp65.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classFileLocator80);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound35.locate("");
        boolean boolean40 = explicit5.equals((java.lang.Object) compound35);
        byte[] byteArray41 = explicit5.resolve();
        byte[] byteArray42 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray48 = explicit47.resolve();
        boolean boolean49 = explicit47.isResolved();
        boolean boolean51 = explicit47.equals((java.lang.Object) 10L);
        boolean boolean52 = explicit47.isResolved();
        boolean boolean53 = explicit47.isResolved();
        boolean boolean54 = explicit47.isResolved();
        java.lang.String str55 = explicit47.toString();
        boolean boolean57 = explicit47.equals((java.lang.Object) 0);
        boolean boolean58 = explicit47.isResolved();
        boolean boolean59 = explicit47.isResolved();
        boolean boolean60 = explicit43.equals((java.lang.Object) explicit47);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str55, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str12 = noOp0.toString();
        java.lang.String str13 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        java.lang.String str18 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str4 = compound3.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound3.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass7 = resolution6.getClass();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str4, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean18 = illegal17.isResolved();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp35 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray42, classFileLocator46);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp48 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str49 = noOp48.toString();
        java.lang.String str50 = noOp48.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray51 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator33, noOp35, classFileLocator47, noOp48 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound52 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray51);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = compound52.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray55 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator22, compound52 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound56 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound57 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound58 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        boolean boolean59 = illegal17.equals((java.lang.Object) compound58);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution61 = compound58.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str62 = compound58.toString();
        boolean boolean63 = explicit15.equals((java.lang.Object) str62);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertTrue("'" + noOp35 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp35.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + noOp48 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp48.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str50, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray51);
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertNotNull(classFileLocatorArray55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(resolution61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        java.lang.String str6 = explicit4.toString();
        boolean boolean7 = explicit4.isResolved();
        java.lang.String str8 = explicit4.toString();
        byte[] byteArray9 = explicit4.resolve();
        boolean boolean10 = explicit4.isResolved();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}", byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str15 = noOp14.toString();
        java.lang.String str16 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str19 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str26 = noOp14.toString();
        java.lang.String str27 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution29 = noOp14.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean30 = explicit3.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray31 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound34 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        java.lang.String str36 = compound35.toString();
        boolean boolean37 = explicit3.equals((java.lang.Object) compound35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str36, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        boolean boolean7 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        boolean boolean41 = illegal1.isResolved();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str69 = noOp68.toString();
        java.lang.String str70 = noOp68.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray71 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator53, noOp55, classFileLocator67, noOp68 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound72 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray71);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = compound72.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = compound72.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean77 = illegal1.equals((java.lang.Object) compound72);
        java.lang.String str78 = illegal1.toString();
        boolean boolean79 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str69, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str70, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray71);
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str78, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean7 = illegal6.isResolved();
        java.lang.String str8 = illegal6.toString();
        java.lang.String str9 = illegal6.toString();
        java.lang.String str10 = illegal6.toString();
        boolean boolean11 = illegal6.isResolved();
        boolean boolean12 = compound2.equals((java.lang.Object) illegal6);
        boolean boolean13 = illegal6.isResolved();
        java.lang.String str14 = illegal6.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = illegal6.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp4.locate("hi!");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        boolean boolean15 = explicit6.isResolved();
        boolean boolean16 = illegal2.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        java.lang.String str26 = explicit21.toString();
        java.lang.String str27 = explicit21.toString();
        byte[] byteArray28 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        boolean boolean30 = explicit6.equals((java.lang.Object) byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray31 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) compound32);
        java.lang.String str36 = compound32.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str39 = compound32.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound32.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str36, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str39, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        java.lang.String str8 = noOp0.toString();
        java.lang.String str9 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str12 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        boolean boolean11 = explicit3.isResolved();
        java.lang.String str12 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray10 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        boolean boolean25 = compound11.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray49 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray46, classFileLocator50);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp52 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str53 = noOp52.toString();
        java.lang.String str54 = noOp52.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray55 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator37, noOp39, classFileLocator51, noOp52 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound56 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        boolean boolean58 = compound56.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound56);
        byte[] byteArray62 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit64 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit65 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        boolean boolean66 = explicit65.isResolved();
        byte[] byteArray67 = explicit65.resolve();
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit71 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray70);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp72 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean73 = explicit71.equals((java.lang.Object) noOp72);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution75 = noOp72.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution77 = noOp72.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution79 = noOp72.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        boolean boolean80 = explicit65.equals((java.lang.Object) noOp72);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp72);
        java.lang.String str82 = noOp72.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution84 = noOp72.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(classFileLocatorArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + noOp52 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp52.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str53, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp72 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp72.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(resolution75);
        org.junit.Assert.assertNotNull(resolution77);
        org.junit.Assert.assertNotNull(resolution79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution84);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        java.lang.String str9 = noOp4.toString();
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str15 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str41 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        java.lang.String str34 = compound31.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean37 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean38 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str41 = illegal40.toString();
        java.lang.String str42 = illegal40.toString();
        boolean boolean43 = illegal40.isResolved();
        boolean boolean44 = illegal1.equals((java.lang.Object) illegal40);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray54);
        byte[] byteArray56 = explicit55.resolve();
        boolean boolean57 = explicit55.isResolved();
        boolean boolean59 = explicit55.equals((java.lang.Object) 10L);
        boolean boolean60 = explicit55.isResolved();
        boolean boolean61 = explicit55.isResolved();
        boolean boolean62 = explicit55.isResolved();
        java.lang.String str63 = explicit55.toString();
        boolean boolean65 = explicit55.equals((java.lang.Object) 0);
        boolean boolean66 = compound29.equals((java.lang.Object) 0);
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit70 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray69);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp71 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean72 = explicit70.equals((java.lang.Object) noOp71);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = noOp71.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = noOp71.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = noOp71.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean79 = compound29.equals((java.lang.Object) noOp71);
        java.lang.String str80 = noOp71.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution82 = noOp71.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str63, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp71 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp71.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str80, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution82);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray2 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = compound11.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray1, (net.bytebuddy.dynamic.ClassFileLocator) compound11);
        java.lang.String str15 = compound11.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray2);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str15, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str37 = compound29.toString();
        java.lang.String str38 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray10 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        boolean boolean25 = compound11.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray49 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray46, classFileLocator50);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp52 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str53 = noOp52.toString();
        java.lang.String str54 = noOp52.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray55 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator37, noOp39, classFileLocator51, noOp52 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound56 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        boolean boolean58 = compound56.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound56);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit60 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray70 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray70);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray67, classFileLocator71);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp73 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray83 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray83);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator85 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray80, classFileLocator84);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp86 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str87 = noOp86.toString();
        java.lang.String str88 = noOp86.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray89 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator71, noOp73, classFileLocator85, noOp86 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound90 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray89);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = compound90.locate(".class");
        java.lang.String str93 = compound90.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator94 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound90);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit95 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        java.lang.Class<?> wildcardClass96 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(classFileLocatorArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + noOp52 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp52.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str53, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertTrue("'" + noOp73 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp73.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(classFileLocator85);
        org.junit.Assert.assertTrue("'" + noOp86 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp86.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str87, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str88, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray89);
        org.junit.Assert.assertNotNull(resolution92);
        org.junit.Assert.assertNotNull(classFileLocator94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23);
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray37);
        byte[] byteArray39 = explicit38.resolve();
        boolean boolean40 = explicit38.isResolved();
        boolean boolean42 = explicit38.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = classFileLocator43.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean46 = explicit38.equals((java.lang.Object) classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        boolean boolean49 = explicit13.equals((java.lang.Object) explicit48);
        byte[] byteArray50 = explicit48.resolve();
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean56 = explicit54.equals((java.lang.Object) noOp55);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution58 = noOp55.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = noOp55.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator61 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray50, (net.bytebuddy.dynamic.ClassFileLocator) noOp55);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(resolution58);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(classFileLocator61);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit91 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        boolean boolean92 = explicit91.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        boolean boolean6 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray37 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator19, noOp21, classFileLocator33, noOp34 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound38.locate("");
        boolean boolean43 = illegal8.equals((java.lang.Object) resolution42);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray48 = explicit47.resolve();
        java.lang.String str49 = explicit47.toString();
        boolean boolean50 = explicit47.isResolved();
        java.lang.Class<?> wildcardClass51 = explicit47.getClass();
        boolean boolean52 = illegal8.equals((java.lang.Object) wildcardClass51);
        boolean boolean53 = illegal8.isResolved();
        java.lang.String str54 = illegal8.toString();
        boolean boolean55 = illegal1.equals((java.lang.Object) str54);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray37);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str49, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str54, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean7 = resolution6.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str42 = compound29.toString();
        java.lang.String str43 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp24 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str38 = noOp37.toString();
        java.lang.String str39 = noOp37.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray40 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator22, noOp24, classFileLocator36, noOp37 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray40);
        boolean boolean43 = compound41.equals((java.lang.Object) "hi!");
        boolean boolean45 = compound41.equals((java.lang.Object) (-1.0d));
        java.lang.String str46 = compound41.toString();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray55);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        byte[] byteArray63 = explicit62.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray75 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray75);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator76);
        byte[] byteArray80 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray80);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator82 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray63, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray55, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution86 = classFileLocator83.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean87 = compound41.equals((java.lang.Object) resolution86);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) compound41);
        java.lang.String str89 = compound41.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + noOp24 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp24.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(classFileLocator82);
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(resolution86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classFileLocator88);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        boolean boolean11 = explicit10.isResolved();
        byte[] byteArray12 = explicit10.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray12);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator16);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(resolution2);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit57 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean59 = explicit57.equals((java.lang.Object) noOp58);
        java.lang.String str60 = noOp58.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = noOp58.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = noOp58.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = noOp58.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean67 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray68 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str60, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        java.lang.String str7 = explicit6.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        java.lang.String str5 = explicit3.toString();
        boolean boolean6 = explicit3.isResolved();
        boolean boolean7 = explicit3.isResolved();
        byte[] byteArray8 = explicit3.resolve();
        boolean boolean9 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        java.lang.String str8 = explicit7.toString();
        byte[] byteArray9 = explicit7.resolve();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        java.lang.String str15 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean9 = explicit8.isResolved();
        byte[] byteArray10 = explicit8.resolve();
        boolean boolean11 = illegal1.equals((java.lang.Object) explicit8);
        byte[] byteArray12 = explicit8.resolve();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str17 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        boolean boolean31 = explicit26.isResolved();
        java.lang.String str32 = explicit26.toString();
        byte[] byteArray33 = explicit26.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray33, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray15, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray15);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str32, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        byte[] byteArray5 = explicit3.resolve();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean11 = explicit9.isResolved();
        boolean boolean13 = explicit9.equals((java.lang.Object) 10L);
        boolean boolean14 = explicit9.isResolved();
        boolean boolean15 = explicit9.isResolved();
        boolean boolean16 = explicit9.isResolved();
        byte[] byteArray17 = explicit9.resolve();
        boolean boolean18 = explicit3.equals((java.lang.Object) explicit9);
        java.lang.String str19 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str19, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str2 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str5 = compound1.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str2, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str5, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        boolean boolean14 = illegal1.isResolved();
        boolean boolean15 = illegal1.isResolved();
        boolean boolean16 = illegal1.isResolved();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        boolean boolean21 = explicit20.isResolved();
        byte[] byteArray22 = explicit20.resolve();
        boolean boolean23 = illegal1.equals((java.lang.Object) byteArray22);
        java.lang.String str24 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str24, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal57 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean58 = compound48.equals((java.lang.Object) illegal57);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray59 = illegal57.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray8);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24, classFileLocator28);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray33);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray42, classFileLocator46);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp48 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray58 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray58);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray55, classFileLocator59);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp61 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str62 = noOp61.toString();
        java.lang.String str63 = noOp61.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray64 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator46, noOp48, classFileLocator60, noOp61 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound65 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray64);
        boolean boolean67 = compound65.equals((java.lang.Object) "hi!");
        java.lang.String str68 = compound65.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, (net.bytebuddy.dynamic.ClassFileLocator) compound65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24, (net.bytebuddy.dynamic.ClassFileLocator) compound65);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit71 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray8, classFileLocator72);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + noOp48 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp48.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertTrue("'" + noOp61 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp61.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str63, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator73);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        boolean boolean32 = compound30.equals((java.lang.Object) "hi!");
        boolean boolean34 = compound30.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound30.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp48 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean49 = explicit47.equals((java.lang.Object) noOp48);
        java.lang.String str50 = noOp48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray42, (net.bytebuddy.dynamic.ClassFileLocator) noOp48);
        boolean boolean52 = compound30.equals((java.lang.Object) byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution56 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit60 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray59);
        byte[] byteArray61 = explicit60.resolve();
        boolean boolean62 = explicit60.isResolved();
        boolean boolean64 = explicit60.equals((java.lang.Object) 10L);
        boolean boolean65 = explicit60.isResolved();
        boolean boolean66 = explicit60.isResolved();
        boolean boolean67 = explicit60.isResolved();
        boolean boolean68 = explicit60.isResolved();
        boolean boolean69 = explicit60.isResolved();
        boolean boolean70 = compound30.equals((java.lang.Object) explicit60);
        byte[] byteArray71 = explicit60.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray71);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp48 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp48.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str50, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertNotNull(resolution56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator72);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit3.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        boolean boolean5 = explicit4.isResolved();
        byte[] byteArray6 = explicit4.resolve();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        boolean boolean38 = compound36.equals((java.lang.Object) "hi!");
        boolean boolean40 = compound36.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound36.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = compound36.locate("");
        java.lang.String str45 = compound36.toString();
        java.lang.String str46 = compound36.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution48 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound36.locate(".class");
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray59);
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit66 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray65);
        byte[] byteArray67 = explicit66.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray67);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray79 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray79);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray76, classFileLocator80);
        byte[] byteArray84 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator85 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray84);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator86 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray76, classFileLocator85);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator87 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray67, classFileLocator85);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray59, classFileLocator87);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit89 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray59);
        boolean boolean90 = compound36.equals((java.lang.Object) explicit89);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator91 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) compound36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(resolution44);
        org.junit.Assert.assertNotNull(resolution48);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator85);
        org.junit.Assert.assertNotNull(classFileLocator86);
        org.junit.Assert.assertNotNull(classFileLocator87);
        org.junit.Assert.assertNotNull(classFileLocator88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classFileLocator91);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("");
        java.lang.String str37 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        java.lang.String str6 = explicit4.toString();
        boolean boolean7 = explicit4.isResolved();
        boolean boolean8 = explicit4.isResolved();
        byte[] byteArray9 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str10 = illegal9.toString();
        java.lang.String str11 = illegal9.toString();
        boolean boolean12 = explicit3.equals((java.lang.Object) illegal9);
        byte[] byteArray13 = explicit3.resolve();
        java.lang.Class<?> wildcardClass14 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean56 = resolution55.isResolved();
        boolean boolean57 = resolution55.isResolved();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean44 = illegal43.isResolved();
        java.lang.String str45 = illegal43.toString();
        boolean boolean46 = illegal43.isResolved();
        boolean boolean47 = illegal43.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str50 = illegal49.toString();
        boolean boolean51 = illegal49.isResolved();
        boolean boolean52 = illegal43.equals((java.lang.Object) illegal49);
        boolean boolean53 = compound29.equals((java.lang.Object) illegal49);
        boolean boolean54 = illegal49.isResolved();
        boolean boolean55 = illegal49.isResolved();
        java.lang.Object obj56 = null;
        boolean boolean57 = illegal49.equals(obj56);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str50, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        boolean boolean27 = explicit25.isResolved();
        boolean boolean29 = explicit25.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = classFileLocator30.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean33 = explicit25.equals((java.lang.Object) classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean43 = explicit41.equals((java.lang.Object) noOp42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = noOp42.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = noOp42.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str48 = noOp42.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = noOp42.locate("");
        boolean boolean51 = compound37.equals((java.lang.Object) noOp42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = noOp42.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = noOp42.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) noOp42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution58 = noOp42.locate("");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(resolution47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(resolution58);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean25 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean8 = explicit5.isResolved();
        java.lang.String str9 = explicit5.toString();
        byte[] byteArray10 = explicit5.resolve();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray10, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit32 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray31);
        byte[] byteArray33 = explicit32.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean42 = explicit40.equals((java.lang.Object) noOp41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = noOp41.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = noOp41.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str47 = noOp41.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution49 = noOp41.locate("");
        boolean boolean50 = compound36.equals((java.lang.Object) noOp41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray33, (net.bytebuddy.dynamic.ClassFileLocator) noOp41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray62 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray59, classFileLocator63);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp65 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray75 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray75);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator76);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp78 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str79 = noOp78.toString();
        java.lang.String str80 = noOp78.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray81 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator63, noOp65, classFileLocator77, noOp78 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound82 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray81);
        boolean boolean84 = compound82.equals((java.lang.Object) "hi!");
        boolean boolean86 = compound82.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution88 = compound82.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str89 = compound82.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal91 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean92 = illegal91.isResolved();
        java.lang.String str93 = illegal91.toString();
        java.lang.String str94 = illegal91.toString();
        boolean boolean95 = compound82.equals((java.lang.Object) str94);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator96 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray33, (net.bytebuddy.dynamic.ClassFileLocator) compound82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator97 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) compound82);
        java.lang.String str98 = compound82.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(resolution44);
        org.junit.Assert.assertNotNull(resolution46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertTrue("'" + noOp65 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp65.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + noOp78 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp78.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str79, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str80, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(resolution88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str93, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str94, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classFileLocator96);
        org.junit.Assert.assertNotNull(classFileLocator97);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        java.lang.String str9 = noOp4.toString();
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate(".class");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.security.AccessControlContext accessControlContext2 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate3 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader1, accessControlContext2);
        java.lang.ClassLoader classLoader4 = classLoadingDelegate3.getClassLoader();
        java.lang.ClassLoader classLoader5 = classLoadingDelegate3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased6 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoadingDelegate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate3);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader5);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("");
        boolean boolean39 = resolution38.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = classFileLocator9.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean12 = explicit4.equals((java.lang.Object) classFileLocator9);
        boolean boolean14 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit4.isResolved();
        byte[] byteArray16 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}", byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.String str15 = explicit3.toString();
        java.lang.String str16 = explicit3.toString();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str43 = noOp42.toString();
        java.lang.String str44 = noOp42.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray45 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator27, noOp29, classFileLocator41, noOp42 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound46 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray45);
        boolean boolean48 = compound46.equals((java.lang.Object) "hi!");
        boolean boolean50 = compound46.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound46.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = compound46.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray58 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray58);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit63 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean65 = explicit63.equals((java.lang.Object) noOp64);
        java.lang.String str66 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray58, (net.bytebuddy.dynamic.ClassFileLocator) noOp64);
        boolean boolean68 = compound46.equals((java.lang.Object) byteArray58);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit72 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray71);
        byte[] byteArray73 = explicit72.resolve();
        boolean boolean74 = explicit72.isResolved();
        boolean boolean76 = explicit72.equals((java.lang.Object) 10L);
        boolean boolean77 = explicit72.isResolved();
        boolean boolean78 = explicit72.isResolved();
        boolean boolean79 = explicit72.isResolved();
        java.lang.String str80 = explicit72.toString();
        boolean boolean82 = explicit72.equals((java.lang.Object) 0);
        boolean boolean83 = compound46.equals((java.lang.Object) 0);
        boolean boolean84 = explicit3.equals((java.lang.Object) compound46);
        boolean boolean85 = explicit3.isResolved();
        byte[] byteArray86 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str44, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str80, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100]");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean3 = illegal2.isResolved();
        boolean boolean4 = illegal2.isResolved();
        java.lang.String str5 = illegal2.toString();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean12 = explicit9.equals((java.lang.Object) (short) 0);
        boolean boolean13 = illegal2.equals((java.lang.Object) explicit9);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        boolean boolean23 = explicit22.isResolved();
        byte[] byteArray24 = explicit22.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        boolean boolean26 = illegal2.equals((java.lang.Object) byteArray24);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray49 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray46, classFileLocator50);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp52 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str53 = noOp52.toString();
        java.lang.String str54 = noOp52.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray55 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator37, noOp39, classFileLocator51, noOp52 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound56 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        boolean boolean58 = compound56.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound56.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = compound56.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray24, (net.bytebuddy.dynamic.ClassFileLocator) compound56);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit64 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + noOp52 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp52.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str53, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(classFileLocator63);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        boolean boolean13 = explicit3.isResolved();
        boolean boolean14 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray11 = explicit10.resolve();
        byte[] byteArray12 = explicit10.resolve();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit32 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}", byteArray23);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray43 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray56 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray56);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray53, classFileLocator57);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp59 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str60 = noOp59.toString();
        java.lang.String str61 = noOp59.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray62 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator44, noOp46, classFileLocator58, noOp59 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound63 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray23, (net.bytebuddy.dynamic.ClassFileLocator) compound63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution66 = compound63.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) compound63);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertTrue("'" + noOp59 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp59.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str60, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str61, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray62);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(resolution66);
        org.junit.Assert.assertNotNull(classFileLocator67);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str13 = noOp4.toString();
        java.lang.String str14 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str25 = illegal1.toString();
        boolean boolean26 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        boolean boolean15 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str4 = illegal3.toString();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        java.lang.String str13 = explicit8.toString();
        byte[] byteArray14 = explicit8.resolve();
        boolean boolean15 = illegal3.equals((java.lang.Object) byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray43 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str47 = noOp46.toString();
        java.lang.String str48 = noOp46.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray49 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator31, noOp33, classFileLocator45, noOp46 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound50.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray53 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator20, compound50 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound54 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) compound54);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = explicit59.isResolved();
        boolean boolean63 = explicit59.equals((java.lang.Object) 10L);
        boolean boolean64 = explicit59.isResolved();
        boolean boolean65 = explicit59.isResolved();
        boolean boolean66 = explicit59.isResolved();
        boolean boolean67 = compound54.equals((java.lang.Object) explicit59);
        byte[] byteArray68 = explicit59.resolve();
        boolean boolean69 = explicit59.isResolved();
        boolean boolean70 = explicit59.isResolved();
        byte[] byteArray71 = explicit59.resolve();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray49);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(classFileLocatorArray53);
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100]");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        boolean boolean54 = explicit46.isResolved();
        boolean boolean55 = explicit46.isResolved();
        boolean boolean56 = explicit46.isResolved();
        java.lang.String str57 = explicit46.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str57, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp23 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str37 = noOp36.toString();
        java.lang.String str38 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator21, noOp23, classFileLocator35, noOp36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean42 = compound40.equals((java.lang.Object) "hi!");
        java.lang.String str43 = compound40.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound40);
        boolean boolean45 = illegal1.equals((java.lang.Object) classFileLocator44);
        java.lang.String str46 = illegal1.toString();
        java.lang.String str47 = illegal1.toString();
        boolean boolean48 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + noOp23 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp23.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str37, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str46, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str47, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean8 = explicit7.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
        java.lang.String str2 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = noOp29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = noOp29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) noOp29);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, classFileLocator37 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound41.locate(".class");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertNotNull(resolution43);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = noOp0.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertNotNull(resolution4);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp6 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean7 = explicit5.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp6.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str12 = noOp6.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp6.locate("");
        boolean boolean15 = compound1.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp6.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp6.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str20 = noOp6.toString();
        java.lang.String str21 = noOp6.toString();
        java.lang.String str22 = noOp6.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp6 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp6.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean20 = explicit18.equals((java.lang.Object) 1.0d);
        java.lang.String str21 = explicit18.toString();
        byte[] byteArray22 = explicit18.resolve();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str21, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 10, -1, -1, 1]");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("");
        java.lang.String str42 = compound29.toString();
        java.lang.String str43 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray11 = explicit10.resolve();
        boolean boolean12 = explicit10.isResolved();
        boolean boolean14 = explicit10.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit10.isResolved();
        java.lang.String str16 = explicit10.toString();
        byte[] byteArray17 = explicit10.resolve();
        java.lang.String str18 = explicit10.toString();
        boolean boolean19 = explicit6.equals((java.lang.Object) str18);
        byte[] byteArray20 = explicit6.resolve();
        byte[] byteArray21 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit30 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray29);
        byte[] byteArray31 = explicit30.resolve();
        boolean boolean32 = explicit30.isResolved();
        boolean boolean34 = explicit30.equals((java.lang.Object) 10L);
        boolean boolean35 = explicit30.isResolved();
        java.lang.String str36 = explicit30.toString();
        byte[] byteArray37 = explicit30.resolve();
        java.lang.String str38 = explicit30.toString();
        boolean boolean39 = explicit30.isResolved();
        boolean boolean40 = illegal26.equals((java.lang.Object) explicit30);
        boolean boolean41 = explicit30.isResolved();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean49 = explicit45.equals((java.lang.Object) 10L);
        java.lang.String str50 = explicit45.toString();
        java.lang.String str51 = explicit45.toString();
        byte[] byteArray52 = explicit45.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        boolean boolean54 = explicit30.equals((java.lang.Object) byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray55 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound56 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray55);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution58 = compound56.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray52, (net.bytebuddy.dynamic.ClassFileLocator) compound56);
        java.lang.String str60 = compound56.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = compound56.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str63 = compound56.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound56);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str18, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str36, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str38, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str50, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str51, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray55);
        org.junit.Assert.assertNotNull(resolution58);
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str60, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str63, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocator64);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str4 = illegal3.toString();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        java.lang.String str13 = explicit8.toString();
        byte[] byteArray14 = explicit8.resolve();
        boolean boolean15 = illegal3.equals((java.lang.Object) byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray43 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str47 = noOp46.toString();
        java.lang.String str48 = noOp46.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray49 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator31, noOp33, classFileLocator45, noOp46 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound50.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray53 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator20, compound50 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound54 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) compound54);
        java.lang.String str56 = compound54.toString();
        java.lang.String str57 = compound54.toString();
        java.lang.String str58 = compound54.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound54.locate("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray49);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(classFileLocatorArray53);
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(resolution60);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str40 = noOp39.toString();
        java.lang.String str41 = noOp39.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray42 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator24, noOp26, classFileLocator38, noOp39 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str46 = compound43.toString();
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit51 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray50);
        byte[] byteArray52 = explicit51.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        boolean boolean55 = compound43.equals((java.lang.Object) byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray12, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution59 = classFileLocator57.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray42);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(resolution59);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        java.lang.String str6 = noOp0.toString();
        java.lang.String str7 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp0.locate("");
        boolean boolean12 = resolution11.isResolved();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str7, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.Object obj4 = null;
        boolean boolean5 = compound3.equals(obj4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = compound3.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.Object obj8 = null;
        boolean boolean9 = compound3.equals(obj8);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray18);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray47 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray47);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray44, classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp50 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str51 = noOp50.toString();
        java.lang.String str52 = noOp50.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray53 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator35, noOp37, classFileLocator49, noOp50 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound54 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray53);
        boolean boolean56 = compound54.equals((java.lang.Object) "hi!");
        boolean boolean58 = compound54.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound54.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = compound54.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray66 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray66);
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit71 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray70);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp72 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean73 = explicit71.equals((java.lang.Object) noOp72);
        java.lang.String str74 = noOp72.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator75 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray66, (net.bytebuddy.dynamic.ClassFileLocator) noOp72);
        boolean boolean76 = compound54.equals((java.lang.Object) byteArray66);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = compound54.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution80 = compound54.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray18, (net.bytebuddy.dynamic.ClassFileLocator) compound54);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution83 = compound54.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution85 = compound54.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean86 = compound3.equals((java.lang.Object) resolution85);
        java.lang.String str87 = compound3.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertTrue("'" + noOp50 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp50.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str51, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str52, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp72 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp72.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str74, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertNotNull(resolution80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(resolution83);
        org.junit.Assert.assertNotNull(resolution85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str87, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound35.locate("");
        boolean boolean40 = explicit5.equals((java.lang.Object) compound35);
        byte[] byteArray41 = explicit5.resolve();
        byte[] byteArray42 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        java.lang.String str44 = explicit43.toString();
        boolean boolean45 = explicit43.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str44, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray10 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        boolean boolean25 = compound11.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray37 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray34, classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp40 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str54 = noOp53.toString();
        java.lang.String str55 = noOp53.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray56 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator38, noOp40, classFileLocator52, noOp53 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound57 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray56);
        boolean boolean59 = compound57.equals((java.lang.Object) "hi!");
        boolean boolean61 = compound57.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution63 = compound57.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str64 = compound57.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal66 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean67 = illegal66.isResolved();
        java.lang.String str68 = illegal66.toString();
        java.lang.String str69 = illegal66.toString();
        boolean boolean70 = compound57.equals((java.lang.Object) str69);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound57);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = classFileLocator72.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean75 = compound57.equals((java.lang.Object) resolution74);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray76 = resolution74.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(classFileLocatorArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + noOp40 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp40.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(resolution63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str68, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str69, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray11, classFileLocator36);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        byte[] byteArray43 = explicit42.resolve();
        boolean boolean44 = explicit42.isResolved();
        boolean boolean46 = explicit42.equals((java.lang.Object) 10L);
        boolean boolean47 = explicit42.isResolved();
        java.lang.String str48 = explicit42.toString();
        byte[] byteArray49 = explicit42.resolve();
        byte[] byteArray50 = explicit42.resolve();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp60 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean61 = explicit59.equals((java.lang.Object) noOp60);
        java.lang.String str62 = noOp60.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray54, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray50, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp60);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit66 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray67 = explicit66.resolve();
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str48, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp60 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp60.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 10, -1, -1, 1]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        java.lang.String str15 = explicit5.toString();
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray17 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str53 = compound48.toString();
        java.lang.String str54 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution56 = compound48.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str57 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(resolution56);
        org.junit.Assert.assertNotNull(classFileLocator58);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean16 = explicit14.equals((java.lang.Object) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp15.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean25 = illegal1.equals((java.lang.Object) resolution24);
        boolean boolean26 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray11 = explicit10.resolve();
        boolean boolean12 = explicit10.isResolved();
        boolean boolean14 = explicit10.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit10.isResolved();
        java.lang.String str16 = explicit10.toString();
        byte[] byteArray17 = explicit10.resolve();
        java.lang.String str18 = explicit10.toString();
        boolean boolean19 = explicit10.isResolved();
        boolean boolean20 = illegal6.equals((java.lang.Object) explicit10);
        boolean boolean21 = explicit10.isResolved();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        boolean boolean27 = explicit25.isResolved();
        boolean boolean29 = explicit25.equals((java.lang.Object) 10L);
        java.lang.String str30 = explicit25.toString();
        java.lang.String str31 = explicit25.toString();
        byte[] byteArray32 = explicit25.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        boolean boolean34 = explicit10.equals((java.lang.Object) byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray32, (net.bytebuddy.dynamic.ClassFileLocator) compound36);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray49 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray46, classFileLocator50);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp52 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray62 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray62);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray59, classFileLocator63);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp65 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str66 = noOp65.toString();
        java.lang.String str67 = noOp65.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray68 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator50, noOp52, classFileLocator64, noOp65 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound69 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray68);
        boolean boolean71 = compound69.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution73 = compound69.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution75 = compound69.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean76 = compound36.equals((java.lang.Object) "ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean77 = compound2.equals((java.lang.Object) compound36);
        java.lang.String str78 = compound36.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str18, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str30, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + noOp52 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp52.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertTrue("'" + noOp65 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp65.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(resolution73);
        org.junit.Assert.assertNotNull(resolution75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str78, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.Object obj4 = null;
        boolean boolean5 = compound3.equals(obj4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = compound3.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean8 = resolution7.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str11 = compound10.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str11, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = noOp29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = noOp29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) noOp29);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, classFileLocator37 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray55 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit60 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit61 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}", byteArray52);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray72 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray72);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator74 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray69, classFileLocator73);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp75 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray85 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator86 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray85);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator87 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray82, classFileLocator86);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp88 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str89 = noOp88.toString();
        java.lang.String str90 = noOp88.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray91 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator73, noOp75, classFileLocator87, noOp88 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound92 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray91);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator93 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray52, (net.bytebuddy.dynamic.ClassFileLocator) compound92);
        boolean boolean94 = compound41.equals((java.lang.Object) compound92);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertNotNull(classFileLocator74);
        org.junit.Assert.assertTrue("'" + noOp75 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp75.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator86);
        org.junit.Assert.assertNotNull(classFileLocator87);
        org.junit.Assert.assertTrue("'" + noOp88 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp88.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str89, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str90, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray91);
        org.junit.Assert.assertNotNull(classFileLocator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str2 = illegal1.toString();
        boolean boolean4 = illegal1.equals((java.lang.Object) "ClassFileLocator.Compound{classFileLocator=[]}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        boolean boolean14 = explicit3.isResolved();
        byte[] byteArray15 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        java.lang.String str8 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        boolean boolean18 = explicit17.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray9);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean13 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean14 = explicit3.isResolved();
        byte[] byteArray15 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str3 = illegal2.toString();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        java.lang.String str15 = explicit7.toString();
        byte[] byteArray16 = explicit7.resolve();
        boolean boolean17 = illegal2.equals((java.lang.Object) explicit7);
        boolean boolean18 = explicit7.isResolved();
        byte[] byteArray19 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray43 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray40, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str47 = noOp46.toString();
        java.lang.String str48 = noOp46.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray49 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator31, noOp33, classFileLocator45, noOp46 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution52 = compound50.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str53 = compound50.toString();
        java.lang.String str54 = compound50.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray19, (net.bytebuddy.dynamic.ClassFileLocator) compound50);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray49);
        org.junit.Assert.assertNotNull(resolution52);
        org.junit.Assert.assertNotNull(classFileLocator55);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = explicit59.isResolved();
        boolean boolean63 = explicit59.equals((java.lang.Object) 10L);
        boolean boolean64 = explicit59.isResolved();
        boolean boolean65 = explicit59.isResolved();
        boolean boolean66 = explicit59.isResolved();
        boolean boolean67 = explicit59.isResolved();
        boolean boolean68 = explicit59.isResolved();
        boolean boolean69 = compound29.equals((java.lang.Object) explicit59);
        boolean boolean70 = explicit59.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) byteArray15);
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray30 = explicit29.resolve();
        boolean boolean31 = explicit29.isResolved();
        boolean boolean33 = explicit29.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = classFileLocator34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean37 = explicit29.equals((java.lang.Object) classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray14, classFileLocator39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean49 = explicit45.equals((java.lang.Object) 10L);
        boolean boolean50 = explicit45.isResolved();
        java.lang.String str51 = explicit45.toString();
        byte[] byteArray52 = explicit45.resolve();
        byte[] byteArray53 = explicit45.resolve();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray53, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit69 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = simple1.equals((java.lang.Object) classFileLocator70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str51, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator70);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray14 = explicit13.resolve();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean20 = explicit18.equals((java.lang.Object) noOp19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp19.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp19.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp19.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp19.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = noOp19.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertNotNull(resolution28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(resolution31);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean8 = explicit7.isResolved();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        byte[] byteArray34 = explicit33.resolve();
        boolean boolean35 = explicit33.isResolved();
        boolean boolean37 = explicit33.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = classFileLocator38.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean41 = explicit33.equals((java.lang.Object) classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18, classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        boolean boolean44 = explicit7.equals((java.lang.Object) explicit43);
        java.lang.Object obj45 = null;
        boolean boolean46 = explicit7.equals(obj45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray11 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        boolean boolean13 = explicit12.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        boolean boolean37 = compound35.equals((java.lang.Object) "hi!");
        java.lang.String str38 = compound35.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = resolution41.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(resolution41);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        java.lang.String str37 = illegal1.toString();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        byte[] byteArray42 = explicit41.resolve();
        boolean boolean43 = explicit41.isResolved();
        boolean boolean45 = explicit41.equals((java.lang.Object) 10L);
        boolean boolean46 = explicit41.isResolved();
        java.lang.String str47 = explicit41.toString();
        byte[] byteArray48 = explicit41.resolve();
        boolean boolean49 = illegal1.equals((java.lang.Object) byteArray48);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        byte[] byteArray54 = explicit53.resolve();
        boolean boolean55 = explicit53.isResolved();
        boolean boolean57 = explicit53.equals((java.lang.Object) 10L);
        boolean boolean58 = explicit53.isResolved();
        java.lang.String str59 = explicit53.toString();
        boolean boolean60 = explicit53.isResolved();
        boolean boolean61 = explicit53.isResolved();
        byte[] byteArray62 = explicit53.resolve();
        boolean boolean63 = illegal1.equals((java.lang.Object) explicit53);
        boolean boolean64 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str37, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str47, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str59, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str5 = illegal4.toString();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean11 = explicit9.isResolved();
        boolean boolean13 = explicit9.equals((java.lang.Object) 10L);
        java.lang.String str14 = explicit9.toString();
        byte[] byteArray15 = explicit9.resolve();
        boolean boolean16 = illegal4.equals((java.lang.Object) byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray44 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray41, classFileLocator45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str48 = noOp47.toString();
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator32, noOp34, classFileLocator46, noOp47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound51.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray54 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator21, compound51 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound55 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) compound55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit58 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(classFileLocatorArray54);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        java.lang.String str14 = illegal1.toString();
        boolean boolean15 = illegal1.isResolved();
        java.lang.String str16 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str16, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        byte[] byteArray10 = explicit4.resolve();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}", byteArray12, classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = resolution26.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(resolution26);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        byte[] byteArray5 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean7 = explicit6.isResolved();
        byte[] byteArray8 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray11 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound14 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        boolean boolean15 = explicit3.equals((java.lang.Object) classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound16 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean23 = explicit20.equals((java.lang.Object) (short) 0);
        byte[] byteArray24 = explicit20.resolve();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        java.lang.String str38 = noOp34.toString();
        java.lang.String str39 = noOp34.toString();
        boolean boolean40 = explicit20.equals((java.lang.Object) str39);
        boolean boolean41 = explicit20.isResolved();
        byte[] byteArray42 = explicit20.resolve();
        boolean boolean43 = compound16.equals((java.lang.Object) explicit20);
        java.lang.String str44 = compound16.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str44, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str40 = noOp39.toString();
        java.lang.String str41 = noOp39.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray42 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator24, noOp26, classFileLocator38, noOp39 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray42);
        boolean boolean45 = compound43.equals((java.lang.Object) "hi!");
        boolean boolean47 = compound43.equals((java.lang.Object) (-1.0d));
        java.lang.String str48 = compound43.toString();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray57);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit64 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray63);
        byte[] byteArray65 = explicit64.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray65);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray77 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray77);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray74, classFileLocator78);
        byte[] byteArray82 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray74, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator85 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray65, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator86 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray57, classFileLocator85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution88 = classFileLocator85.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean89 = compound43.equals((java.lang.Object) resolution88);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray13, (net.bytebuddy.dynamic.ClassFileLocator) compound43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = classFileLocator90.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean93 = illegal1.equals((java.lang.Object) resolution92);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(classFileLocator85);
        org.junit.Assert.assertNotNull(classFileLocator86);
        org.junit.Assert.assertNotNull(resolution88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(resolution92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        java.lang.String str8 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp0.locate(".class");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        java.lang.String str43 = explicit42.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str43, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        java.lang.Object obj17 = null;
        boolean boolean18 = illegal1.equals(obj17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        java.lang.Class<?> wildcardClass42 = compound41.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray30 = explicit29.resolve();
        boolean boolean31 = explicit29.isResolved();
        boolean boolean33 = explicit29.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = classFileLocator34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean37 = explicit29.equals((java.lang.Object) classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray14, classFileLocator39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean49 = explicit45.equals((java.lang.Object) 10L);
        boolean boolean50 = explicit45.isResolved();
        java.lang.String str51 = explicit45.toString();
        byte[] byteArray52 = explicit45.resolve();
        byte[] byteArray53 = explicit45.resolve();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray53, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        boolean boolean69 = illegal1.equals((java.lang.Object) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution71 = noOp63.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str72 = noOp63.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str51, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(resolution71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray11 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound14 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        boolean boolean15 = explicit3.equals((java.lang.Object) classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound16 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound17 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound18 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        java.lang.String str19 = compound18.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str19, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution44 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(resolution44);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        java.lang.String str15 = explicit7.toString();
        boolean boolean16 = explicit7.isResolved();
        boolean boolean17 = illegal3.equals((java.lang.Object) explicit7);
        boolean boolean18 = explicit7.isResolved();
        byte[] byteArray19 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}'}", byteArray19);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        boolean boolean37 = compound35.equals((java.lang.Object) "hi!");
        java.lang.String str38 = compound35.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        java.lang.String str40 = compound35.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator39);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray5 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        java.lang.String str8 = compound7.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray9 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        boolean boolean11 = compound7.equals((java.lang.Object) classFileLocatorArray9);
        boolean boolean12 = illegal1.equals((java.lang.Object) compound7);
        java.lang.String str13 = illegal1.toString();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str8, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str3 = illegal2.toString();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        java.lang.String str15 = explicit7.toString();
        byte[] byteArray16 = explicit7.resolve();
        boolean boolean17 = illegal2.equals((java.lang.Object) explicit7);
        boolean boolean18 = explicit7.isResolved();
        byte[] byteArray19 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str21 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp12.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp12.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str26 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp12.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution28);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        java.lang.String str7 = illegal1.toString();
        java.lang.String str8 = illegal1.toString();
        boolean boolean9 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str7, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        java.lang.String str13 = explicit12.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray14 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound15 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound16 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound17 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray14);
        java.lang.String str18 = compound17.toString();
        java.lang.String str19 = compound17.toString();
        java.lang.String str20 = compound17.toString();
        java.lang.String str21 = compound17.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound17.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.Class<?> wildcardClass24 = compound17.getClass();
        boolean boolean25 = explicit12.equals((java.lang.Object) wildcardClass24);
        boolean boolean26 = explicit12.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(classFileLocatorArray14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str18, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str19, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str20, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean7 = explicit4.equals((java.lang.Object) (short) 0);
        byte[] byteArray8 = explicit4.resolve();
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray11 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray13 = explicit12.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str37 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray9 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean16 = explicit14.equals((java.lang.Object) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str21 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp15.locate("");
        boolean boolean24 = compound10.equals((java.lang.Object) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray7);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(classFileLocatorArray9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        byte[] byteArray1 = null;
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        java.lang.String str13 = explicit8.toString();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray17 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound18 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound19 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound21 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound22 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound24 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound25 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound26 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) compound26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str56 = noOp55.toString();
        java.lang.String str57 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator40, noOp42, classFileLocator54, noOp55 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        boolean boolean61 = compound59.equals((java.lang.Object) "hi!");
        boolean boolean63 = compound59.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution65 = compound59.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution67 = compound59.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution69 = compound59.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution71 = compound59.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) compound59);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<6 bytes>}", byteArray1, classFileLocator72);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray17);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(resolution65);
        org.junit.Assert.assertNotNull(resolution67);
        org.junit.Assert.assertNotNull(resolution69);
        org.junit.Assert.assertNotNull(resolution71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator73);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str2 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        boolean boolean47 = illegal1.isResolved();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = explicit59.isResolved();
        boolean boolean63 = explicit59.equals((java.lang.Object) 10L);
        boolean boolean64 = explicit59.isResolved();
        java.lang.String str65 = explicit59.toString();
        byte[] byteArray66 = explicit59.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp67 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str68 = noOp67.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = noOp67.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray66, (net.bytebuddy.dynamic.ClassFileLocator) noOp67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray66);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray53, classFileLocator72);
        boolean boolean74 = illegal1.equals((java.lang.Object) classFileLocator72);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = classFileLocator72.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str65, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp67 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp67.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution70);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(resolution76);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        java.lang.Class<?> wildcardClass16 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) byteArray15);
        boolean boolean17 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        boolean boolean14 = explicit3.isResolved();
        byte[] byteArray15 = explicit3.resolve();
        byte[] byteArray16 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray18 = explicit17.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal2 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        boolean boolean15 = explicit6.isResolved();
        boolean boolean16 = illegal2.equals((java.lang.Object) explicit6);
        boolean boolean17 = explicit6.isResolved();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray22 = explicit21.resolve();
        boolean boolean23 = explicit21.isResolved();
        boolean boolean25 = explicit21.equals((java.lang.Object) 10L);
        java.lang.String str26 = explicit21.toString();
        java.lang.String str27 = explicit21.toString();
        byte[] byteArray28 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        boolean boolean30 = explicit6.equals((java.lang.Object) byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray31 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray31);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) compound32);
        java.lang.String str36 = compound32.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound32.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean39 = resolution38.isResolved();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str27, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str36, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        java.lang.String str7 = explicit3.toString();
        java.lang.String str8 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.Object obj15 = null;
        boolean boolean16 = explicit3.equals(obj15);
        byte[] byteArray17 = explicit3.resolve();
        java.lang.String str18 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str18, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str8 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean13 = resolution12.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("hi!");
        java.lang.String str14 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean17 = resolution16.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28);
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        byte[] byteArray44 = explicit43.resolve();
        boolean boolean45 = explicit43.isResolved();
        boolean boolean47 = explicit43.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = classFileLocator48.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean51 = explicit43.equals((java.lang.Object) classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28, classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        boolean boolean54 = explicit18.equals((java.lang.Object) explicit53);
        byte[] byteArray55 = explicit53.resolve();
        boolean boolean56 = illegal1.equals((java.lang.Object) byteArray55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        byte[] byteArray6 = explicit4.resolve();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray11 = explicit10.resolve();
        boolean boolean12 = explicit10.isResolved();
        boolean boolean14 = explicit10.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit10.isResolved();
        boolean boolean16 = explicit10.isResolved();
        boolean boolean17 = explicit10.isResolved();
        byte[] byteArray18 = explicit10.resolve();
        boolean boolean19 = explicit4.equals((java.lang.Object) explicit10);
        java.lang.String str20 = explicit10.toString();
        byte[] byteArray21 = explicit10.resolve();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray22 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray22);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound24 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray22);
        java.lang.String str25 = compound24.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray26 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound27 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        boolean boolean28 = compound24.equals((java.lang.Object) classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound32 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound33);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str20, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str25, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp14.locate("hi!");
        java.lang.String str22 = noOp14.toString();
        java.lang.String str23 = noOp14.toString();
        boolean boolean24 = explicit9.equals((java.lang.Object) str23);
        boolean boolean25 = explicit9.isResolved();
        byte[] byteArray26 = explicit9.resolve();
        java.lang.Class<?> wildcardClass27 = explicit9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray5 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        java.lang.String str8 = compound7.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray9 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        boolean boolean11 = compound7.equals((java.lang.Object) classFileLocatorArray9);
        boolean boolean12 = illegal1.equals((java.lang.Object) compound7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = compound7.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str15 = compound7.toString();
        java.lang.Object obj16 = null;
        boolean boolean17 = compound7.equals(obj16);
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str8, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str15, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp17 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean18 = explicit16.equals((java.lang.Object) noOp17);
        java.lang.String str19 = noOp17.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp17);
        java.lang.String str21 = noOp17.toString();
        java.lang.String str22 = noOp17.toString();
        boolean boolean23 = explicit3.equals((java.lang.Object) str22);
        boolean boolean24 = explicit3.isResolved();
        byte[] byteArray25 = explicit3.resolve();
        java.lang.String str26 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp17 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp17.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str19, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str21, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str3 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str6 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = resolution8.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str3, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean25 = illegal1.isResolved();
        java.lang.String str26 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray27 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str26, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp20 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str34 = noOp33.toString();
        java.lang.String str35 = noOp33.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator18, noOp20, classFileLocator32, noOp33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound37.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound37.locate("");
        boolean boolean42 = explicit7.equals((java.lang.Object) compound37);
        byte[] byteArray43 = explicit7.resolve();
        byte[] byteArray44 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray44);
        java.lang.Class<?> wildcardClass48 = classFileLocator47.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertTrue("'" + noOp20 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp20.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = compound85.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution94 = compound85.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution96 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution98 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str99 = compound85.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(resolution92);
        org.junit.Assert.assertNotNull(resolution94);
        org.junit.Assert.assertNotNull(resolution96);
        org.junit.Assert.assertNotNull(resolution98);
    }
}

