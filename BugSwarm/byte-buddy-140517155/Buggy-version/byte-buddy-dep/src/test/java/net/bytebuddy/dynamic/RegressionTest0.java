import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased2 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.ClassLoader classLoader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator classFileLocator1 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.fromInstalledAgent(classLoader0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The Byte Buddy agent is not installed or not accessible");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.NoOp.INSTANCE");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate1 = null;
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased2 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoadingDelegate1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.String str0 = net.bytebuddy.dynamic.ClassFileLocator.CLASS_FILE_EXTENSION;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + ".class" + "'", str0, ".class");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        java.lang.Class<?> wildcardClass6 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        java.lang.Class<?> wildcardClass18 = classFileLocator16.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        java.lang.Class<?> wildcardClass7 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            forJarFile1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.ClassLoader classLoader0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate1 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = classLoadingDelegate1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassNotFoundException; message: ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.ClassNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate1);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        java.lang.Class<?> wildcardClass18 = classFileLocator17.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator0 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = classFileLocator0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean3 = resolution2.isResolved();
        org.junit.Assert.assertNotNull(classFileLocator0);
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        java.lang.ClassLoader classLoader1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader1);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased3 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoadingDelegate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean32 = resolution31.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate(".class");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = simple1.equals((java.lang.Object) classFileLocator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.NoOp.INSTANCE");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        boolean boolean9 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Compound{classFileLocator=[]}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean5 = resolution4.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = resolution4.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        boolean boolean41 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        java.lang.Class<?> wildcardClass4 = classFileLocator3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.Class<?> wildcardClass12 = resolution11.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Compound{classFileLocator=[]}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        boolean boolean26 = explicit24.isResolved();
        boolean boolean28 = explicit24.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = classFileLocator29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean32 = explicit24.equals((java.lang.Object) classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9, classFileLocator29);
        java.lang.Class<?> wildcardClass34 = classFileLocator29.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        java.lang.String str37 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str37, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.lang.ClassLoader classLoader0 = null;
        java.security.AccessControlContext accessControlContext1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0, accessControlContext1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = classLoadingDelegate2.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassNotFoundException; message: ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.ClassNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution40);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.lang.ClassLoader classLoader0 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator1 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.of(classLoader0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = classFileLocator1.locate(".class");
        org.junit.Assert.assertNotNull(classFileLocator1);
        org.junit.Assert.assertNotNull(resolution3);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray18);
        boolean boolean26 = explicit3.equals((java.lang.Object) ".class");
        java.lang.Class<?> wildcardClass27 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray11 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound14 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        boolean boolean15 = explicit3.equals((java.lang.Object) classFileLocatorArray11);
        java.lang.Class<?> wildcardClass16 = classFileLocatorArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass36 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit30 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray29);
        byte[] byteArray31 = explicit30.resolve();
        boolean boolean32 = explicit30.isResolved();
        boolean boolean34 = explicit30.equals((java.lang.Object) 10L);
        boolean boolean35 = explicit30.isResolved();
        java.lang.String str36 = explicit30.toString();
        byte[] byteArray37 = explicit30.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp38 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str39 = noOp38.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = noOp38.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray37, (net.bytebuddy.dynamic.ClassFileLocator) noOp38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray24, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10, classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str36, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp38 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp38.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(classFileLocator45);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        boolean boolean37 = compound35.equals((java.lang.Object) "hi!");
        java.lang.String str38 = compound35.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) compound35);
        java.lang.Class<?> wildcardClass40 = classFileLocator39.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        java.lang.Class<?> wildcardClass7 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = resolution5.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution5);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.security.AccessControlContext accessControlContext2 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate3 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader1, accessControlContext2);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased4 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoadingDelegate3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate3);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass8 = resolution7.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate(".class");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = classFileLocator5.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean8 = illegal1.equals((java.lang.Object) resolution7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str5 = illegal4.toString();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean11 = explicit9.isResolved();
        boolean boolean13 = explicit9.equals((java.lang.Object) 10L);
        java.lang.String str14 = explicit9.toString();
        byte[] byteArray15 = explicit9.resolve();
        boolean boolean16 = illegal4.equals((java.lang.Object) byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = simple1.equals((java.lang.Object) classFileLocator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = compound1.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str5 = noOp4.toString();
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str9 = noOp4.toString();
        boolean boolean10 = compound1.equals((java.lang.Object) str9);
        java.lang.String str11 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str11, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.Class<?> wildcardClass6 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray9 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray4, classFileLocator10);
        java.lang.Class<?> wildcardClass12 = classFileLocator11.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        java.lang.String str34 = compound31.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean37 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        java.lang.Class<?> wildcardClass12 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray21 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray16, classFileLocator22);
        boolean boolean24 = explicit3.equals((java.lang.Object) classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean2 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        boolean boolean41 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        boolean boolean54 = explicit46.isResolved();
        java.lang.Class<?> wildcardClass55 = explicit46.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = resolution35.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.ClassLoader classLoader0 = null;
        java.security.AccessControlContext accessControlContext1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0, accessControlContext1);
        java.lang.ClassLoader classLoader3 = classLoadingDelegate2.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.fromInstalledAgent(classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: The Byte Buddy agent is not installed or not accessible");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
        org.junit.Assert.assertNotNull(classLoader3);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        byte[] byteArray15 = explicit14.resolve();
        boolean boolean16 = explicit14.isResolved();
        boolean boolean18 = explicit14.equals((java.lang.Object) 10L);
        boolean boolean19 = explicit14.isResolved();
        boolean boolean20 = explicit3.equals((java.lang.Object) explicit14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray6);
        java.lang.Class<?> wildcardClass9 = classFileLocator8.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        boolean boolean41 = illegal1.isResolved();
        java.lang.String str42 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str14 = noOp13.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp13.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) noOp13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12);
        java.lang.Class<?> wildcardClass19 = classFileLocator18.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        java.lang.Class<?> wildcardClass46 = illegal1.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.Class<?> wildcardClass2 = illegal1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        java.lang.Class<?> wildcardClass13 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean34 = resolution33.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str5 = compound2.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str5, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        java.lang.String str6 = explicit4.toString();
        boolean boolean7 = explicit4.isResolved();
        java.lang.String str8 = explicit4.toString();
        byte[] byteArray9 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9);
        java.lang.Class<?> wildcardClass11 = classFileLocator10.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        java.lang.String str7 = explicit3.toString();
        byte[] byteArray8 = explicit3.resolve();
        java.lang.Class<?> wildcardClass9 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(classFileLocator7);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        java.lang.Class<?> wildcardClass19 = explicit4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        java.lang.String str12 = explicit3.toString();
        java.lang.String str13 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Compound{classFileLocator=[]}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray54 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = resolution7.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        boolean boolean14 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = resolution15.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = resolution33.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator8.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = resolution13.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        java.lang.Class<?> wildcardClass14 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        java.lang.String str41 = illegal1.toString();
        java.lang.String str42 = illegal1.toString();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray47 = explicit46.resolve();
        boolean boolean48 = explicit46.isResolved();
        boolean boolean50 = explicit46.equals((java.lang.Object) 10L);
        boolean boolean51 = explicit46.isResolved();
        boolean boolean52 = explicit46.isResolved();
        boolean boolean53 = illegal1.equals((java.lang.Object) explicit46);
        java.lang.String str54 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray55 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str42, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str54, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator0 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = classFileLocator0.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.Class<?> wildcardClass3 = resolution2.getClass();
        org.junit.Assert.assertNotNull(classFileLocator0);
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.Class<?> wildcardClass34 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray32 = resolution31.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = resolution9.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean8 = resolution7.isResolved();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        java.lang.Class<?> wildcardClass32 = classFileLocatorArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        java.lang.Class<?> wildcardClass8 = explicit7.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray44 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray41, classFileLocator45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str48 = noOp47.toString();
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator32, noOp34, classFileLocator46, noOp47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound51.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound51.locate("");
        boolean boolean56 = illegal21.equals((java.lang.Object) resolution55);
        boolean boolean57 = illegal1.equals((java.lang.Object) illegal21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.Class<?> wildcardClass3 = illegal1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("hi!");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        java.lang.Class<?> wildcardClass14 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        byte[] byteArray0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray0);
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean14 = explicit12.equals((java.lang.Object) noOp13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp13.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp13.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp13.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray5, (net.bytebuddy.dynamic.ClassFileLocator) noOp13);
        boolean boolean22 = explicit1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = explicit1.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.Class<?> wildcardClass38 = resolution37.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        boolean boolean17 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("");
        java.lang.String str13 = noOp4.toString();
        java.lang.String str14 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str14, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean38 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("");
        byte[] byteArray41 = resolution40.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.Class<?> wildcardClass6 = classFileLocatorArray0.getClass();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean44 = illegal43.isResolved();
        java.lang.String str45 = illegal43.toString();
        boolean boolean46 = illegal43.isResolved();
        boolean boolean47 = illegal43.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str50 = illegal49.toString();
        boolean boolean51 = illegal49.isResolved();
        boolean boolean52 = illegal43.equals((java.lang.Object) illegal49);
        boolean boolean53 = compound29.equals((java.lang.Object) illegal49);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray54 = illegal49.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str50, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.Class<?> wildcardClass4 = illegal1.getClass();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str33 = compound30.toString();
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray37);
        byte[] byteArray39 = explicit38.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        boolean boolean42 = compound30.equals((java.lang.Object) byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = classFileLocator43.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray46 = resolution45.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(resolution45);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean9 = compound2.equals((java.lang.Object) boolean8);
        java.lang.String str10 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str10, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution12);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit3.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = explicit3.isResolved();
        java.lang.Class<?> wildcardClass11 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str2 = compound1.toString();
        java.lang.String str3 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str6 = compound1.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str2, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str6, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("hi!");
        java.lang.Class<?> wildcardClass7 = compound2.getClass();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.Class<?> wildcardClass32 = resolution31.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        java.lang.String str37 = illegal1.toString();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        boolean boolean42 = illegal1.equals((java.lang.Object) explicit41);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str37, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = explicit3.toString();
        boolean boolean7 = explicit3.isResolved();
        byte[] byteArray8 = explicit3.resolve();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray12 = explicit4.resolve();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp22 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean23 = explicit21.equals((java.lang.Object) noOp22);
        java.lang.String str24 = noOp22.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) noOp22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray12, (net.bytebuddy.dynamic.ClassFileLocator) noOp22);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = classFileLocator26.locate("");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp22 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp22.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(resolution28);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = resolution11.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit52 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray41);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray11, classFileLocator36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray47 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray47);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray44, classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray11, classFileLocator48);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertNotNull(classFileLocator50);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean12 = explicit3.isResolved();
        boolean boolean13 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        java.lang.String str17 = explicit5.toString();
        boolean boolean18 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean11 = resolution10.isResolved();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.Class<?> wildcardClass11 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp6 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean7 = explicit5.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp6.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str12 = noOp6.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp6.locate("");
        boolean boolean15 = compound1.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp6.locate("");
        java.lang.String str18 = noOp6.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp6 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp6.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        java.lang.Class<?> wildcardClass12 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = resolution4.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = resolution3.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution3);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp12.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp12.locate("hi!");
        java.lang.String str25 = noOp12.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        java.lang.String str11 = illegal7.toString();
        java.lang.String str12 = illegal7.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = illegal7.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str12, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str34 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        boolean boolean12 = explicit5.isResolved();
        boolean boolean13 = explicit5.isResolved();
        byte[] byteArray14 = explicit5.resolve();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        byte[] byteArray16 = explicit5.resolve();
        java.lang.String str17 = explicit5.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray37 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator19, noOp21, classFileLocator33, noOp34 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str41 = compound38.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound38.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) compound38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = classFileLocator44.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray37);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(resolution46);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.ClassLoader classLoader0 = null;
        java.security.AccessControlContext accessControlContext1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0, accessControlContext1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = classLoadingDelegate2.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassNotFoundException; message: ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        } catch (java.lang.ClassNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp14.locate("hi!");
        java.lang.String str22 = noOp14.toString();
        java.lang.String str23 = noOp14.toString();
        boolean boolean24 = explicit9.equals((java.lang.Object) str23);
        java.lang.String str25 = explicit9.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        java.lang.String str17 = explicit16.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        java.lang.Class<?> wildcardClass5 = illegal1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp6 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean7 = explicit5.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp6.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str12 = noOp6.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp6.locate("");
        boolean boolean15 = compound1.equals((java.lang.Object) noOp6);
        java.lang.String str16 = noOp6.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp6 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp6.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        java.lang.String str5 = explicit3.toString();
        boolean boolean6 = explicit3.isResolved();
        java.lang.String str7 = explicit3.toString();
        java.lang.String str8 = explicit3.toString();
        boolean boolean9 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray8);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray16 = explicit15.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray16, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = classFileLocator36.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean40 = resolution39.isResolved();
        byte[] byteArray41 = resolution39.resolve();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = classFileLocator3.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.Class<?> wildcardClass6 = classFileLocator3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        java.lang.Class<?> wildcardClass30 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = compound1.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str5 = noOp4.toString();
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str9 = noOp4.toString();
        boolean boolean10 = compound1.equals((java.lang.Object) str9);
        java.lang.String str11 = compound1.toString();
        java.lang.String str12 = compound1.toString();
        java.lang.String str13 = compound1.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str11, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str12, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str13, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean39 = illegal38.isResolved();
        java.lang.String str40 = illegal38.toString();
        java.lang.String str41 = illegal38.toString();
        boolean boolean42 = compound29.equals((java.lang.Object) str41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal44 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean45 = compound29.equals((java.lang.Object) ".class");
        java.lang.String str46 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str40, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str41, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str10 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        java.lang.String str25 = noOp14.toString();
        java.lang.String str26 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution28);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        java.lang.String str35 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        boolean boolean9 = explicit3.isResolved();
        java.lang.String str10 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        java.lang.String str25 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = resolution27.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution27);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit36 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean38 = explicit36.equals((java.lang.Object) noOp37);
        java.lang.String str39 = explicit36.toString();
        boolean boolean40 = explicit36.isResolved();
        byte[] byteArray41 = explicit36.resolve();
        boolean boolean42 = compound29.equals((java.lang.Object) explicit36);
        boolean boolean43 = explicit36.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str39, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp6 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean7 = explicit5.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp6.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp6.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str12 = noOp6.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp6.locate("");
        boolean boolean15 = compound1.equals((java.lang.Object) noOp6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = compound1.locate(".class");
        boolean boolean18 = resolution17.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp6 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp6.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str12 = noOp4.toString();
        java.lang.String str13 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        boolean boolean7 = illegal1.equals((java.lang.Object) classFileLocator6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.Object obj4 = null;
        boolean boolean5 = illegal1.equals(obj4);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray44 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray41, classFileLocator45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str48 = noOp47.toString();
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator32, noOp34, classFileLocator46, noOp47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound51.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound51.locate("");
        boolean boolean56 = illegal21.equals((java.lang.Object) resolution55);
        boolean boolean57 = illegal1.equals((java.lang.Object) illegal21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = illegal21.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        java.lang.Class<?> wildcardClass31 = noOp29.getClass();
        boolean boolean32 = illegal1.equals((java.lang.Object) wildcardClass31);
        java.lang.String str33 = illegal1.toString();
        java.lang.String str34 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str33, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str34, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray10 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray5, classFileLocator11);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray22 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray22);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean29 = explicit27.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = noOp28.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = noOp28.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str34 = noOp28.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = noOp28.locate("");
        boolean boolean37 = compound23.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) noOp28);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray48 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray45, classFileLocator49);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp51 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray61 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray58, classFileLocator62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str65 = noOp64.toString();
        java.lang.String str66 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray67 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator49, noOp51, classFileLocator63, noOp64 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound68 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray67);
        boolean boolean70 = compound68.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray5, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        java.lang.Class<?> wildcardClass73 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocatorArray22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + noOp51 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp51.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str88 = compound85.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution90 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        boolean boolean91 = compound48.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = classFileLocator26.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(resolution28);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        boolean boolean26 = explicit24.isResolved();
        boolean boolean28 = explicit24.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = classFileLocator29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean32 = explicit24.equals((java.lang.Object) classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit34 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        boolean boolean36 = explicit35.isResolved();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound36.locate("");
        boolean boolean41 = explicit6.equals((java.lang.Object) compound36);
        byte[] byteArray42 = explicit6.resolve();
        byte[] byteArray43 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray43);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit24);
        java.lang.Class<?> wildcardClass26 = explicit24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str16 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean25 = illegal23.equals((java.lang.Object) classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray14, classFileLocator24);
        java.lang.Class<?> wildcardClass27 = classFileLocator26.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp24 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean25 = explicit23.equals((java.lang.Object) noOp24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp24.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution29 = noOp24.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = noOp24.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str32 = noOp24.toString();
        boolean boolean33 = illegal1.equals((java.lang.Object) str32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp24 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp24.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertNotNull(resolution29);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        java.lang.String str11 = illegal7.toString();
        java.lang.String str12 = illegal7.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = illegal7.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str12, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        java.lang.Class<?> wildcardClass14 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        byte[] byteArray12 = explicit3.resolve();
        java.lang.String str13 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = simple1.locate("ClassFileLocator.NoOp.INSTANCE");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        boolean boolean11 = explicit9.isResolved();
        boolean boolean13 = explicit9.equals((java.lang.Object) 10L);
        boolean boolean14 = explicit9.isResolved();
        java.lang.String str15 = explicit9.toString();
        byte[] byteArray16 = explicit9.resolve();
        java.lang.String str17 = explicit9.toString();
        boolean boolean18 = explicit5.equals((java.lang.Object) str17);
        byte[] byteArray19 = explicit5.resolve();
        byte[] byteArray20 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        boolean boolean11 = explicit4.isResolved();
        boolean boolean12 = explicit4.isResolved();
        byte[] byteArray13 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray13, classFileLocator14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.util.jar.JarFile jarFile0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.ForJarFile forJarFile1 = new net.bytebuddy.dynamic.ClassFileLocator.ForJarFile(jarFile0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = forJarFile1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str8 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp9.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str15 = noOp9.toString();
        java.lang.String str16 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp9.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean21 = explicit4.equals((java.lang.Object) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp9.locate("ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(resolution23);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        boolean boolean13 = explicit12.isResolved();
        boolean boolean14 = explicit12.isResolved();
        boolean boolean15 = explicit12.isResolved();
        java.lang.String str16 = explicit12.toString();
        java.lang.Class<?> wildcardClass17 = explicit12.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator6, compound36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound42 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean43 = illegal1.equals((java.lang.Object) compound42);
        boolean boolean44 = illegal1.isResolved();
        java.lang.String str45 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}" + "'", str45, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.instrument.Instrumentation instrumentation0 = null;
        java.lang.ClassLoader classLoader1 = null;
        java.security.AccessControlContext accessControlContext2 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate3 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader1, accessControlContext2);
        java.lang.ClassLoader classLoader4 = classLoadingDelegate3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.AgentBased agentBased5 = new net.bytebuddy.dynamic.ClassFileLocator.AgentBased(instrumentation0, classLoader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate3);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = noOp0.locate(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = resolution2.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(resolution2);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray8 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str20 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp14.locate("");
        boolean boolean23 = compound9.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp14.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp14.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocatorArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertNotNull(resolution28);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean8 = explicit7.isResolved();
        byte[] byteArray9 = explicit7.resolve();
        java.lang.String str10 = explicit7.toString();
        byte[] byteArray11 = explicit7.resolve();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        boolean boolean25 = explicit20.isResolved();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        java.lang.String str28 = explicit20.toString();
        boolean boolean29 = explicit16.equals((java.lang.Object) str28);
        byte[] byteArray30 = explicit16.resolve();
        java.lang.String str31 = explicit16.toString();
        boolean boolean32 = explicit7.equals((java.lang.Object) explicit16);
        byte[] byteArray33 = explicit7.resolve();
        java.lang.Class<?> wildcardClass34 = explicit7.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str28, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str12 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Compound{classFileLocator=[]}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.Map<java.lang.String, byte[]> strMap0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Simple simple1 = new net.bytebuddy.dynamic.ClassFileLocator.Simple(strMap0);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str17 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        boolean boolean31 = explicit26.isResolved();
        java.lang.String str32 = explicit26.toString();
        byte[] byteArray33 = explicit26.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray33, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray15, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = simple1.equals((java.lang.Object) classFileLocator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str32, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit46 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean48 = explicit46.equals((java.lang.Object) noOp47);
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray41, (net.bytebuddy.dynamic.ClassFileLocator) noOp47);
        boolean boolean51 = compound29.equals((java.lang.Object) byteArray41);
        java.lang.String str52 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.Class<?> wildcardClass39 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        boolean boolean7 = illegal1.equals((java.lang.Object) classFileLocator6);
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str40 = noOp39.toString();
        java.lang.String str41 = noOp39.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray42 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator24, noOp26, classFileLocator38, noOp39 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = compound43.locate("");
        boolean boolean48 = explicit13.equals((java.lang.Object) compound43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution50 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean51 = illegal1.equals((java.lang.Object) compound43);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound43.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray42);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(resolution47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(resolution50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(resolution53);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str5 = noOp0.toString();
        java.lang.String str6 = noOp0.toString();
        java.lang.String str7 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean10 = resolution9.isResolved();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str7, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        java.lang.String str37 = illegal1.toString();
        java.lang.String str38 = illegal1.toString();
        java.lang.String str39 = illegal1.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str37, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str38, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str39, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = compound1.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str5 = noOp4.toString();
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str9 = noOp4.toString();
        boolean boolean10 = compound1.equals((java.lang.Object) str9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = compound1.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        java.lang.String str15 = compound1.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str9, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str15, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        boolean boolean35 = compound33.equals((java.lang.Object) "hi!");
        boolean boolean37 = compound33.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound33.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit50 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp51 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean52 = explicit50.equals((java.lang.Object) noOp51);
        java.lang.String str53 = noOp51.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray45, (net.bytebuddy.dynamic.ClassFileLocator) noOp51);
        boolean boolean55 = compound33.equals((java.lang.Object) byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution57 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution59 = compound33.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution61 = compound33.locate("");
        boolean boolean62 = illegal1.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp51 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp51.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str53, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(resolution57);
        org.junit.Assert.assertNotNull(resolution59);
        org.junit.Assert.assertNotNull(resolution61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        java.lang.Class<?> wildcardClass17 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray4);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(classFileLocator7);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean4 = explicit3.isResolved();
        byte[] byteArray5 = explicit3.resolve();
        boolean boolean6 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        java.lang.String str10 = explicit3.toString();
        java.lang.Class<?> wildcardClass11 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        java.lang.String str5 = explicit3.toString();
        boolean boolean6 = explicit3.isResolved();
        boolean boolean7 = explicit3.isResolved();
        boolean boolean8 = explicit3.isResolved();
        byte[] byteArray9 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp2 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str3 = noOp2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = noOp2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str8 = noOp2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray1, (net.bytebuddy.dynamic.ClassFileLocator) noOp2);
        org.junit.Assert.assertTrue("'" + noOp2 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp2.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str3, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str8, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(classFileLocator11);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        java.lang.String str16 = illegal1.toString();
        java.lang.String str17 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str16, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate(".class");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate(".class");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.Class<?> wildcardClass35 = resolution34.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        java.lang.String str7 = explicit3.toString();
        byte[] byteArray8 = explicit3.resolve();
        java.lang.String str9 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        byte[] byteArray1 = null;
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray19);
        boolean boolean22 = explicit15.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName=''}");
        byte[] byteArray23 = explicit15.resolve();
        java.lang.ClassLoader classLoader24 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.of(classLoader24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray23, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}", byteArray1, classFileLocator26);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        boolean boolean38 = illegal1.equals((java.lang.Object) '#');
        boolean boolean39 = illegal1.isResolved();
        java.lang.String str40 = illegal1.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str40, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean28 = illegal27.isResolved();
        java.lang.String str29 = illegal27.toString();
        java.lang.String str30 = illegal27.toString();
        boolean boolean31 = illegal27.isResolved();
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray34);
        byte[] byteArray36 = explicit35.resolve();
        boolean boolean37 = explicit35.isResolved();
        boolean boolean39 = explicit35.equals((java.lang.Object) 10L);
        boolean boolean40 = explicit35.isResolved();
        boolean boolean41 = illegal27.equals((java.lang.Object) boolean40);
        boolean boolean42 = explicit3.equals((java.lang.Object) boolean40);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str29, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str30, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean12 = explicit3.isResolved();
        java.lang.String str13 = explicit3.toString();
        boolean boolean14 = explicit3.isResolved();
        boolean boolean15 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str2 = illegal1.toString();
        java.lang.String str3 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str2 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.Class<?> wildcardClass11 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        boolean boolean38 = illegal1.equals((java.lang.Object) '#');
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray39 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        java.lang.Class<?> wildcardClass18 = noOp4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray10 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray5, classFileLocator11);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray22 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray22);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean29 = explicit27.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = noOp28.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = noOp28.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str34 = noOp28.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = noOp28.locate("");
        boolean boolean37 = compound23.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) noOp28);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray48 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray45, classFileLocator49);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp51 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray61 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray58, classFileLocator62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str65 = noOp64.toString();
        java.lang.String str66 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray67 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator49, noOp51, classFileLocator63, noOp64 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound68 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray67);
        boolean boolean70 = compound68.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray5, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        boolean boolean74 = compound68.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str75 = compound68.toString();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocatorArray22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + noOp51 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp51.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        boolean boolean11 = explicit5.isResolved();
        boolean boolean12 = explicit5.isResolved();
        byte[] byteArray13 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean38 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("");
        byte[] byteArray41 = resolution40.resolve();
        boolean boolean42 = resolution40.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray5 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray5);
        java.lang.String str8 = compound7.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray9 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        boolean boolean11 = compound7.equals((java.lang.Object) classFileLocatorArray9);
        boolean boolean12 = illegal1.equals((java.lang.Object) compound7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str8, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str35 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray21 = resolution20.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str4 = compound3.toString();
        java.lang.String str5 = compound3.toString();
        java.lang.String str6 = compound3.toString();
        java.lang.String str7 = compound3.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str4, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str5, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str6, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str7, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray13 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound14 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray13);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean20 = explicit18.equals((java.lang.Object) noOp19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp19.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp19.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str25 = noOp19.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp19.locate("");
        boolean boolean28 = compound14.equals((java.lang.Object) noOp19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp19);
        java.lang.String str30 = noOp19.toString();
        java.lang.String str31 = noOp19.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray44 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator45 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray41, classFileLocator45);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp47 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str48 = noOp47.toString();
        java.lang.String str49 = noOp47.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray50 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator32, noOp34, classFileLocator46, noOp47 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound51 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray50);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution53 = compound51.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound51.locate("");
        boolean boolean56 = illegal21.equals((java.lang.Object) resolution55);
        boolean boolean57 = illegal1.equals((java.lang.Object) illegal21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray69 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray69);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray66, classFileLocator70);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp72 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray82 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray79, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp85 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str86 = noOp85.toString();
        java.lang.String str87 = noOp85.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray88 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator70, noOp72, classFileLocator84, noOp85 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound89 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray88);
        boolean boolean91 = compound89.equals((java.lang.Object) "hi!");
        java.lang.String str92 = compound89.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution94 = compound89.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        boolean boolean95 = illegal59.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str96 = illegal59.toString();
        java.lang.String str97 = illegal59.toString();
        boolean boolean98 = illegal1.equals((java.lang.Object) str97);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray99 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator45);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertTrue("'" + noOp47 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp47.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str48, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray50);
        org.junit.Assert.assertNotNull(resolution53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertTrue("'" + noOp72 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp72.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertTrue("'" + noOp85 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp85.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str86, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str87, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(resolution94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str96, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str97, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        java.lang.String str34 = compound29.toString();
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray43);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit50 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray49);
        byte[] byteArray51 = explicit50.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray51);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray63 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray60, classFileLocator64);
        byte[] byteArray68 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray60, classFileLocator69);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray51, classFileLocator69);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray43, classFileLocator71);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = classFileLocator71.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean75 = compound29.equals((java.lang.Object) resolution74);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution77 = compound29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(resolution77);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24, classFileLocator28);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit39 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        byte[] byteArray40 = explicit39.resolve();
        boolean boolean41 = explicit39.isResolved();
        boolean boolean43 = explicit39.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = classFileLocator44.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean47 = explicit39.equals((java.lang.Object) classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24, classFileLocator44);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit49 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit50 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray24);
        boolean boolean52 = explicit13.equals((java.lang.Object) "");
        boolean boolean53 = explicit13.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(resolution46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = classFileLocator15.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(resolution17);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator5 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        java.lang.String str3 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean19 = explicit18.isResolved();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        java.lang.Class<?> wildcardClass35 = compound29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean38 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("");
        byte[] byteArray41 = resolution40.resolve();
        byte[] byteArray42 = resolution40.resolve();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1, -1, 1]");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound35.locate("");
        boolean boolean40 = explicit5.equals((java.lang.Object) compound35);
        byte[] byteArray41 = explicit5.resolve();
        byte[] byteArray42 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit44 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        java.lang.String str45 = explicit44.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str45, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp9 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean10 = explicit8.equals((java.lang.Object) noOp9);
        java.lang.String str11 = noOp9.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp9.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp9.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp9 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp9.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str12 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray10 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        boolean boolean25 = compound11.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray8);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(classFileLocatorArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8, classFileLocator15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        boolean boolean19 = explicit18.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean8 = explicit7.isResolved();
        byte[] byteArray9 = explicit7.resolve();
        java.lang.String str10 = explicit7.toString();
        byte[] byteArray11 = explicit7.resolve();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        boolean boolean25 = explicit20.isResolved();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        java.lang.String str28 = explicit20.toString();
        boolean boolean29 = explicit16.equals((java.lang.Object) str28);
        byte[] byteArray30 = explicit16.resolve();
        java.lang.String str31 = explicit16.toString();
        boolean boolean32 = explicit7.equals((java.lang.Object) explicit16);
        java.lang.String str33 = explicit7.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str28, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str33, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray10 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray10);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean17 = explicit15.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp16.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str22 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp16.locate("");
        boolean boolean25 = compound11.equals((java.lang.Object) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray37 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray37);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray34, classFileLocator38);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp40 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str54 = noOp53.toString();
        java.lang.String str55 = noOp53.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray56 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator38, noOp40, classFileLocator52, noOp53 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound57 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray56);
        boolean boolean59 = compound57.equals((java.lang.Object) "hi!");
        boolean boolean61 = compound57.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution63 = compound57.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str64 = compound57.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal66 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean67 = illegal66.isResolved();
        java.lang.String str68 = illegal66.toString();
        java.lang.String str69 = illegal66.toString();
        boolean boolean70 = compound57.equals((java.lang.Object) str69);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound57);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit72 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        java.lang.String str73 = explicit72.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(classFileLocatorArray10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + noOp40 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp40.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str54, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(resolution63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str68, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str69, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str73, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        java.lang.String str12 = explicit3.toString();
        boolean boolean13 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str16 = illegal15.toString();
        boolean boolean17 = illegal15.isResolved();
        boolean boolean18 = explicit3.equals((java.lang.Object) boolean17);
        boolean boolean19 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str16, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray63 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray60, classFileLocator64);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp66 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str67 = noOp66.toString();
        java.lang.String str68 = noOp66.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray69 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator51, noOp53, classFileLocator65, noOp66 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound70 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray69);
        boolean boolean72 = compound70.equals((java.lang.Object) "hi!");
        boolean boolean74 = compound70.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = compound70.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = compound70.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray82 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray82);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit87 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray86);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp88 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean89 = explicit87.equals((java.lang.Object) noOp88);
        java.lang.String str90 = noOp88.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator91 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray82, (net.bytebuddy.dynamic.ClassFileLocator) noOp88);
        boolean boolean92 = compound70.equals((java.lang.Object) byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator93 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = classFileLocator93.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean96 = compound29.equals((java.lang.Object) resolution95);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray97 = resolution95.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.NoOp.INSTANCE");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertTrue("'" + noOp66 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp66.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp88 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp88.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str90, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classFileLocator93);
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate(".class");
        java.lang.String str32 = compound29.toString();
        java.lang.String str33 = compound29.toString();
        java.lang.String str34 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str20 = illegal19.toString();
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray23);
        byte[] byteArray25 = explicit24.resolve();
        boolean boolean26 = explicit24.isResolved();
        boolean boolean28 = explicit24.equals((java.lang.Object) 10L);
        java.lang.String str29 = explicit24.toString();
        byte[] byteArray30 = explicit24.resolve();
        boolean boolean31 = illegal19.equals((java.lang.Object) byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        boolean boolean33 = illegal1.equals((java.lang.Object) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str29, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray11 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp17 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean18 = explicit16.equals((java.lang.Object) noOp17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp17.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp17.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str23 = noOp17.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp17.locate("");
        boolean boolean26 = compound12.equals((java.lang.Object) noOp17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray9, (net.bytebuddy.dynamic.ClassFileLocator) noOp17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray35, classFileLocator39);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp41 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray51 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray51);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray48, classFileLocator52);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp54 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str55 = noOp54.toString();
        java.lang.String str56 = noOp54.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray57 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator39, noOp41, classFileLocator53, noOp54 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound58 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray57);
        boolean boolean60 = compound58.equals((java.lang.Object) "hi!");
        boolean boolean62 = compound58.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution64 = compound58.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str65 = compound58.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal67 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean68 = illegal67.isResolved();
        java.lang.String str69 = illegal67.toString();
        java.lang.String str70 = illegal67.toString();
        boolean boolean71 = compound58.equals((java.lang.Object) str70);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray9, (net.bytebuddy.dynamic.ClassFileLocator) compound58);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit73 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator74 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = classFileLocator74.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocatorArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp17 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp17.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + noOp41 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp41.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + noOp54 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp54.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str55, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(resolution64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str69, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str70, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator74);
        org.junit.Assert.assertNotNull(resolution76);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        boolean boolean7 = illegal1.isResolved();
        java.lang.String str8 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp24 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str38 = noOp37.toString();
        java.lang.String str39 = noOp37.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray40 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator22, noOp24, classFileLocator36, noOp37 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray40);
        boolean boolean43 = compound41.equals((java.lang.Object) "hi!");
        boolean boolean45 = compound41.equals((java.lang.Object) (-1.0d));
        java.lang.String str46 = compound41.toString();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray55);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        byte[] byteArray63 = explicit62.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray75 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray75);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator76);
        byte[] byteArray80 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray80);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator82 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray63, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray55, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution86 = classFileLocator83.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean87 = compound41.equals((java.lang.Object) resolution86);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) compound41);
        byte[] byteArray91 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit92 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray91);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp93 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean94 = explicit92.equals((java.lang.Object) noOp93);
        boolean boolean95 = explicit92.isResolved();
        boolean boolean96 = compound41.equals((java.lang.Object) explicit92);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + noOp24 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp24.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(classFileLocator82);
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(resolution86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classFileLocator88);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp93 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp93.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray10 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray5, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp34.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str40 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp34.locate("");
        boolean boolean43 = compound29.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray51, classFileLocator55);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp57 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray67 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray64, classFileLocator68);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp70 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str71 = noOp70.toString();
        java.lang.String str72 = noOp70.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray73 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator55, noOp57, classFileLocator69, noOp70 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound74 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray73);
        boolean boolean76 = compound74.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) compound74);
        boolean boolean78 = explicit4.equals((java.lang.Object) classFileLocator77);
        byte[] byteArray79 = explicit4.resolve();
        boolean boolean80 = explicit4.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertTrue("'" + noOp57 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp57.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertTrue("'" + noOp70 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp70.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str71, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str36 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("hi!");
        java.lang.String str39 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution38);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        java.lang.Class<?> wildcardClass17 = explicit6.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = compound6.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution8);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray8);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray16 = explicit15.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray16, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = classFileLocator36.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.Class<?> wildcardClass40 = classFileLocator36.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator6, compound36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound42 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean43 = illegal1.equals((java.lang.Object) compound42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound42.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(resolution45);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp34.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str40 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp34.locate("");
        boolean boolean43 = compound29.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray51, classFileLocator55);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp57 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray67 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray64, classFileLocator68);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp70 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str71 = noOp70.toString();
        java.lang.String str72 = noOp70.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray73 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator55, noOp57, classFileLocator69, noOp70 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound74 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray73);
        boolean boolean76 = compound74.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) compound74);
        boolean boolean78 = explicit4.equals((java.lang.Object) classFileLocator77);
        byte[] byteArray79 = explicit4.resolve();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray83);
        byte[] byteArray87 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit88 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray87);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp89 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean90 = explicit88.equals((java.lang.Object) noOp89);
        java.lang.String str91 = noOp89.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator92 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray83, (net.bytebuddy.dynamic.ClassFileLocator) noOp89);
        java.lang.String str93 = noOp89.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = noOp89.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean96 = explicit4.equals((java.lang.Object) resolution95);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertTrue("'" + noOp57 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp57.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertTrue("'" + noOp70 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp70.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str71, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp89 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp89.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str91, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str93, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        java.lang.Class<?> wildcardClass31 = noOp29.getClass();
        boolean boolean32 = illegal1.equals((java.lang.Object) wildcardClass31);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        java.lang.String str17 = illegal1.toString();
        java.lang.String str18 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str17, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str18, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound21 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound21.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = compound21.locate("hi!");
        boolean boolean26 = explicit4.equals((java.lang.Object) "hi!");
        boolean boolean27 = explicit4.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray18 = explicit17.resolve();
        boolean boolean19 = explicit17.isResolved();
        boolean boolean21 = explicit17.equals((java.lang.Object) 10L);
        boolean boolean22 = explicit17.isResolved();
        java.lang.String str23 = explicit17.toString();
        byte[] byteArray24 = explicit17.resolve();
        java.lang.String str25 = explicit17.toString();
        boolean boolean26 = explicit17.isResolved();
        boolean boolean27 = illegal13.equals((java.lang.Object) explicit17);
        boolean boolean28 = explicit17.isResolved();
        java.lang.String str29 = explicit17.toString();
        boolean boolean30 = explicit3.equals((java.lang.Object) str29);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str23, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str29, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        boolean boolean7 = illegal1.isResolved();
        java.lang.String str8 = illegal1.toString();
        java.lang.String str9 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp7 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean8 = explicit6.equals((java.lang.Object) noOp7);
        boolean boolean9 = illegal1.equals((java.lang.Object) explicit6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp7 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp7.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp12.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass23 = noOp12.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        java.lang.Class<?> wildcardClass6 = illegal1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        byte[] byteArray15 = explicit3.resolve();
        boolean boolean16 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp20 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str34 = noOp33.toString();
        java.lang.String str35 = noOp33.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator18, noOp20, classFileLocator32, noOp33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        boolean boolean39 = compound37.equals((java.lang.Object) "hi!");
        java.lang.String str40 = compound37.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5, (net.bytebuddy.dynamic.ClassFileLocator) compound37);
        boolean boolean42 = illegal1.equals((java.lang.Object) classFileLocator41);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertTrue("'" + noOp20 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp20.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str4 = noOp0.toString();
        java.lang.Class<?> wildcardClass5 = noOp0.getClass();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str4, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        java.lang.String str5 = explicit3.toString();
        byte[] byteArray6 = explicit3.resolve();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray11 = explicit10.resolve();
        boolean boolean12 = explicit10.isResolved();
        boolean boolean14 = explicit10.equals((java.lang.Object) 10L);
        boolean boolean15 = explicit10.isResolved();
        java.lang.String str16 = explicit10.toString();
        byte[] byteArray17 = explicit10.resolve();
        java.lang.String str18 = explicit10.toString();
        boolean boolean19 = explicit10.isResolved();
        byte[] byteArray20 = explicit10.resolve();
        boolean boolean21 = explicit3.equals((java.lang.Object) explicit10);
        byte[] byteArray22 = explicit3.resolve();
        boolean boolean23 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str18, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        byte[] byteArray9 = explicit3.resolve();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        boolean boolean25 = explicit3.equals((java.lang.Object) explicit24);
        java.lang.Class<?> wildcardClass26 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        boolean boolean27 = explicit25.isResolved();
        boolean boolean29 = explicit25.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = classFileLocator30.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean33 = explicit25.equals((java.lang.Object) classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit35 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit36 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = classFileLocator37.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("hi!");
        boolean boolean37 = resolution36.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray1);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = classFileLocator2.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean5 = resolution4.isResolved();
        boolean boolean6 = resolution4.isResolved();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray10 = explicit9.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray12 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray12);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean19 = explicit17.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp18.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp18.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str24 = noOp18.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp18.locate("");
        boolean boolean27 = compound13.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str56 = noOp55.toString();
        java.lang.String str57 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator40, noOp42, classFileLocator54, noOp55 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        boolean boolean61 = compound59.equals((java.lang.Object) "hi!");
        boolean boolean63 = compound59.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution65 = compound59.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str66 = compound59.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal68 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean69 = illegal68.isResolved();
        java.lang.String str70 = illegal68.toString();
        java.lang.String str71 = illegal68.toString();
        boolean boolean72 = compound59.equals((java.lang.Object) str71);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) compound59);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit74 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator75 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray10);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocatorArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(resolution65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str70, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str71, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertNotNull(classFileLocator75);
        org.junit.Assert.assertNotNull(classFileLocator76);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        boolean boolean38 = illegal1.equals((java.lang.Object) '#');
        java.lang.Class<?> wildcardClass39 = illegal1.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        byte[] byteArray27 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray36, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp42 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray52 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49, classFileLocator53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str56 = noOp55.toString();
        java.lang.String str57 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray58 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator40, noOp42, classFileLocator54, noOp55 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound59 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray58);
        boolean boolean61 = compound59.equals((java.lang.Object) "hi!");
        java.lang.String str62 = compound59.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, (net.bytebuddy.dynamic.ClassFileLocator) compound59);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18, (net.bytebuddy.dynamic.ClassFileLocator) compound59);
        boolean boolean65 = explicit3.equals((java.lang.Object) "hi!");
        boolean boolean66 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertTrue("'" + noOp42 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp42.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str56, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        boolean boolean6 = explicit5.isResolved();
        byte[] byteArray7 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean11 = illegal10.isResolved();
        java.lang.String str12 = illegal10.toString();
        boolean boolean13 = illegal10.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray14 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound15 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray14);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp20 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean21 = explicit19.equals((java.lang.Object) noOp20);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp20.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp20.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str26 = noOp20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp20.locate("");
        boolean boolean29 = compound15.equals((java.lang.Object) noOp20);
        boolean boolean30 = illegal10.equals((java.lang.Object) compound15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = compound15.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean33 = explicit8.equals((java.lang.Object) compound15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str12, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp20 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp20.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp13 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str27 = noOp26.toString();
        java.lang.String str28 = noOp26.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray29 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator11, noOp13, classFileLocator25, noOp26 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound30 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray29);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = compound30.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str33 = compound30.toString();
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit38 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray37);
        byte[] byteArray39 = explicit38.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        boolean boolean42 = compound30.equals((java.lang.Object) byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit44 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray46 = explicit45.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray46);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertTrue("'" + noOp13 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp13.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray29);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator47);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray8 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean15 = explicit13.equals((java.lang.Object) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp14.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp14.locate("hi!");
        java.lang.String str22 = noOp14.toString();
        java.lang.String str23 = noOp14.toString();
        boolean boolean24 = explicit9.equals((java.lang.Object) str23);
        boolean boolean25 = explicit9.isResolved();
        boolean boolean26 = explicit9.isResolved();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("");
        java.lang.String str39 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        java.lang.String str12 = explicit3.toString();
        java.lang.Class<?> wildcardClass13 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        java.lang.String str7 = explicit5.toString();
        boolean boolean8 = explicit5.isResolved();
        java.lang.String str9 = explicit5.toString();
        byte[] byteArray10 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray12 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray12);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean19 = explicit17.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp18.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp18.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str24 = noOp18.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp18.locate("");
        boolean boolean27 = compound13.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) noOp18);
        java.lang.String str29 = noOp18.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocatorArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str10 = compound9.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str10, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray25);
        byte[] byteArray27 = explicit26.resolve();
        boolean boolean28 = explicit26.isResolved();
        boolean boolean30 = explicit26.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = classFileLocator31.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean34 = explicit26.equals((java.lang.Object) classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray11, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.NoOp.INSTANCE");
        java.lang.Class<?> wildcardClass5 = illegal4.getClass();
        boolean boolean6 = illegal1.equals((java.lang.Object) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean7 = illegal6.isResolved();
        java.lang.String str8 = illegal6.toString();
        java.lang.String str9 = illegal6.toString();
        java.lang.String str10 = illegal6.toString();
        boolean boolean11 = illegal6.isResolved();
        boolean boolean12 = compound2.equals((java.lang.Object) illegal6);
        boolean boolean13 = illegal6.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = illegal6.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        java.lang.String str33 = compound29.toString();
        java.lang.String str34 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        byte[] byteArray43 = explicit42.resolve();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100]");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str36 = compound29.toString();
        java.lang.String str37 = compound29.toString();
        java.lang.String str38 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit36 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean38 = explicit36.equals((java.lang.Object) noOp37);
        java.lang.String str39 = explicit36.toString();
        boolean boolean40 = explicit36.isResolved();
        byte[] byteArray41 = explicit36.resolve();
        boolean boolean42 = compound29.equals((java.lang.Object) explicit36);
        java.lang.String str43 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str39, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        java.lang.String str6 = illegal1.toString();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        boolean boolean11 = explicit10.isResolved();
        boolean boolean12 = illegal1.equals((java.lang.Object) boolean11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str6, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp23 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray30, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp36 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str37 = noOp36.toString();
        java.lang.String str38 = noOp36.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator21, noOp23, classFileLocator35, noOp36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound40.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str43 = compound40.toString();
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit48 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray47);
        byte[] byteArray49 = explicit48.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit51 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray49);
        boolean boolean52 = compound40.equals((java.lang.Object) byteArray49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean55 = illegal54.isResolved();
        java.lang.String str56 = illegal54.toString();
        boolean boolean57 = illegal54.isResolved();
        boolean boolean58 = illegal54.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal60 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str61 = illegal60.toString();
        boolean boolean62 = illegal60.isResolved();
        boolean boolean63 = illegal54.equals((java.lang.Object) illegal60);
        boolean boolean64 = compound40.equals((java.lang.Object) illegal60);
        boolean boolean65 = illegal60.isResolved();
        boolean boolean66 = explicit3.equals((java.lang.Object) illegal60);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray79 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray79);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray76, classFileLocator80);
        byte[] byteArray84 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator85 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray84);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator86 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray76, classFileLocator85);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator87 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray76);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray76);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution90 = classFileLocator88.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean91 = illegal60.equals((java.lang.Object) resolution90);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray92 = resolution90.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertTrue("'" + noOp23 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp23.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + noOp36 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp36.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str37, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str56, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str61, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator85);
        org.junit.Assert.assertNotNull(classFileLocator86);
        org.junit.Assert.assertNotNull(classFileLocator87);
        org.junit.Assert.assertNotNull(classFileLocator88);
        org.junit.Assert.assertNotNull(resolution90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        byte[] byteArray1 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray1);
        org.junit.Assert.assertNotNull(classFileLocator2);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        boolean boolean13 = explicit3.isResolved();
        java.lang.String str14 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("");
        boolean boolean13 = resolution12.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean7 = explicit4.isResolved();
        byte[] byteArray8 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray8);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        java.lang.String str7 = explicit5.toString();
        boolean boolean8 = explicit5.isResolved();
        java.lang.String str9 = explicit5.toString();
        byte[] byteArray10 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray12 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray12);
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean19 = explicit17.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = noOp18.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = noOp18.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str24 = noOp18.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp18.locate("");
        boolean boolean27 = compound13.equals((java.lang.Object) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray10, (net.bytebuddy.dynamic.ClassFileLocator) noOp18);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution30 = noOp18.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        java.lang.Class<?> wildcardClass31 = noOp18.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str7, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocatorArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertNotNull(resolution30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = resolution3.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str12 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator8);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        java.lang.Class<?> wildcardClass91 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray42 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray39, classFileLocator43);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp45 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str46 = noOp45.toString();
        java.lang.String str47 = noOp45.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray48 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator30, noOp32, classFileLocator44, noOp45 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound49 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray48);
        boolean boolean51 = compound49.equals((java.lang.Object) "hi!");
        java.lang.String str52 = compound49.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray17, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound49);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray8);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray65 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray62, classFileLocator66);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp68 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray78 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray75, classFileLocator79);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp81 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str82 = noOp81.toString();
        java.lang.String str83 = noOp81.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray84 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator66, noOp68, classFileLocator80, noOp81 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound85 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray84);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution87 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution89 = compound85.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator90 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray8, (net.bytebuddy.dynamic.ClassFileLocator) compound85);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution92 = compound85.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str93 = compound85.toString();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertTrue("'" + noOp45 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp45.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str47, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertTrue("'" + noOp68 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp68.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertTrue("'" + noOp81 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp81.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str82, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray84);
        org.junit.Assert.assertNotNull(resolution87);
        org.junit.Assert.assertNotNull(resolution89);
        org.junit.Assert.assertNotNull(classFileLocator90);
        org.junit.Assert.assertNotNull(resolution92);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp20 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray30 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray27, classFileLocator31);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp33 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str34 = noOp33.toString();
        java.lang.String str35 = noOp33.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator18, noOp20, classFileLocator32, noOp33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp38 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str39 = noOp38.toString();
        java.lang.String str40 = noOp38.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp38.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean43 = compound37.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str44 = compound37.toString();
        java.lang.String str45 = compound37.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) compound37);
        java.lang.String str47 = compound37.toString();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertTrue("'" + noOp20 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp20.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertTrue("'" + noOp33 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp33.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertTrue("'" + noOp38 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp38.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator46);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str8 = compound3.toString();
        java.lang.String str9 = compound3.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str8, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str9, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp11 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean12 = explicit10.equals((java.lang.Object) noOp11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp11.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp11.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray3, (net.bytebuddy.dynamic.ClassFileLocator) noOp11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp11 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp11.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        boolean boolean9 = explicit8.isResolved();
        byte[] byteArray10 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate(".class");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        byte[] byteArray11 = explicit3.resolve();
        java.lang.String str12 = explicit3.toString();
        boolean boolean13 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray8);
        java.lang.Class<?> wildcardClass16 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        java.lang.String str6 = compound2.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str6, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = null;
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        // The following exception was thrown during execution in test generation
        try {
            net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = compound1.locate("ClassFileLocator.Compound{classFileLocator=[]}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        boolean boolean13 = explicit12.isResolved();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray29);
        boolean boolean37 = explicit20.equals((java.lang.Object) byteArray29);
        byte[] byteArray38 = explicit20.resolve();
        boolean boolean39 = explicit12.equals((java.lang.Object) byteArray38);
        byte[] byteArray40 = explicit12.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        java.lang.String str8 = explicit3.toString();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        java.lang.Class<?> wildcardClass13 = explicit12.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        java.lang.String str14 = explicit6.toString();
        byte[] byteArray15 = explicit6.resolve();
        boolean boolean16 = illegal1.equals((java.lang.Object) explicit6);
        boolean boolean17 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str12 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str12, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray23 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, classFileLocator24);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp26 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray36 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray33, classFileLocator37);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp39 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str40 = noOp39.toString();
        java.lang.String str41 = noOp39.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray42 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator24, noOp26, classFileLocator38, noOp39 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound43 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound43.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str46 = compound43.toString();
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit51 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray50);
        byte[] byteArray52 = explicit51.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        boolean boolean55 = compound43.equals((java.lang.Object) byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray12, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit58 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        java.lang.String str59 = explicit58.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertTrue("'" + noOp26 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp26.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertTrue("'" + noOp39 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp39.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str41, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray42);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str59, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str32 = compound29.toString();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean41 = compound29.equals((java.lang.Object) byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit42 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray38);
        boolean boolean43 = explicit42.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        java.lang.String str14 = explicit3.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean17 = explicit3.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray18 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean41 = resolution40.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        java.lang.String str6 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution14 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution16 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str17 = noOp4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(resolution14);
        org.junit.Assert.assertNotNull(resolution16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal9 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str10 = illegal9.toString();
        java.lang.String str11 = illegal9.toString();
        boolean boolean12 = explicit3.equals((java.lang.Object) illegal9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = illegal9.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str2 = compound1.toString();
        java.lang.String str3 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str8 = compound1.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str2, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str8, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        boolean boolean7 = explicit3.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) -1, (byte) 1, (byte) -1, (byte) 0, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = classFileLocator8.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean13 = resolution12.isResolved();
        java.lang.Class<?> wildcardClass14 = resolution12.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -1, 1, -1, 0, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        java.lang.String str4 = illegal1.toString();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.ClassLoader classLoader0 = null;
        java.security.AccessControlContext accessControlContext1 = null;
        net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate2 = net.bytebuddy.dynamic.ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.of(classLoader0, accessControlContext1);
        java.lang.ClassLoader classLoader3 = classLoadingDelegate2.getClassLoader();
        java.lang.ClassLoader classLoader4 = classLoadingDelegate2.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = classLoadingDelegate2.locate("");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassNotFoundException; message: ");
        } catch (java.lang.ClassNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoadingDelegate2);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray9 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit10 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean16 = explicit14.equals((java.lang.Object) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp15.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp15.locate("hi!");
        java.lang.String str23 = noOp15.toString();
        java.lang.String str24 = noOp15.toString();
        boolean boolean25 = explicit10.equals((java.lang.Object) str24);
        boolean boolean26 = explicit10.isResolved();
        byte[] byteArray27 = explicit10.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator28);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound9.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = compound9.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertNotNull(resolution13);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean20 = explicit18.equals((java.lang.Object) 1.0d);
        boolean boolean21 = explicit18.isResolved();
        java.lang.Class<?> wildcardClass22 = explicit18.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        boolean boolean11 = explicit6.isResolved();
        java.lang.String str12 = explicit6.toString();
        byte[] byteArray13 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str15 = noOp14.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution17 = noOp14.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray13, (net.bytebuddy.dynamic.ClassFileLocator) noOp14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit21 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        byte[] byteArray22 = explicit21.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray22);
        byte[] byteArray24 = explicit23.resolve();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str15, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        java.lang.String str6 = explicit4.toString();
        boolean boolean7 = explicit4.isResolved();
        java.lang.String str8 = explicit4.toString();
        java.lang.String str9 = explicit4.toString();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = classFileLocator13.locate("");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str8, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray15 = explicit14.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit17 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound29.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(resolution45);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean3 = resolution2.isResolved();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit3.equals((java.lang.Object) (byte) 100);
        boolean boolean10 = explicit3.isResolved();
        java.lang.Class<?> wildcardClass11 = explicit3.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean7 = illegal6.isResolved();
        java.lang.String str8 = illegal6.toString();
        java.lang.String str9 = illegal6.toString();
        java.lang.String str10 = illegal6.toString();
        boolean boolean11 = illegal6.isResolved();
        boolean boolean12 = compound2.equals((java.lang.Object) illegal6);
        java.lang.String str13 = illegal6.toString();
        boolean boolean14 = illegal6.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str9, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str13, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        byte[] byteArray39 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray39);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, classFileLocator42);
        boolean boolean44 = illegal1.equals((java.lang.Object) classFileLocator42);
        boolean boolean46 = illegal1.equals((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        java.lang.String str11 = illegal1.toString();
        boolean boolean12 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str11, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        boolean boolean33 = compound31.equals((java.lang.Object) "hi!");
        boolean boolean35 = compound31.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound31.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound31.locate("");
        boolean boolean40 = illegal1.equals((java.lang.Object) "");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray41 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str10 = noOp4.toString();
        java.lang.String str11 = noOp4.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp4.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str10, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str11, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        boolean boolean47 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound29.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray55 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray52, classFileLocator56);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp58 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray68 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray65, classFileLocator69);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp71 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str72 = noOp71.toString();
        java.lang.String str73 = noOp71.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray74 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator56, noOp58, classFileLocator70, noOp71 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound75 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray74);
        boolean boolean77 = compound75.equals((java.lang.Object) "hi!");
        boolean boolean79 = compound75.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution81 = compound75.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution83 = compound75.locate("");
        boolean boolean84 = illegal45.equals((java.lang.Object) "");
        java.lang.String str85 = illegal45.toString();
        java.lang.String str86 = illegal45.toString();
        byte[] byteArray89 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit90 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray89);
        byte[] byteArray91 = explicit90.resolve();
        boolean boolean92 = explicit90.isResolved();
        boolean boolean94 = explicit90.equals((java.lang.Object) 10L);
        boolean boolean95 = explicit90.isResolved();
        boolean boolean96 = explicit90.isResolved();
        boolean boolean97 = illegal45.equals((java.lang.Object) explicit90);
        boolean boolean98 = compound29.equals((java.lang.Object) illegal45);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray99 = illegal45.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertTrue("'" + noOp58 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp58.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertTrue("'" + noOp71 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp71.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str73, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(resolution81);
        org.junit.Assert.assertNotNull(resolution83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str85, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str86, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        boolean boolean16 = explicit5.isResolved();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        java.lang.String str25 = explicit20.toString();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        boolean boolean29 = explicit5.equals((java.lang.Object) byteArray27);
        boolean boolean30 = explicit5.isResolved();
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit34 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp35 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean36 = explicit34.equals((java.lang.Object) noOp35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = noOp35.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = noOp35.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp35.locate("hi!");
        java.lang.String str43 = noOp35.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = noOp35.locate(".class");
        boolean boolean46 = explicit5.equals((java.lang.Object) ".class");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp35 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp35.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str43, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray15 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray12, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp18 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str32 = noOp31.toString();
        java.lang.String str33 = noOp31.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray34 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator16, noOp18, classFileLocator30, noOp31 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound35 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound35.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound35.locate("");
        boolean boolean40 = explicit5.equals((java.lang.Object) compound35);
        byte[] byteArray41 = explicit5.resolve();
        byte[] byteArray42 = explicit5.resolve();
        java.lang.String str43 = explicit5.toString();
        boolean boolean44 = explicit5.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertTrue("'" + noOp18 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp18.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray34);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str43, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        java.lang.String str2 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = noOp0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str5 = noOp0.toString();
        java.lang.String str6 = noOp0.toString();
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str2, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str3 = compound2.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray4 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        boolean boolean6 = compound2.equals((java.lang.Object) classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray4);
        java.lang.String str11 = compound10.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(classFileLocatorArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str11, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        java.lang.String str34 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound29.locate("");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution42);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = resolution9.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        boolean boolean6 = illegal1.isResolved();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        boolean boolean21 = explicit19.isResolved();
        boolean boolean23 = explicit19.equals((java.lang.Object) 10L);
        boolean boolean24 = explicit19.isResolved();
        java.lang.String str25 = explicit19.toString();
        byte[] byteArray26 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution30 = noOp27.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) noOp27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray13, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit34 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray47 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray47);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray44, classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp50 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray60 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator61 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray60);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray57, classFileLocator61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str64 = noOp63.toString();
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray66 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator48, noOp50, classFileLocator62, noOp63 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound67 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray66);
        boolean boolean69 = compound67.equals((java.lang.Object) "hi!");
        boolean boolean71 = compound67.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution73 = compound67.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution75 = compound67.locate("");
        boolean boolean76 = illegal37.equals((java.lang.Object) "");
        java.lang.String str77 = illegal37.toString();
        java.lang.String str78 = illegal37.toString();
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit82 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray81);
        byte[] byteArray83 = explicit82.resolve();
        boolean boolean84 = explicit82.isResolved();
        boolean boolean86 = explicit82.equals((java.lang.Object) 10L);
        boolean boolean87 = explicit82.isResolved();
        boolean boolean88 = explicit82.isResolved();
        boolean boolean89 = illegal37.equals((java.lang.Object) explicit82);
        byte[] byteArray90 = explicit82.resolve();
        byte[] byteArray91 = explicit82.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator92 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray91);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator93 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray13, classFileLocator92);
        boolean boolean94 = illegal1.equals((java.lang.Object) byteArray13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str25, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertTrue("'" + noOp50 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp50.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator61);
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str64, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(resolution73);
        org.junit.Assert.assertNotNull(resolution75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str77, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str78, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator92);
        org.junit.Assert.assertNotNull(classFileLocator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.Object obj36 = null;
        boolean boolean37 = compound29.equals(obj36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        boolean boolean37 = resolution35.isResolved();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str40 = compound29.toString();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        java.lang.String str41 = compound40.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound40.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(resolution43);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp30 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str31 = noOp30.toString();
        java.lang.String str32 = noOp30.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = noOp30.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean35 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str36 = compound29.toString();
        java.lang.String str37 = compound29.toString();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit41 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray40);
        byte[] byteArray42 = explicit41.resolve();
        boolean boolean43 = explicit41.isResolved();
        boolean boolean45 = explicit41.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution48 = classFileLocator46.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean49 = explicit41.equals((java.lang.Object) classFileLocator46);
        java.lang.String str50 = explicit41.toString();
        boolean boolean51 = explicit41.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal53 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str54 = illegal53.toString();
        boolean boolean55 = illegal53.isResolved();
        boolean boolean56 = explicit41.equals((java.lang.Object) boolean55);
        boolean boolean57 = compound29.equals((java.lang.Object) boolean56);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + noOp30 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp30.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str32, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(resolution48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str50, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str54, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray18, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp24 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str38 = noOp37.toString();
        java.lang.String str39 = noOp37.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray40 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator22, noOp24, classFileLocator36, noOp37 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray40);
        boolean boolean43 = compound41.equals((java.lang.Object) "hi!");
        boolean boolean45 = compound41.equals((java.lang.Object) (-1.0d));
        java.lang.String str46 = compound41.toString();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray55);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        byte[] byteArray63 = explicit62.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray75 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator76 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray75);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator76);
        byte[] byteArray80 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray80);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator82 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray72, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray63, classFileLocator81);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator84 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray55, classFileLocator83);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution86 = classFileLocator83.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean87 = compound41.equals((java.lang.Object) resolution86);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) compound41);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution90 = classFileLocator88.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.Class<?> wildcardClass91 = resolution90.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertTrue("'" + noOp24 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp24.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str38, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str39, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator76);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertNotNull(classFileLocator82);
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(classFileLocator84);
        org.junit.Assert.assertNotNull(resolution86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classFileLocator88);
        org.junit.Assert.assertNotNull(resolution90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        java.lang.Object obj39 = null;
        boolean boolean40 = compound38.equals(obj39);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(resolution42);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        java.lang.String str2 = compound1.toString();
        java.lang.String str3 = compound1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound1.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean6 = resolution5.isResolved();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str2, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str3, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator0 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution2 = classFileLocator0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = classFileLocator0.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.Class<?> wildcardClass5 = resolution4.getClass();
        org.junit.Assert.assertNotNull(classFileLocator0);
        org.junit.Assert.assertNotNull(resolution2);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray50 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray50);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray47, classFileLocator51);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp53 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray63 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator64 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray60, classFileLocator64);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp66 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str67 = noOp66.toString();
        java.lang.String str68 = noOp66.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray69 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator51, noOp53, classFileLocator65, noOp66 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound70 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray69);
        boolean boolean72 = compound70.equals((java.lang.Object) "hi!");
        boolean boolean74 = compound70.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = compound70.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution78 = compound70.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray82 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator83 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray82);
        byte[] byteArray86 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit87 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray86);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp88 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean89 = explicit87.equals((java.lang.Object) noOp88);
        java.lang.String str90 = noOp88.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator91 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray82, (net.bytebuddy.dynamic.ClassFileLocator) noOp88);
        boolean boolean92 = compound70.equals((java.lang.Object) byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator93 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray82);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution95 = classFileLocator93.locate("ClassFileLocator.NoOp.INSTANCE");
        boolean boolean96 = compound29.equals((java.lang.Object) resolution95);
        boolean boolean97 = resolution95.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + noOp53 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp53.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator64);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertTrue("'" + noOp66 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp66.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertNotNull(resolution78);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator83);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp88 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp88.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str90, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classFileLocator93);
        org.junit.Assert.assertNotNull(resolution95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        boolean boolean43 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution47 = compound29.locate("hi!");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(resolution45);
        org.junit.Assert.assertNotNull(resolution47);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        boolean boolean19 = illegal1.isResolved();
        java.lang.String str20 = illegal1.toString();
        java.lang.String str21 = illegal1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str20, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str21, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        java.lang.String str5 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray11, classFileLocator15);
        byte[] byteArray20 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray20);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray32 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray29, classFileLocator33);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp35 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray42, classFileLocator46);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp48 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str49 = noOp48.toString();
        java.lang.String str50 = noOp48.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray51 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator33, noOp35, classFileLocator47, noOp48 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound52 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray51);
        boolean boolean54 = compound52.equals((java.lang.Object) "hi!");
        java.lang.String str55 = compound52.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) compound52);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator57 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) compound52);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution59 = compound52.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean61 = compound52.equals((java.lang.Object) 0.0f);
        boolean boolean62 = illegal1.equals((java.lang.Object) boolean61);
        java.lang.String str63 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray64 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertTrue("'" + noOp35 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp35.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + noOp48 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp48.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str49, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str50, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(classFileLocator57);
        org.junit.Assert.assertNotNull(resolution59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str63, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        boolean boolean8 = explicit7.isResolved();
        byte[] byteArray9 = explicit7.resolve();
        java.lang.String str10 = explicit7.toString();
        byte[] byteArray11 = explicit7.resolve();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        boolean boolean25 = explicit20.isResolved();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        java.lang.String str28 = explicit20.toString();
        boolean boolean29 = explicit16.equals((java.lang.Object) str28);
        byte[] byteArray30 = explicit16.resolve();
        java.lang.String str31 = explicit16.toString();
        boolean boolean32 = explicit7.equals((java.lang.Object) explicit16);
        byte[] byteArray38 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit43 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean45 = explicit43.equals((java.lang.Object) noOp44);
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray38, (net.bytebuddy.dynamic.ClassFileLocator) noOp44);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray49 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound50 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray49);
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray53);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp55 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean56 = explicit54.equals((java.lang.Object) noOp55);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution58 = noOp55.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = noOp55.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str61 = noOp55.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution63 = noOp55.locate("");
        boolean boolean64 = compound50.equals((java.lang.Object) noOp55);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator65 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray38, (net.bytebuddy.dynamic.ClassFileLocator) compound50);
        boolean boolean66 = explicit7.equals((java.lang.Object) compound50);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str28, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str31, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocatorArray49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp55 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp55.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(resolution58);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str61, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classFileLocator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution10 = classFileLocator8.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean11 = explicit3.equals((java.lang.Object) classFileLocator8);
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(resolution10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str6 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution8 = noOp0.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = resolution8.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str6, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution8);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        java.lang.String str13 = explicit12.toString();
        boolean boolean14 = explicit12.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        java.lang.Class<?> wildcardClass47 = illegal1.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator9 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray8);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit15 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray16 = explicit15.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        byte[] byteArray33 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray33);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray16, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator37 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray8, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = classFileLocator36.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator9);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(classFileLocator37);
        org.junit.Assert.assertNotNull(resolution39);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound4 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound5 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound6 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound7 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound8 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound9 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = compound9.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str12 = compound9.toString();
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str12, "ClassFileLocator.Compound{classFileLocator=[]}");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray31 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator32 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray31);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator33 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray28, classFileLocator32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str35 = noOp34.toString();
        java.lang.String str36 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray37 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator19, noOp21, classFileLocator33, noOp34 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound38 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray37);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str41 = compound38.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound38.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6, (net.bytebuddy.dynamic.ClassFileLocator) compound38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution46 = compound38.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray47 = resolution46.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator32);
        org.junit.Assert.assertNotNull(classFileLocator33);
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str35, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str36, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray37);
        org.junit.Assert.assertNotNull(resolution40);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(resolution46);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        byte[] byteArray14 = explicit13.resolve();
        boolean boolean15 = explicit13.isResolved();
        boolean boolean17 = explicit13.equals((java.lang.Object) 10L);
        boolean boolean18 = explicit13.isResolved();
        java.lang.String str19 = explicit13.toString();
        byte[] byteArray20 = explicit13.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str22 = noOp21.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp21.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) noOp21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray7, classFileLocator26);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray51, classFileLocator55);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp57 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str58 = noOp57.toString();
        java.lang.String str59 = noOp57.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray60 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator42, noOp44, classFileLocator56, noOp57 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound61 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray60);
        boolean boolean63 = compound61.equals((java.lang.Object) "hi!");
        boolean boolean65 = compound61.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution67 = compound61.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution69 = compound61.locate("");
        boolean boolean70 = illegal31.equals((java.lang.Object) "");
        java.lang.String str71 = illegal31.toString();
        java.lang.String str72 = illegal31.toString();
        byte[] byteArray75 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit76 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray75);
        byte[] byteArray77 = explicit76.resolve();
        boolean boolean78 = explicit76.isResolved();
        boolean boolean80 = explicit76.equals((java.lang.Object) 10L);
        boolean boolean81 = explicit76.isResolved();
        boolean boolean82 = explicit76.isResolved();
        boolean boolean83 = illegal31.equals((java.lang.Object) explicit76);
        byte[] byteArray84 = explicit76.resolve();
        byte[] byteArray85 = explicit76.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator86 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray85);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator87 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray7, classFileLocator86);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator88 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray7);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str19, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertTrue("'" + noOp57 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp57.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str58, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str59, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(resolution67);
        org.junit.Assert.assertNotNull(resolution69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str71, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str72, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator86);
        org.junit.Assert.assertNotNull(classFileLocator87);
        org.junit.Assert.assertNotNull(classFileLocator88);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound29.locate(".class");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray52);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator61 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray60);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray72 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray72);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator74 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray69, classFileLocator73);
        byte[] byteArray77 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray77);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray69, classFileLocator78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray60, classFileLocator78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray52, classFileLocator80);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit82 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        boolean boolean83 = compound29.equals((java.lang.Object) explicit82);
        java.lang.Class<?> wildcardClass84 = explicit82.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator61);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertNotNull(classFileLocator74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean4 = illegal3.isResolved();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16);
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit31 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray30);
        byte[] byteArray32 = explicit31.resolve();
        boolean boolean33 = explicit31.isResolved();
        boolean boolean35 = explicit31.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = classFileLocator36.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean39 = explicit31.equals((java.lang.Object) classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16, classFileLocator36);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16, classFileLocator41);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit47 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray46);
        byte[] byteArray48 = explicit47.resolve();
        boolean boolean49 = explicit47.isResolved();
        boolean boolean51 = explicit47.equals((java.lang.Object) 10L);
        boolean boolean52 = explicit47.isResolved();
        java.lang.String str53 = explicit47.toString();
        byte[] byteArray54 = explicit47.resolve();
        byte[] byteArray55 = explicit47.resolve();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray59);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit64 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray63);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp65 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean66 = explicit64.equals((java.lang.Object) noOp65);
        java.lang.String str67 = noOp65.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray59, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray55, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator70 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) noOp65);
        boolean boolean71 = illegal3.equals((java.lang.Object) noOp65);
        java.lang.String str72 = noOp65.toString();
        boolean boolean73 = illegal1.equals((java.lang.Object) noOp65);
        boolean boolean74 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray75 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str53, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp65 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp65.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str67, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertNotNull(classFileLocator70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str8 = illegal7.toString();
        boolean boolean9 = illegal7.isResolved();
        boolean boolean10 = illegal1.equals((java.lang.Object) illegal7);
        boolean boolean11 = illegal1.isResolved();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit20 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray19);
        byte[] byteArray21 = explicit20.resolve();
        boolean boolean22 = explicit20.isResolved();
        boolean boolean24 = explicit20.equals((java.lang.Object) 10L);
        boolean boolean25 = explicit20.isResolved();
        java.lang.String str26 = explicit20.toString();
        byte[] byteArray27 = explicit20.resolve();
        java.lang.String str28 = explicit20.toString();
        boolean boolean29 = explicit16.equals((java.lang.Object) str28);
        byte[] byteArray30 = explicit16.resolve();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit37 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray36);
        byte[] byteArray38 = explicit37.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray38);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray40 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray40);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp46 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean47 = explicit45.equals((java.lang.Object) noOp46);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution49 = noOp46.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution51 = noOp46.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str52 = noOp46.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution54 = noOp46.locate("");
        boolean boolean55 = compound41.equals((java.lang.Object) noOp46);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray38, (net.bytebuddy.dynamic.ClassFileLocator) noOp46);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray66 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray66);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray63, classFileLocator67);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp69 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray79 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray79);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray76, classFileLocator80);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp82 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str83 = noOp82.toString();
        java.lang.String str84 = noOp82.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray85 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator67, noOp69, classFileLocator81, noOp82 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound86 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray85);
        boolean boolean88 = compound86.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator89 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray38, (net.bytebuddy.dynamic.ClassFileLocator) compound86);
        boolean boolean90 = explicit16.equals((java.lang.Object) classFileLocator89);
        byte[] byteArray91 = explicit16.resolve();
        boolean boolean92 = illegal1.equals((java.lang.Object) byteArray91);
        java.lang.String str93 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str26, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str28, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator39);
        org.junit.Assert.assertNotNull(classFileLocatorArray40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp46 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp46.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(resolution49);
        org.junit.Assert.assertNotNull(resolution51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str52, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + noOp69 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp69.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertTrue("'" + noOp82 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp82.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str83, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str84, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classFileLocator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[100]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str93, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        java.lang.String str9 = explicit4.toString();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit13 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray17);
        boolean boolean20 = explicit13.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName=''}");
        byte[] byteArray21 = explicit13.resolve();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray26);
        byte[] byteArray28 = explicit27.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit30 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray40 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator41 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray40);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray37, classFileLocator41);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp43 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray53 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator54 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray53);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray50, classFileLocator54);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp56 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str57 = noOp56.toString();
        java.lang.String str58 = noOp56.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray59 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator41, noOp43, classFileLocator55, noOp56 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound60 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray59);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = compound60.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str63 = compound60.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution65 = compound60.locate("");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray28, (net.bytebuddy.dynamic.ClassFileLocator) compound60);
        java.lang.String str67 = compound60.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray21, (net.bytebuddy.dynamic.ClassFileLocator) compound60);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = classFileLocator68.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator41);
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertTrue("'" + noOp43 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp43.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator54);
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertTrue("'" + noOp56 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp56.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str57, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str58, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray59);
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(resolution65);
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(resolution70);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        byte[] byteArray3 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator4 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution12 = classFileLocator10.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray3, classFileLocator10);
        java.lang.Class<?> wildcardClass14 = classFileLocator10.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(resolution12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean6 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean9 = illegal8.isResolved();
        java.lang.String str10 = illegal8.toString();
        boolean boolean11 = illegal8.isResolved();
        boolean boolean12 = explicit3.equals((java.lang.Object) illegal8);
        byte[] byteArray13 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str16 = noOp15.toString();
        java.lang.String str17 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str20 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution24 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        java.lang.String str27 = noOp15.toString();
        java.lang.String str28 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution30 = noOp15.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean31 = explicit14.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str10, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(resolution24);
        org.junit.Assert.assertNotNull(resolution26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit18 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray16);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray28 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray25, classFileLocator29);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp31 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray41 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray38, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp44 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str45 = noOp44.toString();
        java.lang.String str46 = noOp44.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray47 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator29, noOp31, classFileLocator43, noOp44 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound48 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray47);
        boolean boolean50 = compound48.equals((java.lang.Object) "hi!");
        java.lang.String str51 = compound48.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, (net.bytebuddy.dynamic.ClassFileLocator) compound48);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution55 = compound48.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal57 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean58 = compound48.equals((java.lang.Object) illegal57);
        boolean boolean59 = illegal57.isResolved();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertTrue("'" + noOp31 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp31.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertTrue("'" + noOp44 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp44.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str45, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str46, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(resolution55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        java.lang.String str5 = explicit4.toString();
        java.lang.String str6 = explicit4.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str5, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}" + "'", str6, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        java.lang.String str12 = explicit4.toString();
        byte[] byteArray13 = explicit4.resolve();
        boolean boolean14 = explicit4.isResolved();
        byte[] byteArray15 = explicit4.resolve();
        java.lang.Object obj16 = null;
        boolean boolean17 = explicit4.equals(obj16);
        byte[] byteArray18 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str12, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean9 = explicit5.equals((java.lang.Object) 10L);
        boolean boolean10 = explicit5.isResolved();
        java.lang.String str11 = explicit5.toString();
        byte[] byteArray12 = explicit5.resolve();
        java.lang.String str13 = explicit5.toString();
        boolean boolean14 = explicit5.isResolved();
        boolean boolean15 = illegal1.equals((java.lang.Object) explicit5);
        byte[] byteArray16 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray17 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound18 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound19 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution21 = compound19.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal23.isResolved();
        java.lang.String str25 = illegal23.toString();
        java.lang.String str26 = illegal23.toString();
        java.lang.String str27 = illegal23.toString();
        boolean boolean28 = illegal23.isResolved();
        boolean boolean29 = compound19.equals((java.lang.Object) illegal23);
        boolean boolean30 = explicit5.equals((java.lang.Object) illegal23);
        boolean boolean31 = illegal23.isResolved();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocatorArray17);
        org.junit.Assert.assertNotNull(resolution21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str25, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str26, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str27, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator8 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray7);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray19 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator20);
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray16, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray7, classFileLocator25);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit32 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray31);
        byte[] byteArray33 = explicit32.resolve();
        boolean boolean34 = explicit32.isResolved();
        boolean boolean36 = explicit32.equals((java.lang.Object) 10L);
        boolean boolean37 = explicit32.isResolved();
        java.lang.String str38 = explicit32.toString();
        byte[] byteArray39 = explicit32.resolve();
        java.lang.String str40 = explicit32.toString();
        byte[] byteArray41 = explicit32.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator42 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray41);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator43 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray7, classFileLocator42);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution45 = classFileLocator43.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator8);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str38, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str40, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator42);
        org.junit.Assert.assertNotNull(classFileLocator43);
        org.junit.Assert.assertNotNull(resolution45);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        java.lang.String str2 = illegal1.toString();
        java.lang.Object obj3 = null;
        boolean boolean4 = illegal1.equals(obj3);
        java.lang.String str5 = illegal1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        boolean boolean4 = illegal1.isResolved();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray5);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray10 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray5, classFileLocator11);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray18);
        byte[] byteArray20 = explicit19.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray20);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray22 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound23 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray22);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit27 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp28 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean29 = explicit27.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = noOp28.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = noOp28.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str34 = noOp28.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = noOp28.locate("");
        boolean boolean37 = compound23.equals((java.lang.Object) noOp28);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) noOp28);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray48 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray45, classFileLocator49);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp51 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray61 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator62 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator63 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray58, classFileLocator62);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp64 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str65 = noOp64.toString();
        java.lang.String str66 = noOp64.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray67 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator49, noOp51, classFileLocator63, noOp64 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound68 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray67);
        boolean boolean70 = compound68.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray20, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray5, (net.bytebuddy.dynamic.ClassFileLocator) compound68);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = compound68.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocatorArray22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp28 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp28.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertTrue("'" + noOp51 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp51.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator62);
        org.junit.Assert.assertNotNull(classFileLocator63);
        org.junit.Assert.assertTrue("'" + noOp64 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp64.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str66, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(resolution74);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str34 = compound29.toString();
        java.lang.String str35 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str38 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution40 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution40);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean6 = explicit3.equals((java.lang.Object) (short) 0);
        byte[] byteArray7 = explicit3.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        boolean boolean9 = explicit8.isResolved();
        boolean boolean10 = explicit8.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        boolean boolean27 = explicit25.isResolved();
        boolean boolean29 = explicit25.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = classFileLocator30.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean33 = explicit25.equals((java.lang.Object) classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray10);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(classFileLocator35);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.Object obj3 = null;
        boolean boolean4 = illegal1.equals(obj3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Resolution.Illegal{typeName=''}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        boolean boolean9 = explicit3.isResolved();
        boolean boolean10 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray11 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound12 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound13 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound14 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        boolean boolean15 = explicit3.equals((java.lang.Object) classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound16 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound17 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound18 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray11);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = compound18.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp21 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str22 = noOp21.toString();
        java.lang.String str23 = noOp21.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution25 = noOp21.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        java.lang.String str26 = noOp21.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution28 = noOp21.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution30 = noOp21.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution32 = noOp21.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean33 = compound18.equals((java.lang.Object) noOp21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = noOp21.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertTrue("'" + noOp21 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp21.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str22, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution28);
        org.junit.Assert.assertNotNull(resolution30);
        org.junit.Assert.assertNotNull(resolution32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        boolean boolean7 = explicit5.isResolved();
        boolean boolean8 = explicit5.isResolved();
        java.lang.String str9 = explicit5.toString();
        byte[] byteArray10 = explicit5.resolve();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray19);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray10, classFileLocator21);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit24 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator25);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        boolean boolean31 = compound29.equals((java.lang.Object) "hi!");
        boolean boolean33 = compound29.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound29.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = compound29.locate("");
        java.lang.String str38 = compound29.toString();
        java.lang.String str39 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution41 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound29.locate(".class");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) 10, (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator53 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.NoOp.INSTANCE", byteArray52);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator61 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray60);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray72 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray72);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator74 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray69, classFileLocator73);
        byte[] byteArray77 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator78 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray77);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator79 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray69, classFileLocator78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator80 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray60, classFileLocator78);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator81 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray52, classFileLocator80);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit82 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray52);
        boolean boolean83 = compound29.equals((java.lang.Object) explicit82);
        byte[] byteArray84 = explicit82.resolve();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution41);
        org.junit.Assert.assertNotNull(resolution43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, 10, -1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator61);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertNotNull(classFileLocator74);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator78);
        org.junit.Assert.assertNotNull(classFileLocator79);
        org.junit.Assert.assertNotNull(classFileLocator80);
        org.junit.Assert.assertNotNull(classFileLocator81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 100, 10, 10, -1, 100]");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        byte[] byteArray11 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str13 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = noOp12.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray11, (net.bytebuddy.dynamic.ClassFileLocator) noOp12);
        java.lang.String str17 = noOp12.toString();
        java.lang.String str18 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution20 = noOp12.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp12.locate("ClassFileLocator.NoOp.INSTANCE");
        java.lang.String str23 = noOp12.toString();
        java.lang.String str24 = noOp12.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution26 = noOp12.locate("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str13, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution15);
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str18, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution20);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str23, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution26);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp4 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean5 = explicit3.equals((java.lang.Object) noOp4);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp4.locate("");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = noOp4.locate(".class");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution11 = noOp4.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean12 = resolution11.isResolved();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp4 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp4.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
        org.junit.Assert.assertNotNull(resolution11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7, classFileLocator11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray7);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution15 = classFileLocator13.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(resolution15);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        byte[] byteArray10 = explicit3.resolve();
        java.lang.String str11 = explicit3.toString();
        boolean boolean12 = explicit3.isResolved();
        byte[] byteArray13 = explicit3.resolve();
        java.lang.String str14 = explicit3.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal16 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean17 = explicit3.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean21 = illegal19.equals((java.lang.Object) classFileLocator20);
        java.lang.String str22 = illegal19.toString();
        boolean boolean23 = illegal19.isResolved();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray34 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator36 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray31, classFileLocator35);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp37 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray47 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator48 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray47);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray44, classFileLocator48);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp50 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str51 = noOp50.toString();
        java.lang.String str52 = noOp50.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray53 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator35, noOp37, classFileLocator49, noOp50 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound54 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray53);
        boolean boolean56 = compound54.equals((java.lang.Object) "hi!");
        boolean boolean58 = compound54.equals((java.lang.Object) (-1.0d));
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution60 = compound54.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution62 = compound54.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        byte[] byteArray66 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray66);
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit71 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray70);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp72 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean73 = explicit71.equals((java.lang.Object) noOp72);
        java.lang.String str74 = noOp72.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator75 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray66, (net.bytebuddy.dynamic.ClassFileLocator) noOp72);
        boolean boolean76 = compound54.equals((java.lang.Object) byteArray66);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray66);
        boolean boolean78 = illegal19.equals((java.lang.Object) byteArray66);
        boolean boolean79 = explicit3.equals((java.lang.Object) boolean78);
        byte[] byteArray80 = explicit3.resolve();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}" + "'", str22, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertNotNull(classFileLocator36);
        org.junit.Assert.assertTrue("'" + noOp37 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp37.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator48);
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertTrue("'" + noOp50 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp50.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str51, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str52, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(resolution60);
        org.junit.Assert.assertNotNull(resolution62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp72 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp72.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str74, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, 100]");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        java.lang.String str4 = illegal1.toString();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        byte[] byteArray21 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray21);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray13);
        boolean boolean25 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean26 = illegal1.isResolved();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray9 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound10 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound11 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = compound11.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean14 = explicit3.equals((java.lang.Object) compound11);
        boolean boolean15 = explicit3.isResolved();
        byte[] byteArray17 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}", byteArray17);
        boolean boolean19 = explicit3.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<1 bytes>}");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classFileLocatorArray9);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator12 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray11);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray8, classFileLocator12);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp14 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray24 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray21, classFileLocator25);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp27 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str28 = noOp27.toString();
        java.lang.String str29 = noOp27.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray30 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator12, noOp14, classFileLocator26, noOp27 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound31 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray30);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound31.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound31.locate("");
        boolean boolean36 = illegal1.equals((java.lang.Object) resolution35);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit40 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray39);
        byte[] byteArray41 = explicit40.resolve();
        java.lang.String str42 = explicit40.toString();
        boolean boolean43 = explicit40.isResolved();
        java.lang.Class<?> wildcardClass44 = explicit40.getClass();
        boolean boolean45 = illegal1.equals((java.lang.Object) wildcardClass44);
        boolean boolean46 = illegal1.isResolved();
        boolean boolean47 = illegal1.isResolved();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit59 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray58);
        byte[] byteArray60 = explicit59.resolve();
        boolean boolean61 = explicit59.isResolved();
        boolean boolean63 = explicit59.equals((java.lang.Object) 10L);
        boolean boolean64 = explicit59.isResolved();
        java.lang.String str65 = explicit59.toString();
        byte[] byteArray66 = explicit59.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp67 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str68 = noOp67.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution70 = noOp67.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator71 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray66, (net.bytebuddy.dynamic.ClassFileLocator) noOp67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator72 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray66);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator73 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray53, classFileLocator72);
        boolean boolean74 = illegal1.equals((java.lang.Object) classFileLocator72);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = classFileLocator72.locate("");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator12);
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertTrue("'" + noOp14 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp14.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(classFileLocator26);
        org.junit.Assert.assertTrue("'" + noOp27 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp27.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str28, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str29, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray30);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str42, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 10, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str65, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp67 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp67.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str68, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution70);
        org.junit.Assert.assertNotNull(classFileLocator71);
        org.junit.Assert.assertNotNull(classFileLocator72);
        org.junit.Assert.assertNotNull(classFileLocator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(resolution76);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str17 = noOp16.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = noOp16.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray15, (net.bytebuddy.dynamic.ClassFileLocator) noOp16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator22 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray15);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit23 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray15);
        byte[] byteArray24 = explicit23.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal26 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean28 = illegal26.equals((java.lang.Object) classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator29 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<5 bytes>}", byteArray24, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='hi!'}'}", byteArray24);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str17, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(classFileLocator22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classFileLocator29);
        org.junit.Assert.assertNotNull(classFileLocator30);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray12 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9, classFileLocator13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray9, classFileLocator16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit19 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray9);
        java.lang.Class<?> wildcardClass20 = explicit19.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray4 = explicit3.resolve();
        boolean boolean5 = explicit3.isResolved();
        boolean boolean7 = explicit3.equals((java.lang.Object) 10L);
        boolean boolean8 = explicit3.isResolved();
        java.lang.String str9 = explicit3.toString();
        boolean boolean10 = explicit3.isResolved();
        boolean boolean11 = explicit3.isResolved();
        byte[] byteArray12 = explicit3.resolve();
        byte[] byteArray13 = explicit3.resolve();
        byte[] byteArray14 = explicit3.resolve();
        java.lang.String str15 = explicit3.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str9, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray2);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray7);
        byte[] byteArray9 = explicit8.resolve();
        boolean boolean10 = explicit8.isResolved();
        boolean boolean12 = explicit8.equals((java.lang.Object) 10L);
        boolean boolean13 = explicit8.isResolved();
        java.lang.String str14 = explicit8.toString();
        byte[] byteArray15 = explicit8.resolve();
        java.lang.String str16 = explicit8.toString();
        boolean boolean17 = explicit4.equals((java.lang.Object) str16);
        byte[] byteArray18 = explicit4.resolve();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        byte[] byteArray26 = explicit25.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit33 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray32);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp34 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean35 = explicit33.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution37 = noOp34.locate("ClassFileLocator.NoOp.INSTANCE");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution39 = noOp34.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.String str40 = noOp34.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution42 = noOp34.locate("");
        boolean boolean43 = compound29.equals((java.lang.Object) noOp34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator44 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) noOp34);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray54 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator55 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray54);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator56 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray51, classFileLocator55);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp57 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray67 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray67);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator69 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray64, classFileLocator68);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp70 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str71 = noOp70.toString();
        java.lang.String str72 = noOp70.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray73 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator55, noOp57, classFileLocator69, noOp70 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound74 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray73);
        boolean boolean76 = compound74.equals((java.lang.Object) "hi!");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator77 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray26, (net.bytebuddy.dynamic.ClassFileLocator) compound74);
        boolean boolean78 = explicit4.equals((java.lang.Object) classFileLocator77);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution80 = classFileLocator77.locate("hi!");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str14, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str16, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp34 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp34.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(resolution37);
        org.junit.Assert.assertNotNull(resolution39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str40, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classFileLocator44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator55);
        org.junit.Assert.assertNotNull(classFileLocator56);
        org.junit.Assert.assertTrue("'" + noOp57 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp57.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertNotNull(classFileLocator69);
        org.junit.Assert.assertTrue("'" + noOp70 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp70.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str71, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str72, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classFileLocator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(resolution80);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal(".class");
        boolean boolean2 = illegal1.isResolved();
        java.lang.String str3 = illegal1.toString();
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        byte[] byteArray10 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray10);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution13 = classFileLocator11.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean14 = illegal7.equals((java.lang.Object) resolution13);
        boolean boolean15 = illegal1.equals((java.lang.Object) boolean14);
        boolean boolean16 = illegal1.isResolved();
        boolean boolean17 = illegal1.isResolved();
        boolean boolean18 = illegal1.isResolved();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray19 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound20 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray19);
        java.lang.String str21 = compound20.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution23 = compound20.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean24 = illegal1.equals((java.lang.Object) "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit28 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean30 = explicit28.equals((java.lang.Object) noOp29);
        java.lang.Class<?> wildcardClass31 = noOp29.getClass();
        boolean boolean32 = illegal1.equals((java.lang.Object) wildcardClass31);
        boolean boolean33 = illegal1.isResolved();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for .class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='.class'}" + "'", str3, "ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertNotNull(resolution13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classFileLocatorArray19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ClassFileLocator.Compound{classFileLocator=[]}" + "'", str21, "ClassFileLocator.Compound{classFileLocator=[]}");
        org.junit.Assert.assertNotNull(resolution23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator2 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        boolean boolean3 = illegal1.equals((java.lang.Object) classFileLocator2);
        boolean boolean4 = illegal1.isResolved();
        boolean boolean5 = illegal1.isResolved();
        org.junit.Assert.assertNotNull(classFileLocator2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        java.lang.String str34 = compound29.toString();
        java.lang.String str35 = compound29.toString();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray45 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator46 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator47 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray42, classFileLocator46);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp48 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray58 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator59 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray58);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator60 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray55, classFileLocator59);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp61 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str62 = noOp61.toString();
        java.lang.String str63 = noOp61.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray64 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator46, noOp48, classFileLocator60, noOp61 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound65 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray64);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution67 = compound65.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution69 = compound65.locate("");
        java.lang.String str70 = compound65.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution72 = compound65.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution74 = compound65.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution76 = compound65.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean77 = compound29.equals((java.lang.Object) "ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator46);
        org.junit.Assert.assertNotNull(classFileLocator47);
        org.junit.Assert.assertTrue("'" + noOp48 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp48.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator59);
        org.junit.Assert.assertNotNull(classFileLocator60);
        org.junit.Assert.assertTrue("'" + noOp61 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp61.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str62, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str63, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray64);
        org.junit.Assert.assertNotNull(resolution67);
        org.junit.Assert.assertNotNull(resolution69);
        org.junit.Assert.assertNotNull(resolution72);
        org.junit.Assert.assertNotNull(resolution74);
        org.junit.Assert.assertNotNull(resolution76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean8 = illegal7.isResolved();
        boolean boolean10 = illegal7.equals((java.lang.Object) 100);
        boolean boolean11 = illegal1.equals((java.lang.Object) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        java.lang.String str14 = illegal1.toString();
        java.lang.String str15 = illegal1.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator16 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = classFileLocator16.locate("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean19 = illegal1.equals((java.lang.Object) resolution18);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str15, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(classFileLocator16);
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp0 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str1 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution3 = noOp0.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        java.lang.String str4 = noOp0.toString();
        java.lang.String str5 = noOp0.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = noOp0.locate("hi!");
        org.junit.Assert.assertTrue("'" + noOp0 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp0.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str1, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str4, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str5, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution7);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound3 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution5 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution7 = compound3.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution9 = compound3.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution5);
        org.junit.Assert.assertNotNull(resolution7);
        org.junit.Assert.assertNotNull(resolution9);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("hi!");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        boolean boolean7 = illegal1.equals((java.lang.Object) classFileLocator6);
        java.lang.String str8 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName='hi!'}" + "'", str8, "ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit5 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray4);
        byte[] byteArray6 = explicit5.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator7 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray6);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit8 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit12 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray11);
        byte[] byteArray13 = explicit12.resolve();
        boolean boolean14 = explicit12.isResolved();
        boolean boolean16 = explicit12.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution19 = classFileLocator17.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean20 = explicit12.equals((java.lang.Object) classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = classFileLocator17.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        boolean boolean23 = explicit8.equals((java.lang.Object) resolution22);
        byte[] byteArray24 = explicit8.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit25 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray24);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator26 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(resolution19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator26);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName=''}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray17 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray17);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator18);
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit29 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray28);
        byte[] byteArray30 = explicit29.resolve();
        boolean boolean31 = explicit29.isResolved();
        boolean boolean33 = explicit29.equals((java.lang.Object) 10L);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator34 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.ofClassPath();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = classFileLocator34.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        boolean boolean37 = explicit29.equals((java.lang.Object) classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator38 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray14, classFileLocator34);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator39 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator40 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray14, classFileLocator39);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit45 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray44);
        byte[] byteArray46 = explicit45.resolve();
        boolean boolean47 = explicit45.isResolved();
        boolean boolean49 = explicit45.equals((java.lang.Object) 10L);
        boolean boolean50 = explicit45.isResolved();
        java.lang.String str51 = explicit45.toString();
        byte[] byteArray52 = explicit45.resolve();
        byte[] byteArray53 = explicit45.resolve();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator58 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit62 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray61);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp63 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        boolean boolean64 = explicit62.equals((java.lang.Object) noOp63);
        java.lang.String str65 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator66 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray57, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator67 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='.class'}", byteArray53, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator68 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp63);
        boolean boolean69 = illegal1.equals((java.lang.Object) noOp63);
        java.lang.String str70 = noOp63.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution72 = noOp63.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertNotNull(classFileLocator25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classFileLocator34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(classFileLocator38);
        org.junit.Assert.assertNotNull(classFileLocator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str51, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp63 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp63.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str65, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocator66);
        org.junit.Assert.assertNotNull(classFileLocator67);
        org.junit.Assert.assertNotNull(classFileLocator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str70, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution72);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Compound{classFileLocator=[]}");
        boolean boolean2 = illegal1.isResolved();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator6 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray16 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray16);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator18 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray13, classFileLocator17);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray29 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator30 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray29);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator31 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray26, classFileLocator30);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp32 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str33 = noOp32.toString();
        java.lang.String str34 = noOp32.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray35 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator17, noOp19, classFileLocator31, noOp32 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound36 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray35);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound36.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray39 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator6, compound36 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound41 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound42 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray39);
        boolean boolean43 = illegal1.equals((java.lang.Object) compound42);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray44 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ClassFileLocator.Compound{classFileLocator=[]}");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
        org.junit.Assert.assertNotNull(classFileLocator18);
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator30);
        org.junit.Assert.assertNotNull(classFileLocator31);
        org.junit.Assert.assertTrue("'" + noOp32 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp32.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str33, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str34, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray35);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertNotNull(classFileLocatorArray39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator3 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray2);
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray13 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator14 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray13);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator15 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray10, classFileLocator14);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp16 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray26 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator27 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray26);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator28 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray23, classFileLocator27);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp29 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str30 = noOp29.toString();
        java.lang.String str31 = noOp29.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray32 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator14, noOp16, classFileLocator28, noOp29 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound33 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray32);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution35 = compound33.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray36 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator3, compound33 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound37 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray36);
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray38 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound39 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound40 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray38);
        boolean boolean41 = compound37.equals((java.lang.Object) classFileLocatorArray38);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution43 = compound37.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}'}");
        java.lang.String str44 = compound37.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator14);
        org.junit.Assert.assertNotNull(classFileLocator15);
        org.junit.Assert.assertTrue("'" + noOp16 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp16.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator27);
        org.junit.Assert.assertNotNull(classFileLocator28);
        org.junit.Assert.assertTrue("'" + noOp29 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp29.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str30, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str31, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray32);
        org.junit.Assert.assertNotNull(resolution35);
        org.junit.Assert.assertNotNull(classFileLocatorArray36);
        org.junit.Assert.assertNotNull(classFileLocatorArray38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(resolution43);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp15 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str16 = noOp15.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution18 = noOp15.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator19 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray14, (net.bytebuddy.dynamic.ClassFileLocator) noOp15);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}", byteArray14);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit22 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray14);
        byte[] byteArray23 = explicit22.resolve();
        byte[] byteArray24 = explicit22.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator25 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Compound{classFileLocator=[]}", byteArray24);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp15 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp15.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str16, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution18);
        org.junit.Assert.assertNotNull(classFileLocator19);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator25);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution33 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='.class'}");
        java.lang.ClassLoader classLoader34 = null;
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator35 = net.bytebuddy.dynamic.ClassFileLocator.ForClassLoader.WeaklyReferenced.of(classLoader34);
        boolean boolean36 = compound29.equals((java.lang.Object) classLoader34);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray48 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator49 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray48);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator50 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray45, classFileLocator49);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator51 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator52 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}'}", byteArray45);
        boolean boolean53 = compound29.equals((java.lang.Object) byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit54 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit55 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray45);
        byte[] byteArray56 = explicit55.resolve();
        boolean boolean57 = explicit55.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution33);
        org.junit.Assert.assertNotNull(classFileLocator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator49);
        org.junit.Assert.assertNotNull(classFileLocator50);
        org.junit.Assert.assertNotNull(classFileLocator51);
        org.junit.Assert.assertNotNull(classFileLocator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray0 = new net.bytebuddy.dynamic.ClassFileLocator[] {};
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound1 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound2 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray0);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution4 = compound2.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution6 = compound2.locate("hi!");
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit11 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray10);
        byte[] byteArray12 = explicit11.resolve();
        boolean boolean13 = explicit11.isResolved();
        boolean boolean15 = explicit11.equals((java.lang.Object) 10L);
        boolean boolean16 = explicit11.isResolved();
        java.lang.String str17 = explicit11.toString();
        byte[] byteArray18 = explicit11.resolve();
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp19 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str20 = noOp19.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution22 = noOp19.locate("ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='hi!'}", byteArray18, (net.bytebuddy.dynamic.ClassFileLocator) noOp19);
        java.lang.String str24 = noOp19.toString();
        java.lang.String str25 = noOp19.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution27 = noOp19.locate("ClassFileLocator.Resolution.Illegal{typeName='hi!'}");
        boolean boolean28 = compound2.equals((java.lang.Object) noOp19);
        org.junit.Assert.assertNotNull(classFileLocatorArray0);
        org.junit.Assert.assertNotNull(resolution4);
        org.junit.Assert.assertNotNull(resolution6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str17, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + noOp19 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp19.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str20, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution22);
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str24, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str25, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(resolution27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray9 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator10 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray9);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator11 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray6, classFileLocator10);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp12 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        byte[] byteArray22 = new byte[] { (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator23 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("hi!", byteArray22);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator24 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("", byteArray19, classFileLocator23);
        net.bytebuddy.dynamic.ClassFileLocator.NoOp noOp25 = net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE;
        java.lang.String str26 = noOp25.toString();
        java.lang.String str27 = noOp25.toString();
        net.bytebuddy.dynamic.ClassFileLocator[] classFileLocatorArray28 = new net.bytebuddy.dynamic.ClassFileLocator[] { classFileLocator10, noOp12, classFileLocator24, noOp25 };
        net.bytebuddy.dynamic.ClassFileLocator.Compound compound29 = new net.bytebuddy.dynamic.ClassFileLocator.Compound(classFileLocatorArray28);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution31 = compound29.locate("ClassFileLocator.Compound{classFileLocator=[]}");
        java.lang.String str32 = compound29.toString();
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution34 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution36 = compound29.locate("hi!");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution resolution38 = compound29.locate("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}");
        boolean boolean39 = resolution38.isResolved();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator10);
        org.junit.Assert.assertNotNull(classFileLocator11);
        org.junit.Assert.assertTrue("'" + noOp12 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp12.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(classFileLocator23);
        org.junit.Assert.assertNotNull(classFileLocator24);
        org.junit.Assert.assertTrue("'" + noOp25 + "' != '" + net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE + "'", noOp25.equals(net.bytebuddy.dynamic.ClassFileLocator.NoOp.INSTANCE));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str26, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ClassFileLocator.NoOp.INSTANCE" + "'", str27, "ClassFileLocator.NoOp.INSTANCE");
        org.junit.Assert.assertNotNull(classFileLocatorArray28);
        org.junit.Assert.assertNotNull(resolution31);
        org.junit.Assert.assertNotNull(resolution34);
        org.junit.Assert.assertNotNull(resolution36);
        org.junit.Assert.assertNotNull(resolution38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        boolean boolean2 = illegal1.isResolved();
        boolean boolean3 = illegal1.isResolved();
        java.lang.String str4 = illegal1.toString();
        java.lang.String str5 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str4, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str5, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        java.lang.String str10 = explicit4.toString();
        boolean boolean11 = explicit4.isResolved();
        boolean boolean12 = explicit4.isResolved();
        byte[] byteArray13 = explicit4.resolve();
        byte[] byteArray14 = explicit4.resolve();
        byte[] byteArray15 = explicit4.resolve();
        byte[] byteArray16 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator17 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray16);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str10, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator17);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal3 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Resolution.Illegal{typeName=''}'}");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit7 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray6);
        byte[] byteArray8 = explicit7.resolve();
        boolean boolean9 = explicit7.isResolved();
        boolean boolean11 = explicit7.equals((java.lang.Object) 10L);
        boolean boolean12 = explicit7.isResolved();
        java.lang.String str13 = explicit7.toString();
        byte[] byteArray14 = explicit7.resolve();
        java.lang.String str15 = explicit7.toString();
        byte[] byteArray16 = explicit7.resolve();
        boolean boolean17 = explicit7.isResolved();
        byte[] byteArray18 = explicit7.resolve();
        boolean boolean19 = illegal3.equals((java.lang.Object) byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator20 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName=''}", byteArray18);
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator21 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of("ClassFileLocator.Resolution.Illegal{typeName='ClassFileLocator.Compound{classFileLocator=[]}'}", byteArray18);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str13, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classFileLocator20);
        org.junit.Assert.assertNotNull(classFileLocator21);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal illegal1 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Illegal("");
        java.lang.String str2 = illegal1.toString();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit6 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray5);
        byte[] byteArray7 = explicit6.resolve();
        boolean boolean8 = explicit6.isResolved();
        boolean boolean10 = explicit6.equals((java.lang.Object) 10L);
        java.lang.String str11 = explicit6.toString();
        byte[] byteArray12 = explicit6.resolve();
        boolean boolean13 = illegal1.equals((java.lang.Object) byteArray12);
        java.lang.String str14 = illegal1.toString();
        java.lang.String str15 = illegal1.toString();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = illegal1.resolve();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Could not locate class file for ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str2, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str11, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str14, "ClassFileLocator.Resolution.Illegal{typeName=''}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Illegal{typeName=''}" + "'", str15, "ClassFileLocator.Resolution.Illegal{typeName=''}");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100 };
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit4 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray3);
        byte[] byteArray5 = explicit4.resolve();
        boolean boolean6 = explicit4.isResolved();
        boolean boolean8 = explicit4.equals((java.lang.Object) 10L);
        boolean boolean9 = explicit4.isResolved();
        boolean boolean10 = explicit4.isResolved();
        boolean boolean11 = explicit4.isResolved();
        byte[] byteArray12 = explicit4.resolve();
        net.bytebuddy.dynamic.ClassFileLocator classFileLocator13 = net.bytebuddy.dynamic.ClassFileLocator.Simple.of(".class", byteArray12);
        net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit explicit14 = new net.bytebuddy.dynamic.ClassFileLocator.Resolution.Explicit(byteArray12);
        java.lang.String str15 = explicit14.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(classFileLocator13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}" + "'", str15, "ClassFileLocator.Resolution.Explicit{binaryRepresentation=<2 bytes>}");
    }
}

