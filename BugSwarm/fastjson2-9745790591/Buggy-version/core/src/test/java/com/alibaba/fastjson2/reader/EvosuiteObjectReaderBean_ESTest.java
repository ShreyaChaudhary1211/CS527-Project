/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:50:42 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;

import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.util.Enumeration;
import java.util.Locale;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EvosuiteObjectReaderBean_ESTest extends EvosuiteObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ObjectReaderException<Locale.FilteringMode> objectReaderException0 = new ObjectReaderException<Locale.FilteringMode>(class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      objectReaderException0.initDefaultValue(locale_FilteringMode0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 1701, (int) (byte)0);
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      Integer integer0 = new Integer(0);
      objectReaderException0.processExtra(jSONReader1, integer0);
      assertEquals("@type", objectReaderException0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectReaderException<InputStream> objectReaderException0 = new ObjectReaderException<InputStream>(class0);
      byte[] byteArray0 = new byte[6];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 0, (-787));
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.of("", jSONReader_Context0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader1, (Type) class0, (Object) locale_FilteringMode0, (long) (byte)45);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // illegal fieldName input\u001A, offset 0, character \u001A, line 1, column 1, fastjson-version 2.0.21
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try {
        objectReaderException0.readObject((JSONReader) null, (Type) class0, (Object) locale_FilteringMode0, 10000000000000000L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 1701, (int) (byte) (-71));
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      Integer integer0 = new Integer(244);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra(jSONReader1, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType((JSONReader) null, class0, (-1857));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectReaderException<InputStream> objectReaderException0 = new ObjectReaderException<InputStream>(class0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      objectReaderException0.acceptExtra(sequenceInputStream0, "", class0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 1701, (int) (byte) (-71));
      Integer integer0 = new Integer(244);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra(jSONReader0, integer0);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // TODO : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      String[] stringArray0 = new String[7];
      ObjectReaderSeeAlso<Object> objectReaderSeeAlso0 = null;
      try {
        objectReaderSeeAlso0 = new ObjectReaderSeeAlso<Object>(class0, (Supplier<Object>) null, "6u\"!e57C-", classArray0, stringArray0, (FieldReader[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectReaderException<InputStream> objectReaderException0 = new ObjectReaderException<InputStream>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra((JSONReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }
}
