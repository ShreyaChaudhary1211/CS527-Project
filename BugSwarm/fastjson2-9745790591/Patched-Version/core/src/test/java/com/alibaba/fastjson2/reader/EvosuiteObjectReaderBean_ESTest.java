/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:02:53 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.JSONWriter;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.filter.Filter;
import com.alibaba.fastjson2.filter.SimplePropertyPreFilter;

import java.io.ByteArrayInputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.time.chrono.HijrahEra;
import java.util.Locale;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EvosuiteObjectReaderBean_ESTest extends EvosuiteObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 1624, (int) (byte)0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, (-4314457471973557243L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      objectReaderException0.initDefaultValue((Object) null);
      assertEquals(3044221079117626727L, objectReaderException0.getTypeKeyHash());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      JSONWriter jSONWriter0 = JSONWriter.of();
      JSONReader jSONReader0 = JSONReader.ofJSONB((byte[]) null, 1132, 1132, (SymbolTable) null);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) jSONWriter0, (long) 1132);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HijrahEra> class0 = HijrahEra.class;
      ObjectReaderException<HijrahEra> objectReaderException0 = new ObjectReaderException<HijrahEra>(class0);
      byte[] byteArray0 = new byte[7];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, 39, (int) (byte)54, (SymbolTable) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) pushbackInputStream0, (-831L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 1624, (int) (byte)0);
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.of("", (int) (byte)0, 0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader1, (Object) jSONReader1, (long) (byte)28);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // offset 0, character \u001A, line 1, column 1, fastjson-version 2.0.21
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject((JSONReader) null, (Object) class0, (-849L));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra((JSONReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType((JSONReader) null, class1, 1560L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[0];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, 2515, 102);
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType(jSONReader0, class0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2515
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      ObjectReader objectReader0 = objectReaderException0.checkAutoType(jSONReader0, class0, (byte) (-44));
      assertNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      objectReaderException0.acceptExtra(class0, (String) null, objectReaderProvider0.SAFE_MODE);
      assertEquals(3044221079117626727L, objectReaderException0.getTypeKeyHash());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      String[] stringArray0 = new String[7];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.AllowUnQuotedFieldNames;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.SupportSmartMatch;
      jSONReader_FeatureArray0[2] = jSONReader_Feature1;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[1];
      jSONReader_Context0.config((Filter) simplePropertyPreFilter0, jSONReader_FeatureArray0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderException0.processExtra(jSONReader0, objectReaderCreator0);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // TODO : INT32 0
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      objectReaderException0.processExtra(jSONReader0, objectReaderCreator0);
      assertFalse(jSONReader0.isEnd());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      ObjectReaderImplMap objectReaderImplMap0 = ObjectReaderImplMap.INSTANCE_OBJECT;
      Class class1 = objectReaderImplMap0.instanceType;
      // Undeclared exception!
      try {
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class1, objectReaderImplMap0, 769L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try {
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class0, (Object) null, (-1L));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 6);
      String[] stringArray0 = new String[5];
      ObjectReaderSeeAlso<HijrahEra> objectReaderSeeAlso0 = null;
      try {
        objectReaderSeeAlso0 = new ObjectReaderSeeAlso<HijrahEra>(class0, (Supplier<HijrahEra>) null, "(51yv@4uW:=", classArray0, stringArray0, (FieldReader[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ObjectReaderException<Locale.LanguageRange> objectReaderException0 = new ObjectReaderException<Locale.LanguageRange>(class0);
      Class<Locale.LanguageRange> class1 = objectReaderException0.getObjectClass();
      assertNotNull(class1);
      assertEquals(0L, objectReaderException0.getFeatures());
  }
}
