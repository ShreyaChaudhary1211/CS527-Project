/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 22:19:03 GMT 2024
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.serializer.SerializerFeature;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteSerializerFeature_ESTest extends EvosuiteSerializerFeature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      // Undeclared exception!
      try { 
        SerializerFeature.of(serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializerFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.valueOf("WriteNullStringAsEmpty");
      assertEquals(SerializerFeature.WriteNullStringAsEmpty, serializerFeature0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = SerializerFeature.values();
      int int0 = SerializerFeature.of(serializerFeatureArray0);
      assertEquals(1073741823, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      int int0 = SerializerFeature.config((-899), serializerFeature0, true);
      assertEquals((-899), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerializerFeature.isEnabled((-1569), (SerializerFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializerFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerializerFeature.isEnabled((-1569), (-1569), (SerializerFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializerFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SerializerFeature.config(0, (SerializerFeature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializerFeature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      int int0 = SerializerFeature.of(serializerFeatureArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = SerializerFeature.of((SerializerFeature[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      int int0 = SerializerFeature.config(0, serializerFeature0, true);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      int int0 = SerializerFeature.config(0, serializerFeature0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      boolean boolean0 = SerializerFeature.isEnabled(0, 0, serializerFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      boolean boolean0 = SerializerFeature.isEnabled(0, 831, serializerFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      boolean boolean0 = SerializerFeature.isEnabled(831, 0, serializerFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      boolean boolean0 = SerializerFeature.isEnabled(8, serializerFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      boolean boolean0 = SerializerFeature.isEnabled(0, serializerFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      int int0 = serializerFeature0.getMask();
      assertEquals(8, int0);
  }
}
