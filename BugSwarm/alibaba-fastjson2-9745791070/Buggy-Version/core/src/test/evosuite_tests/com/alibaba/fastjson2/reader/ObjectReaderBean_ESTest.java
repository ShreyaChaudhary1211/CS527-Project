/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:13:55 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.JSONWriter;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.reader.ObjectReaderCreator;
import com.alibaba.fastjson2.reader.ObjectReaderException;
import com.alibaba.fastjson2.reader.ObjectReaderProvider;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectReaderBean_ESTest extends ObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      Integer integer0 = new Integer(1619);
      objectReaderException0.initDefaultValue(integer0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[9];
      JSONReader jSONReader0 = JSONReader.of(charArray0);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) jSONReader0, (-1278L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal fieldName input\u0000, offset 1, character \u0000, line 1, column 2, fastjson-version 2.0.21 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) class0, 8388608L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject((JSONReader) null, (Object) class0, 4295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ObjectReaderException<Annotation> objectReaderException0 = new ObjectReaderException<Annotation>(class0);
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[5];
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of(byteArray0, (int) (byte)0, (int) (byte) (-114), charset0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, jSONWriter_FeatureArray0[1], (byte)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      char[] charArray0 = new char[1];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      Class<PushbackInputStream> class1 = PushbackInputStream.class;
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType(jSONReader0, class1, (-5147L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[0];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForDoubles;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[4];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[2];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType(jSONReader0, class0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONReader0.read(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 0, character \u001A, line 1, column 1, fastjson-version 2.0.21 
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[6];
      // Undeclared exception!
      try { 
        jSONReader0.readObject((Object) objectReaderProvider0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 0, character \u001A, line 1, column 1, fastjson-version 2.0.21 
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      objectReaderException0.acceptExtra(class0, "", "");
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[0];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, jSONReader_Context0, 1763L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[0];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, jSONReader_Context0, (-1763L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect {, but [, class java.lang.Integer, parent fieldName com.alibaba.fastjson2.JSONReader$Context@35, offset 0, character \u001A, line 1, column 1, fastjson-version 2.0.21 
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class0, pushbackInputStream0, 574L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      Class<Object> class1 = objectReaderException0.getObjectClass();
      assertEquals(0L, objectReaderException0.getFeatures());
      assertNotNull(class1);
  }
}
