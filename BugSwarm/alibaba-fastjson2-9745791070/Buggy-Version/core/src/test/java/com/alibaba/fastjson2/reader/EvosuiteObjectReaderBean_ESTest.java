/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:18:49 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.JSONWriter;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.filter.Filter;
import com.alibaba.fastjson2.schema.JSONSchema;
import com.alibaba.fastjson2.writer.ObjectWriterProvider;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.chrono.HijrahEra;
import java.util.function.Function;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class EvosuiteObjectReaderBean_ESTest extends EvosuiteObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      objectReaderException0.initDefaultValue(class0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Filter> class0 = Filter.class;
      ObjectReaderException<Filter> objectReaderException0 = new ObjectReaderException<Filter>(class0);
      byte[] byteArray0 = new byte[1];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) jSONReader0, (long) (byte)62);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // illegal fieldName input\u001A, offset 1, character \u001A, line 1, column 2, fastjson-version 2.0.21 \u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[6];
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      JSONWriter.Context jSONWriter_Context0 = new JSONWriter.Context(objectWriterProvider0);
      JSONWriter jSONWriter0 = JSONWriter.ofUTF8(jSONWriter_Context0);
      Charset charset0 = jSONWriter0.getCharset();
      JSONReader jSONReader0 = JSONReader.of(byteArray0, (int) (byte) (-10), (int) (byte) (-10), charset0);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) charset0, (long) (byte) (-14));
        fail("Expecting exception: StringIndexOutOfBoundsException");

      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[7];
      JSONReader jSONReader0 = JSONReader.of(charArray0, 1109, 0);
      Long long0 = new Long(1109);
      // Undeclared exception!
      try {
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) long0, (-164L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try {
        objectReaderException0.readObject((JSONReader) null, (Object) pipedOutputStream0, 0L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[7];
      JSONReader jSONReader0 = JSONReader.of(charArray0, 1109, 0);
      Class<HijrahEra> class1 = HijrahEra.class;
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType(jSONReader0, class1, 0);
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectReaderException<InputStream> objectReaderException0 = new ObjectReaderException<InputStream>(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try {
        objectReaderException0.checkAutoType((JSONReader) null, class1, 0L);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[9];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try {
        objectReaderException0.readArrayMappingJSONBObject(jSONReader0, class0, (Object) null, (byte) (-111));
        fail("Expecting exception: RuntimeException");

      } catch(RuntimeException e) {
         //
         // array not support input INT32 0, offset 1/9
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      objectReaderException0.acceptExtra(pipedInputStream0, "u", pipedInputStream0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      Class<String> class1 = String.class;
      Supplier<String> supplier0 = objectReaderCreator0.createInstanceSupplier(class1);
      ObjectReader1<String> objectReader1_0 = null;
      try {
        objectReader1_0 = new ObjectReader1<String>(class0, (-1662L), (JSONSchema) null, supplier0, (Function) null, (FieldReader) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldReader<String>[] fieldReaderArray0 = (FieldReader<String>[]) Array.newInstance(FieldReader.class, 2);
      ObjectReader4<Long> objectReader4_0 = null;
      try {
        objectReader4_0 = new ObjectReader4<Long>((Class) null, "", (String) null, (-31L), (JSONSchema) null, (Supplier<Long>) null, (Function) null, fieldReaderArray0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }
}
