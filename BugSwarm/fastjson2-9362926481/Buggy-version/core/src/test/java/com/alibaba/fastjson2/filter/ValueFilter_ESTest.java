/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:12:56 GMT 2024
 */

package com.alibaba.fastjson2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.filter.ValueFilter;
import com.alibaba.fastjson2.function.impl.StringToAny;
import com.alibaba.fastjson2.function.impl.ToBigDecimal;
import com.alibaba.fastjson2.function.impl.ToBigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueFilter_ESTest extends ValueFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ValueFilter valueFilter0 = ValueFilter.of((String) null, (Map) hashMap0);
      ValueFilter valueFilter1 = ValueFilter.of((String) null, (Map) hashMap0);
      ValueFilter valueFilter2 = ValueFilter.compose(valueFilter1, valueFilter0);
      assertFalse(valueFilter2.equals((Object)valueFilter0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ToBigDecimal toBigDecimal0 = new ToBigDecimal();
      ValueFilter valueFilter0 = ValueFilter.of("", (Function) toBigDecimal0);
      Object object0 = valueFilter0.apply(toBigDecimal0, (String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put("*;^r;O&fw-qi~", "*;^r;O&fw-qi~");
      ValueFilter valueFilter0 = ValueFilter.of("*;^r;O&fw-qi~", (Map) hashMap0);
      Integer integer0 = new Integer(8);
      Object object1 = valueFilter0.apply(object0, "?XE1gZnZ];]Q(", integer0);
      assertEquals(8, object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.put("*;^r;O&fw-qi~", "*;^r;O&fw-qi~");
      ToBigInteger toBigInteger0 = new ToBigInteger();
      ValueFilter valueFilter0 = ValueFilter.of((Predicate<String>) null, (Function) toBigInteger0);
      // Undeclared exception!
      try { 
        valueFilter0.apply(object0, "", valueFilter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to BigInteger class com.alibaba.fastjson2.filter.ValueFilter$$Lambda$63/1239397891
         //
         verifyException("com.alibaba.fastjson2.function.impl.ToBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ToBigDecimal toBigDecimal0 = new ToBigDecimal();
      ValueFilter valueFilter0 = ValueFilter.of("", (Function) toBigDecimal0);
      // Undeclared exception!
      try { 
        valueFilter0.apply(valueFilter0, "", "");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueFilter valueFilter0 = ValueFilter.of("com.alibaba.fastjson2.JSONPath$NameMatchFilter", (Map) null);
      // Undeclared exception!
      try { 
        valueFilter0.apply((Object) null, "com.alibaba.fastjson2.JSONPath$NameMatchFilter", "com.alibaba.fastjson2.JSONPath$NameMatchFilter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.filter.ValueFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ValueFilter valueFilter0 = ValueFilter.of("", (Map) null);
      Class<String> class0 = String.class;
      StringToAny stringToAny0 = new StringToAny(class0, "");
      ValueFilter valueFilter1 = ValueFilter.of((Predicate<String>) null, (Function) stringToAny0);
      Integer integer0 = new Integer(1261);
      // Undeclared exception!
      try { 
        valueFilter1.apply(valueFilter0, "com.alibaba.fastjson2.JSONPath$RandomIndexSegment", integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson2.function.impl.StringToAny", e);
      }
  }
}
