/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 22:50:10 GMT 2024
 */

package com.alibaba.fastjson2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.filter.ValueFilter;
import com.alibaba.fastjson2.function.impl.StringToAny;
import com.alibaba.fastjson2.function.impl.ToByte;
import com.alibaba.fastjson2.function.impl.ToDouble;
import com.alibaba.fastjson2.function.impl.ToShort;
import com.alibaba.fastjson2.function.impl.ToString;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueFilter_ESTest extends ValueFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ValueFilter valueFilter0 = ValueFilter.of("0", (Map) hashMap0);
      Short short0 = Short.valueOf("0");
      ToShort toShort0 = new ToShort(short0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) toShort0);
      ValueFilter valueFilter1 = ValueFilter.of(predicate0, (Function) toShort0);
      ValueFilter valueFilter2 = ValueFilter.compose(valueFilter0, valueFilter1);
      assertFalse(valueFilter2.equals((Object)valueFilter0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ValueFilter valueFilter0 = ValueFilter.of("", (Map) hashMap0);
      Object object0 = valueFilter0.apply("", "", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ToString toString0 = new ToString();
      Double double0 = new Double(0.0);
      ToDouble toDouble0 = new ToDouble(double0);
      Function function0 = toString0.andThen((Function) toDouble0);
      ValueFilter valueFilter0 = ValueFilter.of("G4_2K--6*", (Function) toString0);
      Integer integer0 = new Integer(921111605);
      ValueFilter valueFilter1 = ValueFilter.of((Predicate<String>) null, function0);
      // Undeclared exception!
      try { 
        valueFilter1.apply(integer0, "aQWqw9+K`q", valueFilter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ValueFilter valueFilter0 = ValueFilter.of("Yes", (Function) null);
      // Undeclared exception!
      try { 
        valueFilter0.apply((Object) null, "Yes", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.filter.ValueFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = new Object();
      StringToAny stringToAny0 = new StringToAny(class0, object0);
      ValueFilter valueFilter0 = ValueFilter.of((String) null, (Function) stringToAny0);
      // Undeclared exception!
      try { 
        valueFilter0.apply(stringToAny0, "rN'}c.&RZdbNHfP.", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson2.function.impl.StringToAny", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueFilter valueFilter0 = ValueFilter.of("", (Map) null);
      Object object0 = new Object();
      Object object1 = valueFilter0.apply((Object) null, "R*AN4JUl/LH9_", object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Byte byte0 = new Byte((byte)113);
      ToByte toByte0 = new ToByte(byte0);
      ValueFilter valueFilter0 = ValueFilter.of("", (Function) toByte0);
      // Undeclared exception!
      try { 
        valueFilter0.apply("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Byte class java.lang.String
         //
         verifyException("com.alibaba.fastjson2.function.impl.ToByte", e);
      }
  }
}
