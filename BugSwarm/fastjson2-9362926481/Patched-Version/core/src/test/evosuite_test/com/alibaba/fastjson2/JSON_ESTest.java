/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:24:03 GMT 2024
 */

package com.alibaba.fastjson2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSON;
import com.alibaba.fastjson2.JSONArray;
import com.alibaba.fastjson2.JSONObject;
import com.alibaba.fastjson2.JSONPath;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.JSONWriter;
import com.alibaba.fastjson2.TypeReference;
import com.alibaba.fastjson2.filter.ContextAutoTypeBeforeHandler;
import com.alibaba.fastjson2.filter.Filter;
import com.alibaba.fastjson2.filter.Labels;
import com.alibaba.fastjson2.filter.NameFilter;
import com.alibaba.fastjson2.filter.PascalNameFilter;
import com.alibaba.fastjson2.filter.SimplePropertyPreFilter;
import com.alibaba.fastjson2.filter.ValueFilter;
import com.alibaba.fastjson2.modules.ObjectReaderModule;
import com.alibaba.fastjson2.modules.ObjectWriterModule;
import com.alibaba.fastjson2.reader.ObjectReader;
import com.alibaba.fastjson2.reader.ObjectReader1;
import com.alibaba.fastjson2.reader.ObjectReader10;
import com.alibaba.fastjson2.reader.ObjectReader12;
import com.alibaba.fastjson2.reader.ObjectReader2;
import com.alibaba.fastjson2.reader.ObjectReader4;
import com.alibaba.fastjson2.reader.ObjectReader5;
import com.alibaba.fastjson2.reader.ObjectReader6;
import com.alibaba.fastjson2.reader.ObjectReader8;
import com.alibaba.fastjson2.reader.ObjectReader9;
import com.alibaba.fastjson2.reader.ObjectReaderAdapter;
import com.alibaba.fastjson2.reader.ObjectReaderBaseModule;
import com.alibaba.fastjson2.reader.ObjectReaderCreator;
import com.alibaba.fastjson2.reader.ObjectReaderImplDate;
import com.alibaba.fastjson2.reader.ObjectReaderImplFromInt;
import com.alibaba.fastjson2.reader.ObjectReaderImplList;
import com.alibaba.fastjson2.reader.ObjectReaderImplListStr;
import com.alibaba.fastjson2.reader.ObjectReaderNoneDefaultConstructor;
import com.alibaba.fastjson2.reader.ObjectReaderProvider;
import com.alibaba.fastjson2.util.ParameterizedTypeImpl;
import com.alibaba.fastjson2.writer.ObjectWriter;
import com.alibaba.fastjson2.writer.ObjectWriterBaseModule;
import com.alibaba.fastjson2.writer.ObjectWriterCreator;
import com.alibaba.fastjson2.writer.ObjectWriterImplMap;
import com.alibaba.fastjson2.writer.ObjectWriterProvider;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSON_ESTest extends JSON_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 2, character d, line 1, column 3, fastjson-version 2.0.19 6d\u0000
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '&';
      Class<Short> class0 = Short.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 3, 1631, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject("fN5$4UI19ODa2.J+Lm?", (-9), (-9), jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.IgnoreSetNullValue;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'n';
      // Undeclared exception!
      try { 
        JSON.parse(charArray0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 2, character n, line 1, column 3, fastjson-version 2.0.19 5n\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      boolean boolean0 = JSON.isValidArray(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(2852);
      Integer.toUnsignedString(2);
      Class<String> class0 = String.class;
      JSON.toJavaObject((Object) integer0, class0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-68);
      byteArray0[0] = byte0;
      byte byte1 = (byte)117;
      byteArray0[1] = byte1;
      byte byte2 = (byte)26;
      byteArray0[2] = byte2;
      byte byte3 = (byte)16;
      byteArray0[3] = byte3;
      int int0 = (-9);
      int int1 = (-1435);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnEnumNotMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[1] = jSONReader_Feature1;
      JSONReader.Feature jSONReader_Feature2 = JSONReader.Feature.ErrorOnEnumNotMatch;
      jSONReader_FeatureArray0[2] = jSONReader_Feature2;
      JSONReader.Feature jSONReader_Feature3 = JSONReader.Feature.NonStringKeyAsString;
      jSONReader_FeatureArray0[3] = jSONReader_Feature3;
      JSONReader.Feature jSONReader_Feature4 = JSONReader.Feature.NonStringKeyAsString;
      jSONReader_FeatureArray0[4] = jSONReader_Feature4;
      JSONReader.Feature jSONReader_Feature5 = JSONReader.Feature.InitStringFieldAsEmpty;
      jSONReader_FeatureArray0[5] = jSONReader_Feature5;
      JSONReader.Feature jSONReader_Feature6 = JSONReader.Feature.AllowUnQuotedFieldNames;
      jSONReader_FeatureArray0[6] = jSONReader_Feature6;
      JSONReader.Feature jSONReader_Feature7 = JSONReader.Feature.FieldBased;
      jSONReader_FeatureArray0[7] = jSONReader_Feature7;
      JSONReader.Feature jSONReader_Feature8 = JSONReader.Feature.UseNativeObject;
      jSONReader_FeatureArray0[8] = jSONReader_Feature8;
      JSONObject jSONObject0 = JSON.parseObject((InputStream) byteArrayInputStream0, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      ObjectReaderBaseModule objectReaderBaseModule0 = new ObjectReaderBaseModule(objectReaderProvider0);
      boolean boolean0 = JSON.register((ObjectReaderModule) objectReaderBaseModule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "writeChar";
      stringArray0[1] = "";
      stringArray0[2] = "}1(N% _;=iu@'h";
      stringArray0[3] = "OptimizedForAscii";
      stringArray0[4] = "";
      stringArray0[5] = "geiNI}OPtsWDo";
      stringArray0[6] = "";
      stringArray0[7] = "JSON#writeTo cannot serialize '";
      stringArray0[8] = "toJSONString error";
      Labels.DefaultLabelFilter labels_DefaultLabelFilter0 = new Labels.DefaultLabelFilter(stringArray0, stringArray0);
      Filter[] filterArray0 = new Filter[5];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) labels_DefaultLabelFilter0, filterArray0, (JSONWriter.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[9];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) chronoUnit0, jSONWriter_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[8];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) null, "/SClh1[a0Af", jSONWriter_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      Filter[] filterArray0 = new Filter[3];
      // Undeclared exception!
      try { 
        JSON.toJSONBytes((Object) objectWriterProvider0, "", filterArray0, (JSONWriter.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.MapSortField;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONWriter_FeatureArray0[0], jSONWriter_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONWriter$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      ObjectWriterImplMap objectWriterImplMap0 = new ObjectWriterImplMap((Type) null, (Type) null, class0, class0, 8735538376409180149L);
      // Undeclared exception!
      try { 
        JSON.registerIfAbsent((Type) null, (ObjectWriter<?>) objectWriterImplMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[1];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnEnumNotMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, (-2899), (-2899), jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset -2899, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ValueFilter> class0 = ValueFilter.class;
      char[] charArray0 = new char[2];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 515, 515, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 515
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNotSupportAutoType;
      byte[] byteArray0 = new byte[7];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[1];
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 7, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // malformed input around byte 0
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Class<Double> class0 = Double.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // empty String
         //
         verifyException("com.alibaba.fastjson2.FloatingDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-50);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, "", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // malformed input around byte 3
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ContextAutoTypeBeforeHandler contextAutoTypeBeforeHandler0 = new ContextAutoTypeBeforeHandler(true);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) parameterizedTypeImpl0, (Filter) contextAutoTypeBeforeHandler0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // malformed input around byte 0
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      JSON.parseObject(byteArray0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportAutoType;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.FieldBased;
      jSONReader_FeatureArray0[3] = jSONReader_Feature1;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      JSON.parseObject(byteArray0, class0, jSONReader_FeatureArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.DuplicateKeyValueAsArray;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int)  (-84), (int) 0, charset0, class0, jSONReader_FeatureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      Class<Long> class0 = Long.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 0, 26, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportClassForName;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("%)}8WkO/", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 1, char %
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.TrimString;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[4];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("<ge?6[PH\"5*f", (Type) class0, "<ge?6[PH\"5*f", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : <
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      Class<JSONObject> class1 = JSONObject.class;
      ObjectReaderImplListStr objectReaderImplListStr0 = new ObjectReaderImplListStr(class0, class1);
      Class class2 = objectReaderImplListStr0.getObjectClass();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.TrimString;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.ErrorOnNoneSerializable;
      jSONReader_FeatureArray0[1] = jSONReader_Feature1;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("'aw", (Type) class2, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support none-Serializable, class com.alibaba.fastjson2.filter.Labels$DefaultLabelFilter
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[1];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, (Charset) null, (Type) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read error
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Class<Float> class0 = Float.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) dataInputStream0, (Charset) null, '2', (Type) class0, (Consumer<ObjectReader1<PascalNameFilter>>) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON#parseObject cannot parse the 'InputStream' to 'float'
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForDoubles;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[5] = jSONReader_Feature0;
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0, (Type) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      Class<JSONArray> class0 = JSONArray.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0, (int) 98, (int) 81, charset0, class0, jSONReader_FeatureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[9];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.NotWriteHashMapArrayListClassName;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[2] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[3] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[4] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[5] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[6] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[7] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[8] = jSONWriter_FeatureArray0[3];
      JSONWriter jSONWriter0 = JSONWriter.of(objectWriterProvider0, jSONWriter_FeatureArray0);
      Charset charset0 = jSONWriter0.charset;
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0, 1032, 99, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1032
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForFloats;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_Feature0;
      jSONReader_FeatureArray0[8] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseArray("A5", (Type) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : 
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseArray("' to '", class0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : '
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      // Undeclared exception!
      try { 
        JSON.parseArray((InputStream) bufferedInputStream0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read error
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parse(byteArray0, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.IgnoreNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[8] = jSONReader_FeatureArray0[1];
      // Undeclared exception!
      try { 
        JSON.parse("RM@G1G[D,c& `.nq4<", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 1, character R, line 1, column 2, fastjson-version 2.0.19 RM@G1G[D,c& `.nq4<
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("'", (JSONReader.Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.IgnoreNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      JSON.parse("X0rm14", (-3416), (-3416), jSONReader_FeatureArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      // Undeclared exception!
      try { 
        JSON.config(jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      Class<Object> class0 = Object.class;
      Object object0 = JSON.to(class0, (Object) objectWriterProvider0);
      assertSame(object0, objectWriterProvider0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForFloats;
      String string0 = JSON.toJSONString((Object) jSONReader_Feature0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parse("input not end");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 1, character i, line 1, column 2, fastjson-version 2.0.19 input not end
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONArray jSONArray0 = JSON.copyTo((Object) null, class0, jSONWriter_FeatureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.NotWriteRootClassName;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[3] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[4] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[5] = jSONWriter_Feature0;
      String string0 = JSON.copy("ceil", jSONWriter_FeatureArray0);
      assertEquals("ceil", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectWriterCreator objectWriterCreator0 = ObjectWriterCreator.INSTANCE;
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider(objectWriterCreator0);
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[1];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.NotWriteEmptyArray;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      Object object0 = JSON.copy((Object) objectWriterProvider0, jSONWriter_FeatureArray0);
      assertSame(object0, objectWriterProvider0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = JSON.copy(integer0, (JSONWriter.Feature[]) null);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNulls;
      boolean boolean0 = JSON.isEnabled(jSONWriter_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNameAsSymbol;
      JSON.config(jSONWriter_Feature0, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.BeanToArray;
      JSON.config(jSONWriter_Feature0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNullNumberAsZero;
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[7];
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[3] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[4] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[5] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[6] = jSONWriter_Feature0;
      JSON.config(jSONWriter_FeatureArray0);
      assertEquals(7, jSONWriter_FeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.IgnoreNoneSerializable;
      boolean boolean0 = JSON.isEnabled(jSONReader_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForDoubles;
      JSON.config(jSONReader_Feature0, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportClassForName;
      JSON.config(jSONReader_Feature0, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.AllowUnQuotedFieldNames;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.SupportAutoType;
      jSONReader_FeatureArray0[5] = jSONReader_Feature1;
      // Undeclared exception!
      try { 
        JSON.config(jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support config global autotype support
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForFloats;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_Feature0;
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[3];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_Feature0;
      jSONReader_FeatureArray0[8] = jSONReader_Feature0;
      JSON.config(jSONReader_FeatureArray0);
      assertEquals(9, jSONReader_FeatureArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Class<JSONObject> class0 = JSONObject.class;
      JSON.register((Class) class0, (Filter) pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSON.register((Class) class0, (Filter) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      String[] stringArray0 = new String[2];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) simplePropertyPreFilter0);
      assertEquals(4, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(0, 1.0F);
      Object object0 = JSON.toJSON((Object) jSONObject0);
      assertSame(object0, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = JSON.isValid(byteArray0, (-595), (int) (byte)0, (Charset) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = JSON.isValidArray(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = JSON.isValid(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = JSON.isValid((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = JSON.isValidArray("Rm)G#!.l)H4X&6)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = JSON.isValidObject(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = JSON.isValidObject(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = JSON.isValidObject("^43Yojqi[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      boolean boolean0 = JSON.isValid(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = JSON.isValid(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = JSON.isValid("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = JSON.isValid("$E3,tj~e#$5',8^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Filter[] filterArray0 = new Filter[5];
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[5];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.MapSortField;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[4] = jSONWriter_Feature0;
      // Undeclared exception!
      try { 
        JSON.writeTo((OutputStream) pipedOutputStream0, (Object) null, filterArray0, jSONWriter_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON#writeTo cannot serialize 'null' to 'OutputStream'
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[2];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.IgnoreErrorGetter;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      Class<JSONObject> class0 = JSONObject.class;
      IntFunction<NameFilter> intFunction0 = (IntFunction<NameFilter>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      ObjectReaderImplFromInt<JSONObject> objectReaderImplFromInt0 = new ObjectReaderImplFromInt<JSONObject>(class0, intFunction0);
      Filter[] filterArray0 = new Filter[4];
      byte[] byteArray0 = JSON.toJSONBytes((Object) objectReaderImplFromInt0, "com.alibaba.fastjson2.JSONWriterUTF16JDK8@0000000009", filterArray0, jSONWriter_FeatureArray0);
      assertEquals(115, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[2];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteByteArrayAsBase64;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, jSONWriter_FeatureArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[4];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.ErrorOnNoneSerializable;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[1];
      byte[] byteArray0 = JSON.toJSONBytes((Object) "'-8y.R", jSONWriter_FeatureArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      Filter[] filterArray0 = new Filter[5];
      byte[] byteArray0 = JSON.toJSONBytes((Object) pascalNameFilter0, filterArray0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.isValid(byteArray0, 1516, 1516, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1516
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Filter[] filterArray0 = new Filter[2];
      byte[] byteArray0 = JSON.toJSONBytes((Object) null, filterArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = JSON.toJSONBytes((Object) null);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Filter[] filterArray0 = new Filter[0];
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteEnumUsingToString;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[4] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[5] = jSONWriter_FeatureArray0[1];
      String string0 = JSON.toJSONString((Object) null, "z+@hkZ", filterArray0, jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[3];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.NotWriteHashMapArrayListClassName;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, "$zrU4q|E", jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.ErrorOnNoneSerializable;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[1];
      jSONWriter_FeatureArray0[4] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[5] = jSONWriter_FeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) simplePropertyPreFilter0, "}pglDrkn#gy_]lp", jSONWriter_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support none serializable class com.alibaba.fastjson2.filter.SimplePropertyPreFilter
         //
         verifyException("com.alibaba.fastjson2.writer.ObjectWriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      String[] stringArray0 = new String[9];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[9];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNulls;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[1];
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[1];
      jSONWriter_FeatureArray0[4] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[5] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[6] = jSONWriter_FeatureArray0[1];
      jSONWriter_FeatureArray0[7] = jSONWriter_FeatureArray0[0];
      jSONWriter_FeatureArray0[8] = jSONWriter_FeatureArray0[1];
      String string0 = JSON.toJSONString((Object) simplePropertyPreFilter0, (Filter[]) null, jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Filter[] filterArray0 = new Filter[2];
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[2];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNullStringAsEmpty;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      String string0 = JSON.toJSONString((Object) null, filterArray0, jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteNameAsSymbol;
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      ObjectWriterBaseModule objectWriterBaseModule0 = new ObjectWriterBaseModule(objectWriterProvider0);
      Filter[] filterArray0 = new Filter[9];
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[1];
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) objectWriterBaseModule0, filterArray0, jSONWriter_FeatureArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      JSONReader.AutoTypeBeforeHandler jSONReader_AutoTypeBeforeHandler0 = JSONReader.autoTypeFilter(classArray0);
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[0];
      String string0 = JSON.toJSONString((Object) chronoUnit0, (Filter) jSONReader_AutoTypeBeforeHandler0, jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[6];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.ErrorOnNoneSerializable;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_FeatureArray0[1];
      jSONWriter_FeatureArray0[3] = jSONWriter_FeatureArray0[2];
      jSONWriter_FeatureArray0[4] = jSONWriter_FeatureArray0[3];
      jSONWriter_FeatureArray0[5] = jSONWriter_FeatureArray0[0];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) pascalNameFilter0, jSONWriter_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support none serializable class com.alibaba.fastjson2.filter.PascalNameFilter
         //
         verifyException("com.alibaba.fastjson2.writer.ObjectWriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.BeanToArray;
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[5];
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[2] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[3] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[4] = jSONWriter_Feature0;
      String string0 = JSON.toJSONString((Object) null, jSONWriter_FeatureArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[2];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.IgnoreErrorGetter;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_Feature0;
      JSONWriter.Context jSONWriter_Context0 = new JSONWriter.Context(objectWriterProvider0, jSONWriter_FeatureArray0);
      String string0 = JSON.toJSONString((Object) null, jSONWriter_Context0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectWriterCreator objectWriterCreator0 = new ObjectWriterCreator();
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider(objectWriterCreator0);
      JSONWriter.Context jSONWriter_Context0 = new JSONWriter.Context(objectWriterProvider0);
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[8];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.WriteBooleanAsNumber;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      String string0 = JSON.toJSONString((Object) jSONWriter_FeatureArray0[0], jSONWriter_Context0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      JSONWriter.Context jSONWriter_Context0 = new JSONWriter.Context(objectWriterProvider0);
      String string0 = JSON.toJSONString((Object) jSONWriter_Context0.contextNameFilter);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0, 0, (int) 75, (Charset) null, class0, (JSONReader.Feature[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support charset null
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      List<Integer> list0 = JSON.parseArray((byte[]) null, class0, jSONReader_FeatureArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ValueFilter> class0 = ValueFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      List<ObjectReader4<Labels.DefaultLabelFilter>> list0 = JSON.parseArray((byte[]) null, (Type) class0, jSONReader_FeatureArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      Class<JSONArray> class0 = JSONArray.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      List<JSONArray> list0 = JSON.parseArray(charArray0, class0, jSONReader_FeatureArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = JSON.parseArray((char[]) null, class0, jSONReader_FeatureArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      List<Object> list0 = JSON.parseArray((String) null, (Type) null, jSONReader_FeatureArray0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseArray(uRL0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON#parseArray cannot parse 'http://www.someFakeButWellFormedURL.org/fooExample' to 'class com.alibaba.fastjson2.JSONArray'
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseArray("d", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input, offset 1, char d
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONArray jSONArray0 = JSON.parseArray("", jSONReader_FeatureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONArray jSONArray0 = JSON.parseArray((String) null, jSONReader_FeatureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONArray jSONArray0 = JSON.parseArray(charArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        JSON.parseArray(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input, offset 1, char \u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((char[]) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0, 1384, (-3116), charset0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input, offset 1384, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONArray jSONArray0 = JSON.parseArray(byteArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        JSON.parseArray(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input, offset 3, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseArray("$zrU4q|E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input, offset 1, char $
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = JSON.parseArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int)  (-84), (int) 2, charset0, class0, jSONReader_FeatureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -84
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Type[] typeArray0 = new Type[2];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type) null, typeArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int)  (-78), (int)  (-34), (Charset) null, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support charset null
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":gQ* wK,%VH$3];SN8x", "");
      URL uRL0 = mockFile0.toURL();
      JSONPath.SizeFunction jSONPath_SizeFunction0 = new JSONPath.SizeFunction();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(uRL0, (Function<JSONObject, String>) jSONPath_SizeFunction0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      PascalNameFilter pascalNameFilter0 = JSON.parseObject((URL) null, class0, jSONReader_FeatureArray0);
      assertNull(pascalNameFilter0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      URL uRL0 = MockURL.getFtpExample();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseObject(uRL0, class0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONArray jSONArray0 = JSON.parseObject((URL) null, (Type) null, jSONReader_FeatureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      ValueFilter valueFilter0 = JSON.parseObject((InputStream) null, (Type) class0, jSONReader_FeatureArray0);
      assertNull(valueFilter0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1086, 141);
      Object object0 = JSON.parseObject((InputStream) byteArrayInputStream0, (Type) class0, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      InputStream inputStream0 = JSON.parseObject((Reader) null, (Type) class0, jSONReader_FeatureArray0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, "", jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ObjectReaderImplDate objectReaderImplDate0 = ObjectReaderImplDate.INSTANCE;
      Class class0 = objectReaderImplDate0.getObjectClass();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      ObjectInputStream objectInputStream0 = JSON.parseObject(byteArray0, (Type) class0, "", jSONReader_FeatureArray0);
      assertNull(objectInputStream0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      Class<ChronoUnit> class0 = ChronoUnit.class;
      NameFilter nameFilter0 = JSON.parseObject((byte[]) null, (Type) class0, "", jSONReader_FeatureArray0);
      assertNull(nameFilter0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ContextAutoTypeBeforeHandler contextAutoTypeBeforeHandler0 = new ContextAutoTypeBeforeHandler(true);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) parameterizedTypeImpl0, (Filter) contextAutoTypeBeforeHandler0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (Type) null, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      ObjectReader9<ObjectReader12> objectReader9_0 = JSON.parseObject((byte[]) null, (Type) class0, jSONReader_FeatureArray0);
      assertNull(objectReader9_0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      Class<Integer> class0 = Integer.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.Base64StringAsByteArray;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, class0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 1, character \u0005, line 1, column 2, fastjson-version 2.0.19 \u0005\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Class<Integer> class0 = Integer.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.Base64StringAsByteArray;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      Integer integer0 = JSON.parseObject(byteArray0, class0, jSONReader_FeatureArray0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      Labels.DefaultLabelFilter labels_DefaultLabelFilter0 = JSON.parseObject(byteArray0, class0, (JSONReader.Feature[]) null);
      assertNull(labels_DefaultLabelFilter0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      JSONArray jSONArray0 = JSON.parseObject((byte[]) null, class0, jSONReader_FeatureArray0);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONReader.Context jSONReader_Context0 = JSONPath.PARSE_CONTEXT;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, class0, jSONReader_Context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal fieldName input\u001A, offset 9, character \u001A, line 1, column 10, fastjson-version 2.0.19 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.DuplicateKeyValueAsArray;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[8] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, class0, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal fieldName input\u001A, offset 5, character \u001A, line 1, column 6, fastjson-version 2.0.19 \u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 8, character \u001A, line 1, column 9, fastjson-version 2.0.19 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Class<Integer> class0 = Integer.TYPE;
      ObjectReader1<Object> objectReader1_0 = JSON.parseObject(byteArray0, (Type) class0);
      assertEquals(0, objectReader1_0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      Class<Long> class0 = Long.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.IgnoreCheckClose;
      jSONReader_FeatureArray0[2] = jSONReader_Feature1;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[4] = jSONReader_Feature1;
      ObjectReader10<ChronoLocalDate> objectReader10_0 = JSON.parseObject(byteArray0, (int) 0, 26, (Type) class0, jSONReader_FeatureArray0);
      assertEquals(0L, objectReader10_0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      Class<Long> class0 = Long.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[5];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNoneSerializable;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) 0, 26, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[3];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 1, character \u0000, line 1, column 2, fastjson-version 2.0.19 \u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      Class<Short> class0 = Short.TYPE;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_Feature0;
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 3, 1631, (Type) class0, jSONReader_FeatureArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[9];
      Class<JSONArray>[] classArray0 = (Class<JSONArray>[]) Array.newInstance(Class.class, 9);
      Class<JSONArray> class0 = JSONArray.class;
      Class<String> class1 = String.class;
      JSONPath.SizeFunction jSONPath_SizeFunction0 = new JSONPath.SizeFunction();
      ObjectReaderImplList objectReaderImplList0 = new ObjectReaderImplList((Type) null, class0, class1, classArray0[0], jSONPath_SizeFunction0);
      Class class2 = objectReaderImplList0.getObjectClass();
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0, 0, 0, (Type) class2, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      // Undeclared exception!
      try { 
        JSON.parseObject("object is null", (Type) null, "", jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      NameFilter nameFilter0 = JSON.parseObject("", (Type) null, "#YO2P3)bS>C3", jSONReader_FeatureArray0);
      assertNull(nameFilter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectReader6<ObjectReader8> objectReader6_0 = JSON.parseObject("", (Type) null, (Filter) null, (JSONReader.Feature[]) null);
      assertNull(objectReader6_0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      Class<JSONObject> class1 = JSONObject.class;
      ObjectReaderImplListStr objectReaderImplListStr0 = new ObjectReaderImplListStr(class0, class1);
      Class class2 = objectReaderImplListStr0.getObjectClass();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[17];
      // Undeclared exception!
      try { 
        JSON.parseObject("'aw", (Type) class2, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[1];
      ObjectReaderAdapter<ObjectReader12> objectReaderAdapter0 = JSON.parseObject((String) null, (Type) class0, (Filter) null, jSONReader_FeatureArray0);
      assertNull(objectReaderAdapter0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("97Q8rp&Vvm*rd%#", (Type) null, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForDoubles;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.FieldBased;
      jSONReader_FeatureArray0[4] = jSONReader_Feature1;
      jSONReader_FeatureArray0[5] = jSONReader_Feature0;
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_FeatureArray0[2];
      // Undeclared exception!
      JSON.parseObject("m*g{JA6X\"=E\"PiBE", class0, "m*g{JA6X\"=E\"PiBE", jSONReader_FeatureArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.InitStringFieldAsEmpty;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("vDSleK-eC^x\":XS", class0, "com.alibaba.fastjson2.reader.ObjectReaderImplObject", jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal fieldName inputv, offset 1, character v, line 1, column 2, fastjson-version 2.0.19 vDSleK-eC^x\":XS
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<PascalNameFilter> class0 = PascalNameFilter.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("Rm)G#!.l)H4X&6)", class0, "", (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider((ObjectReaderCreator) null);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseObject("input not end", class0, jSONReader_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<ChronoUnit> class0 = ChronoUnit.class;
      JSONReader.Context jSONReader_Context0 = JSONPath.PARSE_CONTEXT;
      JSON.parseObject("", class0, jSONReader_Context0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      Labels.DefaultLabelFilter labels_DefaultLabelFilter0 = JSON.parseObject("", 67108864, (-14), class0, jSONReader_FeatureArray0);
      assertNull(labels_DefaultLabelFilter0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      Object object0 = JSON.parseObject((String) null, 2736, 0, class0, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      Object object0 = JSON.parseObject((String) null, class0, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("!-[c_rQW,\"%sJ@MS&|Z", (TypeReference) typeReference0, (Filter) null, jSONReader_FeatureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character !, line 1, column 2, fastjson-version 2.0.19 !-[c_rQW,\"%sJ@MS&|Z
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TypeReference<Labels.DefaultLabelFilter> typeReference0 = (TypeReference<Labels.DefaultLabelFilter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        JSON.parseObject("|i  [6_kSxSw*99", (TypeReference) typeReference0, (Filter) null, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TypeReference<Integer> typeReference0 = (TypeReference<Integer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      JSONReader.AutoTypeBeforeHandler jSONReader_AutoTypeBeforeHandler0 = JSONReader.autoTypeFilter(false, stringArray0);
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[1];
      ObjectReader10<PascalNameFilter> objectReader10_0 = JSON.parseObject((String) null, (TypeReference) typeReference0, (Filter) jSONReader_AutoTypeBeforeHandler0, jSONReader_FeatureArray0);
      assertNull(objectReader10_0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.UseBigDecimalForFloats;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("JSON#writeTo cannot serialize '", (TypeReference) typeReference0, jSONReader_FeatureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character J, line 1, column 2, fastjson-version 2.0.19 JSON#writeTo cannot serialize '
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      ObjectReader2<ObjectReader5> objectReader2_0 = JSON.parseObject("", (TypeReference) typeReference0, jSONReader_FeatureArray0);
      assertNull(objectReader2_0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      // Undeclared exception!
      try { 
        JSON.parseObject("JSON#writeTo cannot serialize '", (TypeReference) typeReference0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectReaderNoneDefaultConstructor<JSONObject> objectReaderNoneDefaultConstructor0 = JSON.parseObject("", (Type) class0);
      assertNull(objectReaderNoneDefaultConstructor0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        JSON.parseObject("Gw\"4Go[Aba3i", (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // input not end, offset 1, character G, line 1, column 2, fastjson-version 2.0.19 Gw\"4Go[Aba3i
         //
         verifyException("com.alibaba.fastjson2.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Filter[] filterArray0 = new Filter[7];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.AllowUnQuotedFieldNames;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("!", (Type) null, ".f4t", filterArray0, jSONReader_FeatureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character !, line 1, column 2, fastjson-version 2.0.19 !
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Labels.DefaultLabelFilter> class0 = Labels.DefaultLabelFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      Filter[] filterArray0 = new Filter[5];
      InputStream inputStream0 = JSON.parseObject("", (Type) class0, "", filterArray0, jSONReader_FeatureArray0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Filter[] filterArray0 = new Filter[7];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject("!", (Type) null, ".f4t", filterArray0, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<ValueFilter> class0 = ValueFilter.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.FieldBased;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[4];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[3];
      // Undeclared exception!
      try { 
        JSON.parseObject("ivGE!m.[; &2>1j", class0, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character i, line 1, column 2, fastjson-version 2.0.19 ivGE!m.[; &2>1j
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderInterface", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.AllowUnQuotedFieldNames;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[6] = jSONReader_Feature0;
      jSONReader_FeatureArray0[7] = jSONReader_Feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject(")rjE|o>f={Iz7&nB*zh", class0, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : )
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<String> class0 = String.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      // Undeclared exception!
      try { 
        JSON.parseObject(")rjE|o>f={Iz7&nB*zh", class0, (Filter) null, jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, (int) (byte)80, (int) (byte) (-79), (Charset) null, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support charset null
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONObject jSONObject0 = JSON.parseObject(charArray0, 426, 0, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[4];
      JSONObject jSONObject0 = JSON.parseObject(byteArray0, 262143, (-5674), jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0, 1871, (int) (byte) (-1), (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONObject jSONObject0 = JSON.parseObject(byteArray0, (JSONReader.Feature[]) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONObject jSONObject0 = JSON.parseObject((byte[]) null, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "}J7p|M`EZFP=El,", 255703211, "", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        JSON.parseObject(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      JSONObject jSONObject0 = JSON.parseObject((InputStream) null, charset0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) pipedInputStream0, (Charset) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read error
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        JSON.parseObject(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 1, char \u0000
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject((char[]) null);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        JSON.parseObject(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 3, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 26);
      // Undeclared exception!
      try { 
        JSON.parseObject((InputStream) pushbackInputStream0, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      JSONObject jSONObject0 = JSON.parseObject((Reader) null, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[8];
      JSONObject jSONObject0 = JSON.parseObject((Reader) stringReader0, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReader.Context jSONReader_Context0 = JSONPath.PARSE_CONTEXT;
      JSONObject jSONObject0 = JSON.parseObject("", jSONReader_Context0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReader.Context jSONReader_Context0 = JSONPath.PARSE_CONTEXT;
      // Undeclared exception!
      try { 
        JSON.parseObject("0'HnC/ibNVn$V*XIM", jSONReader_Context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 1, char 0
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONObject jSONObject0 = JSON.parseObject("' to 'OutputStream'", 0, 0, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("5%)-Q;#Y1V$K6V", 2147483645, 1702562997, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 2147483645, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONObject jSONObject0 = JSON.parseObject((String) null, 484, 484, jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[6];
      JSONObject jSONObject0 = JSON.parseObject("", jSONReader_FeatureArray0);
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("3g}_-r~e6+\"WTh", (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson2.reader.FieldReaderInt8Param");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal input\uFF0C offset 1, char c
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.IgnoreSetNullValue;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_Feature0;
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[1];
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        JSON.parse(charArray0, jSONReader_FeatureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character \u0000, line 1, column 2, fastjson-version 2.0.19 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        JSON.parse(charArray0, (JSONReader.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      Object object0 = JSON.parse(charArray0, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      Object object0 = JSON.parse((char[]) null, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      Object object0 = JSON.parse(byteArray0, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      // Undeclared exception!
      try { 
        JSON.parse("x2L:oQGj}U=]", jSONReader_Context0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character x, line 1, column 2, fastjson-version 2.0.19 x2L:oQGj}U=]
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[0];
      Object object0 = JSON.parse("", (-28), (-31), jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[2];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.SupportSmartMatch;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      JSONReader.Feature jSONReader_Feature1 = JSONReader.Feature.SupportArrayToBean;
      jSONReader_FeatureArray0[1] = jSONReader_Feature1;
      JSON.parse("' to '", jSONReader_FeatureArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      // Undeclared exception!
      try { 
        JSON.parse("RM@G1G[D,c& `.nq4<", jSONReader_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.JSONReader$Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[3];
      Object object0 = JSON.parse((String) null, jSONReader_FeatureArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONWriter.Feature[] jSONWriter_FeatureArray0 = new JSONWriter.Feature[2];
      JSONWriter.Feature jSONWriter_Feature0 = JSONWriter.Feature.IgnoreErrorGetter;
      jSONWriter_FeatureArray0[0] = jSONWriter_Feature0;
      jSONWriter_FeatureArray0[1] = jSONWriter_FeatureArray0[0];
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) jSONWriter_FeatureArray0[0], jSONWriter_FeatureArray0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character c, line 1, column 2, fastjson-version 2.0.19 com.alibaba.fastjson2.JSONWriterUTF16JDK8@0000000004
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object object0 = JSON.parse((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<ValueFilter> class0 = ValueFilter.class;
      Class<JSONArray> class1 = JSONArray.class;
      JSON.mixIn(class0, class1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectWriterProvider objectWriterProvider0 = new ObjectWriterProvider();
      ObjectWriterBaseModule objectWriterBaseModule0 = new ObjectWriterBaseModule(objectWriterProvider0);
      boolean boolean0 = JSON.register((ObjectWriterModule) objectWriterBaseModule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer(2852);
      Class<String> class0 = String.class;
      String string0 = JSON.toJavaObject((Object) integer0, class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSON.register((ObjectReaderModule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Integer integer0 = new Integer(284);
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) integer0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // offset 1, character c, line 1, column 2, fastjson-version 2.0.19 com.alibaba.fastjson2.JSONWriterUTF16JDK8@0000000002
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderImplObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      Class<Object> class0 = Object.class;
      ObjectReader<Object> objectReader0 = objectReaderCreator0.createObjectReader(class0, true);
      // Undeclared exception!
      try { 
        JSON.registerIfAbsent((Type) null, objectReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<JSONObject> class1 = JSONObject.class;
      IntFunction<NameFilter> intFunction0 = (IntFunction<NameFilter>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      ObjectReaderImplFromInt<JSONObject> objectReaderImplFromInt0 = new ObjectReaderImplFromInt<JSONObject>(class1, intFunction0);
      ObjectReader<?> objectReader0 = JSON.register((Type) class0, (ObjectReader<?>) objectReaderImplFromInt0);
      assertNull(objectReader0);
  }
}
