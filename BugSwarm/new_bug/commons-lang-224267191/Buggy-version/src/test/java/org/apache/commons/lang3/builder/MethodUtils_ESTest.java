/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 26 22:51:42 GMT 2024
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 13);
      Class<Integer>[] classArray1 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray1[0] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[3] = class0;
      classArray0[6] = classArray0[3];
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[2];
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[6];
      try { 
        MethodUtils.invokeMethod((Object) class0, false, "!:y7", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: !:y7() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod(object0, true, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod(object0, true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "Y*b", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "ouwgrc+$q", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, "94vDi:uUvCw+NJ");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 94vDi:uUvCw+NJ() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "10.3", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[7];
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "csb!)AIb", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: csb!)AIb() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "The type must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation((Class<?>) null, class0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class0, (String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation((Class<?>) null, (Class<? extends Annotation>) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "length", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Class<Method> class0 = Method.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeStaticMethod(class0, "2F8 P7y7(,EZnz+~5$", objectArray0, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 2F8 P7y7(,EZnz+~5$() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "=To_K|cSEm", (Object[]) null, classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: =To_K|cSEm() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0, true, false);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "10.7", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 10.7() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      try { 
        MethodUtils.invokeMethod((Object) "Strings must not be null", true, "Strings must not be null", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: Strings must not be null() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[9];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      try { 
        MethodUtils.invokeMethod((Object) class0, false, "NetBSD", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: NetBSD() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, true, "J", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      try { 
        MethodUtils.invokeMethod((Object) "p", "p", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: p() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, true, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The method must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(classArray0[0], class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The class must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toBinaryString", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class1 = String.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class1, class0);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(methodArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "toBinaryString", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: toBinaryString() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      Class<Integer> class0 = Integer.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "Emha{c\" n%rhWh", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Emha{c\" n%rhWh() on class: java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "valueOf";
      Object object0 = MethodUtils.invokeMethod((Object) "java.awt.printerjob", true, "valueOf", objectArray0);
      assertEquals("valueOf", object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "( Q}:0FS\"_&1r", true, "The annotation class must not be null");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: The annotation class must not be null() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, (String) null, (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "Yw]`;Hgc3P_cs0o9p");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Yw]`;Hgc3P_cs0o9p() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) "java.home", (String) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      try { 
        MethodUtils.invokeMethod((Object) "", "", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) string0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "\n", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, true, "Comparator should not be null.", (Object[]) methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }
}
