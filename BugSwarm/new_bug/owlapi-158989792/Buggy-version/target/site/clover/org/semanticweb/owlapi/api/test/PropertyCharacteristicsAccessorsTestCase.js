var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":113,"id":27500,"methods":[{"el":42,"sc":5,"sl":34},{"el":52,"sc":5,"sl":44},{"el":62,"sc":5,"sl":54},{"el":72,"sc":5,"sl":64},{"el":82,"sc":5,"sl":74},{"el":92,"sc":5,"sl":84},{"el":102,"sc":5,"sl":94},{"el":112,"sc":5,"sl":104}],"name":"PropertyCharacteristicsAccessorsTestCase","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_2830":{"methods":[{"sl":44}],"name":"testSymmetric","pass":true,"statements":[{"sl":46},{"sl":47},{"sl":48},{"sl":49},{"sl":50},{"sl":51}]},"test_2899":{"methods":[{"sl":64}],"name":"testReflexive","pass":true,"statements":[{"sl":66},{"sl":67},{"sl":68},{"sl":69},{"sl":70},{"sl":71}]},"test_3043":{"methods":[{"sl":34}],"name":"testTransitive","pass":true,"statements":[{"sl":36},{"sl":37},{"sl":38},{"sl":39},{"sl":40},{"sl":41}]},"test_3339":{"methods":[{"sl":104}],"name":"testFunctionalDataProperty","pass":true,"statements":[{"sl":106},{"sl":107},{"sl":108},{"sl":109},{"sl":110},{"sl":111}]},"test_3516":{"methods":[{"sl":74}],"name":"testIrreflexive","pass":true,"statements":[{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80},{"sl":81}]},"test_3546":{"methods":[{"sl":54}],"name":"testAsymmetric","pass":true,"statements":[{"sl":56},{"sl":57},{"sl":58},{"sl":59},{"sl":60},{"sl":61}]},"test_3642":{"methods":[{"sl":84}],"name":"testFunctional","pass":true,"statements":[{"sl":86},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_3708":{"methods":[{"sl":94}],"name":"testInverseFunctional","pass":true,"statements":[{"sl":96},{"sl":97},{"sl":98},{"sl":99},{"sl":100},{"sl":101}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
