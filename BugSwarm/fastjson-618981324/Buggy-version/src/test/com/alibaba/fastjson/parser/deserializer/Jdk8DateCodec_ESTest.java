/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:57:01 GMT 2024
 */

package com.alibaba.fastjson.parser.deserializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.BufferedWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.FormatStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jdk8DateCodec_ESTest extends Jdk8DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("writeUnsorted", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[0];
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter(bufferedWriter0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      jdk8DateCodec0.write(jSONSerializer0, (Object) serializerFeature0, (Object) serializerFeature1, (Type) null, 3583);
      assertNotSame(serializerFeature0, serializerFeature1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("fastjson.parser.autoTypeAccept", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'fastjson.parser.autoTypeAccept' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      char[] charArray0 = new char[4];
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze(defaultJSONParser0, (Type) null, (Object) localDate0, "", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Class<MockLocalDate> class0 = MockLocalDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.write((JSONSerializer) null, (Object) null, (Object) null, (Type) class1, (-2198));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeatureArray0[2];
      serializerFeatureArray0[4] = serializerFeatureArray0[1];
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeatureArray0[2];
      serializerFeatureArray0[8] = serializerFeatureArray0[4];
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, (SerializeConfig) null);
      Class<String> class0 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("gm=jy42W,", class0, class0, class0, (Field) null, 0, 3974, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.write(jSONSerializer0, (Object) serializerFeatureArray0[0], beanContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.serializer.SerializerFeature cannot be cast to java.time.temporal.TemporalAccessor
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedDate(formatStyle0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze((DefaultJSONParser) null, (Type) null, (Object) jdk8DateCodec0, "| UTfP$i@frVjpbE=;", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      Class<MockLocalDateTime> class0 = MockLocalDateTime.class;
      Class<Period> class1 = Period.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class1, class0, class0, (Field) null, (-1217), (-214748364), (-1217));
      jdk8DateCodec0.write(jSONSerializer0, (Object) stringBuffer0, (Object) formatStyle0, fieldInfo0.fieldType, (-1217));
      assertEquals("fastjson.parser.autoTypeAccept", fieldInfo0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Class<ZonedDateTime> class0 = ZonedDateTime.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, (-4297), (-4297), 4);
      jdk8DateCodec0.write(jSONSerializer0, (Object) null, (Object) fieldInfo0, fieldInfo0.fieldType, 23);
      assertFalse(fieldInfo0.fieldTransient);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("4),,%'nml({'QG", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '4),,%'nml({'QG' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("", (DateTimeFormatter) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_TIME;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseLocalDate("%kTIah", "%kTIah", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '%kTIah' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("", "", (DateTimeFormatter) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("Vw*DnKw!", "BR", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'Vw*DnKw!' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("t<nY]{]kX0Sm3uU", "t<nY]{]kX0Sm3uU", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 't<nY]{]kX0Sm3uU' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate((String) null, (String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("", (DateTimeFormatter) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseDateTime("fastjson.parser.autoTypeSupport", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'fastjson.parser.autoTypeSupport' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("[];aYbaA-7.%Ui|*!w", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '[];aYbaA-7.%Ui|*!w' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1yc", parserConfig0);
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze(defaultJSONParser0, (Type) class1, (Object) defaultJSONParser0, "unixtime", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1yc", parserConfig0);
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = parserConfig0.checkAutoType(class0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze(defaultJSONParser0, (Type) class1, (Object) defaultJSONParser0, "mDR)oYM", 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      int int0 = jdk8DateCodec0.getFastMatchToken();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      MockLocalDateTime mockLocalDateTime0 = new MockLocalDateTime();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.write(jSONSerializer0, (Object) mockLocalDateTime0, (BeanContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }
}
