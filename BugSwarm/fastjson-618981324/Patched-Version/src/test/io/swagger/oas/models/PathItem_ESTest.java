/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:32:41 GMT 2024
 */

package io.swagger.oas.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.oas.models.ExternalDocumentation;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Content;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.media.Schema;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.responses.ApiResponse;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityRequirement;
import io.swagger.oas.models.servers.Server;
import io.swagger.oas.models.servers.ServerVariable;
import io.swagger.oas.models.servers.ServerVariables;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PathItem_ESTest extends PathItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary("class ApiResponses {\n");
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem2 = pathItem1.servers(linkedList0);
      Operation operation0 = new Operation();
      pathItem0.getParameters();
      Operation operation1 = operation0.parameters((List<Parameter>) null);
      PathItem pathItem3 = pathItem2.patch(operation1);
      PathItem pathItem4 = pathItem3.description("class ApiResponses {\n");
      PathItem pathItem5 = pathItem4.$ref("class ApiResponses {\n");
      pathItem5.getServers();
      pathItem4.parameters((List<Parameter>) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.patch(operation0);
      PathItem pathItem2 = pathItem1.head(operation0);
      PathItem pathItem3 = pathItem2.trace(operation0);
      PathItem pathItem4 = pathItem3.$ref("");
      pathItem2.getServers();
      PathItem pathItem5 = pathItem4.servers((List<Server>) null);
      pathItem5.get$ref();
      pathItem2.setPost(operation0);
      pathItem2.getSummary();
      pathItem1.getExtensions();
      pathItem5.setExtensions((Map<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      PathItem pathItem2 = pathItem1.patch(operation0);
      PathItem pathItem3 = pathItem2.post(operation0);
      PathItem pathItem4 = pathItem2.post(operation0);
      pathItem3.setTrace(operation0);
      PathItem pathItem5 = pathItem3.$ref("");
      PathItem pathItem6 = pathItem5.put(operation0);
      PathItem pathItem7 = pathItem6.get(operation0);
      pathItem6.getGet();
      PathItem.HttpMethod.values();
      Parameter parameter0 = new Parameter();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      pathItem0.parameters(linkedList0);
      Parameter parameter1 = parameter0.name((String) null);
      Parameter parameter2 = parameter1.in("");
      Parameter parameter3 = parameter2.example("HEAD");
      Parameter parameter4 = parameter3.description("");
      PathItem pathItem8 = pathItem3.addParametersItem(parameter4);
      pathItem4.getSummary();
      pathItem8.getDescription();
      Server server0 = new Server();
      Server server1 = server0.url((String) null);
      pathItem7.addServersItem(server1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      PathItem pathItem2 = pathItem1.delete(operation0);
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem3 = pathItem2.parameters(linkedList0);
      pathItem3.post(operation0);
      pathItem2.equals("?{Sb~(T[mXu7");
      PathItem pathItem4 = pathItem3.put(operation0);
      PathItem pathItem5 = pathItem4.options(operation0);
      pathItem5.addExtension("<}k'Ed^3Dz-cG~:vp", pathItem2);
      PathItem pathItem6 = pathItem5.options(operation0);
      PathItem pathItem7 = pathItem2.trace(operation0);
      pathItem6.addExtension("", pathItem7);
      pathItem3.getParameters();
      pathItem5.post(operation0);
      pathItem0.setPatch(operation0);
      pathItem3.options((Operation) null);
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples("?{Sb~(T[mXu7", example0);
      Parameter parameter2 = parameter1.example("<}k'Ed^3Dz-cG~:vp");
      Schema<PathItem> schema0 = new Schema<PathItem>();
      Parameter parameter3 = parameter2.schema(schema0);
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.PIPEDELIMITED;
      Parameter parameter4 = parameter3.style(parameter_StyleEnum0);
      PathItem pathItem8 = pathItem2.addParametersItem(parameter4);
      pathItem2.getDelete();
      Server server0 = new Server();
      pathItem8.addServersItem(server0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary("y,ch_KQG");
      Parameter parameter0 = new Parameter();
      PathItem pathItem2 = pathItem1.addParametersItem(parameter0);
      Operation operation0 = new Operation();
      Operation operation1 = operation0.description("y,ch_KQG");
      PathItem pathItem3 = pathItem2.get(operation1);
      pathItem3.setOptions(operation0);
      pathItem2.getServers();
      pathItem3.setServers((List<Server>) null);
      pathItem3.hashCode();
      Operation operation2 = operation0.operationId("y,ch_KQG");
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Operation operation3 = operation2.parameters(linkedList0);
      PathItem pathItem4 = pathItem3.patch(operation3);
      Server server0 = new Server();
      pathItem4.addServersItem(server0);
      pathItem4.equals("    _default: ");
      PathItem pathItem5 = pathItem4.description("");
      pathItem5.getSummary();
      PathItem pathItem6 = pathItem1.options(operation1);
      pathItem3.getOptions();
      pathItem6.setPut(operation2);
      pathItem0.getDelete();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      PathItem pathItem2 = pathItem1.patch(operation0);
      pathItem1.getServers();
      PathItem pathItem3 = pathItem2.servers((List<Server>) null);
      PathItem pathItem4 = pathItem3.$ref("    xml: ");
      PathItem pathItem5 = pathItem4.get(operation0);
      pathItem5.get$ref();
      pathItem5.patch(operation0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.put(operation0);
      PathItem pathItem2 = pathItem1.get(operation0);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      Content content0 = new Content();
      MediaType mediaType0 = new MediaType();
      Content content1 = content0.addMediaType("", mediaType0);
      Content content2 = content1.addMediaType("", mediaType0);
      ApiResponse apiResponse1 = apiResponse0.content(content2);
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse1);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse("", apiResponse0);
      operation0.setResponses(apiResponses2);
      PathItem pathItem3 = pathItem2.addParametersItem((Parameter) null);
      pathItem3.getServers();
      PathItem pathItem4 = pathItem3.servers((List<Server>) null);
      PathItem.HttpMethod pathItem_HttpMethod0 = PathItem.HttpMethod.GET;
      pathItem3.addExtension("FA+yt.PvSS2b~M($c*4", pathItem_HttpMethod0);
      PathItem pathItem5 = pathItem4.summary("g72iEj");
      pathItem5.addExtension("g72iEj", pathItem0);
      pathItem4.setOptions(operation0);
      Map<String, Object> map0 = pathItem4.getExtensions();
      pathItem1.setExtensions(map0);
      pathItem2.setDelete(operation0);
      pathItem1.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("    delete: ");
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.options(operation0);
      PathItem pathItem3 = pathItem2.trace(operation0);
      PathItem pathItem4 = pathItem3.description("");
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      Server server0 = new Server();
      Server server1 = server0.url("]{");
      Server server2 = server1.description("]k#;YkQ,7eT");
      ServerVariables serverVariables0 = new ServerVariables();
      server1.setVariables(serverVariables0);
      Server server3 = server2.variables(serverVariables0);
      linkedList0.add(server3);
      pathItem4.hashCode();
      PathItem pathItem5 = pathItem4.servers(linkedList0);
      pathItem5.head(operation0);
      pathItem5.set$ref((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      pathItem0.setExtensions(hashMap0);
      Parameter parameter0 = new Parameter();
      Parameter parameter1 = parameter0.in("    delete: ");
      Boolean boolean0 = Boolean.valueOf(true);
      Parameter parameter2 = parameter1.explode(boolean0);
      Parameter parameter3 = parameter2.examples((Map<String, Example>) null);
      Parameter.StyleEnum parameter_StyleEnum0 = Parameter.StyleEnum.SIMPLE;
      Parameter parameter4 = parameter3.style(parameter_StyleEnum0);
      pathItem1.addParametersItem(parameter4);
      pathItem3.getExtensions();
      pathItem4.head(operation0);
      pathItem5.setTrace(operation0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.put(operation0);
      PathItem pathItem2 = pathItem1.trace(operation0);
      PathItem pathItem3 = pathItem2.patch(operation0);
      PathItem pathItem4 = pathItem3.options(operation0);
      pathItem3.getServers();
      PathItem pathItem5 = pathItem4.servers((List<Server>) null);
      pathItem5.$ref("");
      PathItem pathItem6 = pathItem5.$ref("\"&?iqR,[9>");
      pathItem6.getServers();
      pathItem2.setServers((List<Server>) null);
      Operation operation1 = pathItem4.getPut();
      PathItem pathItem7 = pathItem5.trace(operation1);
      pathItem2.addParametersItem((Parameter) null);
      pathItem7.get(operation1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.description(".)(5O|P$(Co*MmU");
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.post(operation0);
      operation0.getParameters();
      PathItem pathItem3 = pathItem2.parameters((List<Parameter>) null);
      pathItem2.setSummary(".)(5O|P$(Co*MmU");
      PathItem pathItem4 = pathItem3.patch(operation0);
      PathItem pathItem5 = pathItem4.delete(operation0);
      pathItem5.setParameters((List<Parameter>) null);
      ApiResponse apiResponse0 = new ApiResponse();
      pathItem5.parameters((List<Parameter>) null);
      ApiResponse apiResponse1 = apiResponse0.$ref("lP[j~-Hn'F");
      apiResponse1.getExtensions();
      pathItem4.setExtensions((Map<String, Object>) null);
      pathItem5.getSummary();
      pathItem5.setHead(operation0);
      pathItem1.getExtensions();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      operation0.getParameters();
      PathItem pathItem2 = pathItem1.parameters((List<Parameter>) null);
      Server server0 = new Server();
      Server server1 = server0.url("");
      Server server2 = server1.description("UXxEgl>l1H^X8T|Y");
      PathItem pathItem3 = pathItem2.addServersItem(server2);
      PathItem pathItem4 = pathItem3.post(operation0);
      pathItem4.addServersItem(server0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary((String) null);
      PathItem pathItem2 = pathItem1.$ref((String) null);
      Operation operation0 = new Operation();
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      Operation operation1 = operation0.callbacks(hashMap0);
      PathItem pathItem3 = pathItem2.get(operation1);
      Server server0 = new Server();
      PathItem pathItem4 = pathItem3.addServersItem(server0);
      PathItem pathItem5 = pathItem4.description((String) null);
      pathItem5.getServers();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem1 = pathItem0.servers(linkedList0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.get(operation0);
      operation0.getParameters();
      PathItem pathItem3 = pathItem2.parameters((List<Parameter>) null);
      PathItem pathItem4 = pathItem3.delete(operation0);
      PathItem pathItem5 = pathItem4.$ref("\n");
      pathItem5.getDescription();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      Operation operation1 = operation0.servers(linkedList0);
      Server server0 = new Server();
      Operation operation2 = operation1.addServersItem(server0);
      PathItem pathItem1 = pathItem0.post(operation2);
      pathItem1.getPatch();
      pathItem1.getPost();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      pathItem1.description("N");
      PathItem pathItem2 = pathItem1.summary("N");
      PathItem pathItem3 = pathItem2.put(operation0);
      PathItem pathItem4 = pathItem3.delete(operation0);
      pathItem4.delete(operation0);
      PathItem pathItem5 = pathItem4.head(operation0);
      pathItem5.addExtension("N", pathItem1);
      pathItem5.setHead(operation0);
      pathItem1.getServers();
      pathItem3.servers((List<Server>) null);
      pathItem0.getDescription();
      operation0.getParameters();
      pathItem4.setParameters((List<Parameter>) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      PathItem pathItem2 = pathItem1.trace(operation0);
      PathItem pathItem3 = pathItem2.delete(operation0);
      operation0.getParameters();
      PathItem pathItem4 = pathItem3.parameters((List<Parameter>) null);
      Server server0 = new Server();
      Server server1 = server0.description("    multipleOf: ");
      Server server2 = server1.url("    multipleOf: ");
      PathItem pathItem5 = pathItem4.addServersItem(server2);
      pathItem5.setPut(operation0);
      pathItem2.getOptions();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem2 = pathItem1.servers(linkedList0);
      operation0.getParameters();
      pathItem0.setHead(operation0);
      PathItem pathItem3 = pathItem2.parameters((List<Parameter>) null);
      List<Operation> list0 = pathItem2.readOperations();
      pathItem0.equals(list0);
      PathItem pathItem4 = pathItem3.description("");
      PathItem pathItem5 = pathItem4.summary("    maxLength: ");
      PathItem pathItem6 = pathItem5.get(operation0);
      pathItem6.trace(operation0);
      PathItem pathItem7 = pathItem4.delete(operation0);
      pathItem7.$ref("");
      pathItem7.getDescription();
      pathItem2.readOperationsMap();
      pathItem0.setHead(operation0);
      pathItem0.setTrace(operation0);
      pathItem3.getExtensions();
      pathItem0.getOptions();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem1 = pathItem0.parameters(linkedList0);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.put(operation0);
      PathItem pathItem3 = pathItem2.description("");
      PathItem pathItem4 = pathItem3.head(operation0);
      Parameter parameter0 = new Parameter();
      Example example0 = new Example();
      Parameter parameter1 = parameter0.addExamples("", example0);
      Schema<Object> schema0 = new Schema<Object>();
      Parameter parameter2 = parameter1.schema(schema0);
      Parameter parameter3 = parameter2.$ref("Y(4)aA-Vo1u(~A2");
      PathItem pathItem5 = pathItem4.addParametersItem(parameter3);
      pathItem5.hashCode();
      pathItem5.getHead();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      Server server0 = new Server();
      PathItem pathItem2 = pathItem1.addServersItem(server0);
      PathItem pathItem3 = pathItem2.summary("");
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem4 = pathItem3.parameters(linkedList0);
      List<Server> list0 = pathItem1.getServers();
      PathItem pathItem5 = pathItem4.servers(list0);
      Parameter parameter0 = new Parameter();
      pathItem5.addParametersItem(parameter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      Server server0 = new Server();
      Operation operation1 = operation0.addServersItem(server0);
      ExternalDocumentation externalDocumentation0 = new ExternalDocumentation();
      Operation operation2 = operation1.externalDocs(externalDocumentation0);
      PathItem pathItem1 = pathItem0.delete(operation2);
      PathItem pathItem2 = pathItem1.summary("kV");
      pathItem2.setOptions(operation2);
      pathItem0.getGet();
      Boolean boolean0 = Boolean.valueOf("kV");
      externalDocumentation0.toString();
      pathItem1.getParameters();
      operation1.setParameters((List<Parameter>) null);
      Operation operation3 = operation1.deprecated(boolean0);
      pathItem2.patch(operation3);
      server0.setUrl("FIs");
      pathItem1.getGet();
      pathItem1.addExtension("kV", "");
      PathItem pathItem3 = pathItem1.description("");
      pathItem2.setSummary("FIs");
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem2.setServers(linkedList0);
      pathItem2.readOperations();
      pathItem3.readOperations();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PathItem.HttpMethod.values();
      PathItem pathItem0 = new PathItem();
      pathItem0.getServers();
      pathItem0.servers((List<Server>) null);
      pathItem0.setDescription("]+rcON@");
      pathItem0.getGet();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      PathItem pathItem2 = pathItem1.put(operation0);
      PathItem pathItem3 = pathItem2.summary(";Q2S_vN_Eq,");
      PathItem pathItem4 = pathItem3.description(";Q2S_vN_Eq,");
      operation0.getServers();
      operation0.summary(";Q2S_vN_Eq,");
      PathItem pathItem5 = pathItem4.servers((List<Server>) null);
      pathItem5.getParameters();
      PathItem pathItem6 = pathItem4.parameters((List<Parameter>) null);
      Operation operation1 = pathItem6.getTrace();
      pathItem6.set$ref((String) null);
      pathItem1.setPut(operation1);
      pathItem0.head(operation1);
      pathItem4.setSummary("");
      pathItem6.getHead();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("");
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.patch(operation0);
      pathItem2.getParameters();
      PathItem pathItem3 = pathItem2.parameters((List<Parameter>) null);
      PathItem pathItem4 = pathItem3.summary("");
      PathItem pathItem5 = pathItem4.get(operation0);
      pathItem5.readOperations();
      Operation operation1 = pathItem5.getPatch();
      Parameter parameter0 = new Parameter();
      Schema<Server> schema0 = new Schema<Server>();
      parameter0.setSchema(schema0);
      Parameter parameter1 = parameter0.description("");
      Parameter parameter2 = parameter1.explode((Boolean) null);
      Parameter parameter3 = parameter2.deprecated((Boolean) null);
      Server server0 = new Server();
      server0.url("YI&9(I-?|v6d");
      operation1.addServersItem(server0);
      parameter2.getExamples();
      parameter3.in("");
      Parameter parameter4 = parameter3.examples((Map<String, Example>) null);
      PathItem pathItem6 = pathItem2.addParametersItem(parameter4);
      PathItem pathItem7 = pathItem0.put(operation1);
      pathItem6.hashCode();
      pathItem6.getHead();
      pathItem1.head(operation1);
      pathItem6.getPost();
      pathItem1.getSummary();
      pathItem7.getTrace();
      pathItem2.readOperations();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.getParameters();
      PathItem pathItem1 = pathItem0.parameters((List<Parameter>) null);
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.get(operation0);
      PathItem pathItem3 = pathItem2.trace(operation0);
      PathItem pathItem4 = pathItem3.patch(operation0);
      PathItem pathItem5 = pathItem4.put(operation0);
      pathItem5.getParameters();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary("");
      PathItem pathItem2 = pathItem1.$ref("");
      PathItem pathItem3 = pathItem2.head((Operation) null);
      PathItem pathItem4 = pathItem3.trace((Operation) null);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.FALSE;
      Parameter parameter1 = parameter0.explode(boolean0);
      Schema<String> schema0 = new Schema<String>();
      Parameter parameter2 = parameter1.schema(schema0);
      Boolean.logicalOr(false, false);
      pathItem4.toString();
      pathItem1.setPost((Operation) null);
      Parameter parameter3 = parameter2.allowReserved(boolean0);
      PathItem pathItem5 = pathItem4.addParametersItem(parameter3);
      pathItem5.setGet((Operation) null);
      pathItem3.description("");
      pathItem0.get((Operation) null);
      pathItem4.readOperationsMap();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      PathItem pathItem2 = pathItem1.head(operation0);
      PathItem pathItem3 = pathItem2.delete(operation0);
      PathItem pathItem4 = pathItem3.description("");
      PathItem pathItem5 = pathItem4.options(operation0);
      pathItem5.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponses apiResponses1 = apiResponses0._default((ApiResponse) null);
      Operation operation1 = operation0.responses(apiResponses1);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      Operation operation2 = operation1.addSecurityItem(securityRequirement0);
      operation2.getParameters();
      operation1.setParameters((List<Parameter>) null);
      PathItem pathItem1 = pathItem0.head(operation2);
      PathItem pathItem2 = pathItem1.options(operation1);
      pathItem1.options(operation0);
      pathItem2.setPatch(operation2);
      pathItem2.setPut(operation0);
      pathItem0.readOperationsMap();
      pathItem0.setDescription("");
      pathItem2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      Boolean boolean0 = Boolean.TRUE;
      Operation operation1 = operation0.deprecated(boolean0);
      operation1.getServers();
      PathItem pathItem1 = pathItem0.servers((List<Server>) null);
      PathItem pathItem2 = pathItem1.trace(operation0);
      pathItem2.getSummary();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.description((String) null);
      PathItem pathItem2 = pathItem1.patch((Operation) null);
      PathItem pathItem3 = pathItem2.trace((Operation) null);
      pathItem3.description("#/components/schemas/");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.patch(operation0);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf("");
      Parameter parameter1 = parameter0.explode(boolean0);
      Parameter parameter2 = parameter1.addExamples("", (Example) null);
      Parameter parameter3 = parameter2.in("");
      Parameter parameter4 = parameter3.name("");
      PathItem pathItem2 = pathItem1.addParametersItem(parameter4);
      PathItem pathItem3 = pathItem1.get(operation0);
      PathItem pathItem4 = pathItem3.delete(operation0);
      PathItem pathItem5 = pathItem4.head(operation0);
      parameter2.setContent((Content) null);
      pathItem5.setTrace(operation0);
      pathItem5.get$ref();
      pathItem2.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.head(operation0);
      PathItem pathItem2 = pathItem1.delete(operation0);
      PathItem pathItem3 = pathItem2.patch(operation0);
      PathItem pathItem4 = pathItem3.trace(operation0);
      PathItem pathItem5 = pathItem4.addParametersItem((Parameter) null);
      Server server0 = new Server();
      Server server1 = server0.url("T6)");
      pathItem1.hashCode();
      pathItem5.addServersItem(server1);
      pathItem5.setPut(operation0);
      pathItem0.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("/");
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem2 = pathItem1.parameters(linkedList0);
      Operation operation0 = new Operation();
      operation0.getServers();
      Operation operation1 = operation0.servers((List<Server>) null);
      PathItem pathItem3 = pathItem2.put(operation1);
      PathItem pathItem4 = pathItem3.servers((List<Server>) null);
      PathItem pathItem5 = pathItem4.description("\"~>S363(5'f0Pdx");
      pathItem5.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      PathItem pathItem2 = pathItem1.put(operation0);
      PathItem pathItem3 = pathItem2.description("    servers: ");
      pathItem3.put(operation0);
      LinkedList<SecurityRequirement> linkedList0 = new LinkedList<SecurityRequirement>();
      operation0.security(linkedList0);
      pathItem2.readOperations();
      PathItem pathItem4 = pathItem1.description("");
      pathItem4.setDelete(operation0);
      pathItem4.getDescription();
      PathItem.HttpMethod.valueOf("TRACE");
      pathItem4.getHead();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      PathItem pathItem2 = pathItem1.options(operation0);
      PathItem pathItem3 = pathItem2.delete(operation0);
      PathItem pathItem4 = pathItem3.put(operation0);
      pathItem4.readOperationsMap();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.description("class Operation {\n");
      Operation operation0 = new Operation();
      PathItem pathItem2 = pathItem1.patch(operation0);
      PathItem pathItem3 = pathItem2.get(operation0);
      PathItem pathItem4 = pathItem3.options(operation0);
      PathItem pathItem5 = pathItem4.head(operation0);
      SecurityRequirement securityRequirement0 = new SecurityRequirement();
      pathItem5.equals(securityRequirement0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      Operation operation1 = operation0.servers(linkedList0);
      PathItem pathItem1 = pathItem0.options(operation1);
      PathItem pathItem2 = pathItem1.parameters((List<Parameter>) null);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.valueOf("    patch: ");
      Parameter parameter1 = parameter0.allowEmptyValue(boolean0);
      PathItem pathItem3 = pathItem1.addServersItem((Server) null);
      pathItem3.addExtension("    patch: ", (Object) null);
      PathItem pathItem4 = pathItem2.addParametersItem(parameter1);
      PathItem pathItem5 = pathItem4.trace(operation1);
      Boolean.logicalAnd(true, true);
      PathItem pathItem6 = pathItem0.parameters((List<Parameter>) null);
      pathItem1.post(operation0);
      pathItem5.post(operation0);
      pathItem6.getServers();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      operation0.getParameters();
      PathItem pathItem1 = pathItem0.parameters((List<Parameter>) null);
      PathItem pathItem2 = pathItem1.get(operation0);
      Operation operation1 = operation0.parameters((List<Parameter>) null);
      PathItem pathItem3 = pathItem2.head(operation1);
      PathItem pathItem4 = pathItem3.put(operation1);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem1.setServers(linkedList0);
      Server server0 = new Server();
      pathItem3.patch(operation0);
      ServerVariables serverVariables0 = new ServerVariables();
      serverVariables0.clear();
      server0.setVariables(serverVariables0);
      PathItem pathItem5 = pathItem4.addServersItem(server0);
      PathItem pathItem6 = pathItem5.get(operation1);
      pathItem6.servers(linkedList0);
      PathItem pathItem7 = pathItem3.put(operation0);
      pathItem7.toString();
      pathItem1.readOperationsMap();
      pathItem0.readOperations();
      pathItem5.readOperationsMap();
      PathItem pathItem8 = pathItem0.head(operation0);
      pathItem3.getServers();
      pathItem8.addServersItem(server0);
      Header header0 = new Header();
      Header header1 = header0.schema((Schema) null);
      Boolean boolean0 = Boolean.valueOf("6");
      Header header2 = header1.deprecated(boolean0);
      Schema<Parameter> schema0 = new Schema<Parameter>();
      schema0.getReadOnly();
      Header header3 = header2.explode((Boolean) null);
      Header header4 = header3.content((Content) null);
      pathItem5.equals(header4);
      pathItem3.description("9hX4UJp");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      Parameter parameter0 = new Parameter();
      Operation operation1 = operation0.addParametersItem(parameter0);
      Operation operation2 = operation1.operationId("class SecurityRequirement {\n");
      Schema<Object> schema0 = new Schema<Object>();
      schema0.set$ref("");
      schema0.getWriteOnly();
      Operation operation3 = operation2.deprecated((Boolean) null);
      ApiResponses apiResponses0 = new ApiResponses();
      ApiResponse apiResponse0 = new ApiResponse();
      operation3.setDescription("    options: ");
      ApiResponses apiResponses1 = apiResponses0.addApiResponse("", apiResponse0);
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(";r(~'D2AXfCFc", apiResponse0);
      operation3.setResponses(apiResponses2);
      PathItem pathItem1 = pathItem0.post(operation3);
      pathItem1.hashCode();
      pathItem1.readOperations();
      pathItem1.setDescription("class SecurityRequirement {\n");
      PathItem pathItem2 = pathItem1.head(operation1);
      pathItem2.getSummary();
      pathItem1.get$ref();
      pathItem1.get$ref();
      pathItem0.setHead(operation1);
      pathItem2.setExtensions((Map<String, Object>) null);
      ServerVariable serverVariable0 = new ServerVariable();
      ServerVariable serverVariable1 = serverVariable0.addEnumItem(";r(~'D2AXfCFc");
      List<String> list0 = serverVariable1.getEnum();
      Operation operation4 = operation1.tags(list0);
      pathItem1.delete(operation4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary("");
      Operation operation0 = new Operation();
      pathItem0.readOperations();
      PathItem pathItem2 = pathItem1.delete(operation0);
      pathItem0.getParameters();
      PathItem pathItem3 = pathItem2.parameters((List<Parameter>) null);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      operation0.setServers(linkedList0);
      PathItem pathItem4 = pathItem3.$ref("    format: ");
      PathItem pathItem5 = pathItem4.options(operation0);
      pathItem5.setServers(linkedList0);
      PathItem pathItem6 = pathItem5.get(operation0);
      pathItem2.readOperationsMap();
      PathItem pathItem7 = pathItem6.$ref((String) null);
      PathItem pathItem8 = pathItem7.get(operation0);
      pathItem7.setPost(operation0);
      pathItem4.setOptions((Operation) null);
      pathItem6.getOptions();
      pathItem3.setDelete(operation0);
      pathItem4.getDelete();
      pathItem3.setOptions((Operation) null);
      pathItem5.post((Operation) null);
      pathItem8.setSummary("");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      PathItem pathItem2 = pathItem1.options(operation0);
      PathItem pathItem3 = pathItem2.put((Operation) null);
      operation0.getParameters();
      Operation operation1 = operation0.parameters((List<Parameter>) null);
      PathItem pathItem4 = pathItem3.get(operation1);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem5 = pathItem4.servers(linkedList0);
      PathItem pathItem6 = pathItem4.servers(linkedList0);
      pathItem5.equals(pathItem6);
      Boolean boolean0 = Boolean.FALSE;
      operation0.deprecated(boolean0);
      PathItem pathItem7 = pathItem5.trace(operation0);
      pathItem7.set$ref("u_");
      pathItem3.setSummary("u_");
      pathItem0.getHead();
      operation1.tags((List<String>) null);
      pathItem3.getPut();
      pathItem7.trace((Operation) null);
      Server server0 = new Server();
      server0.getExtensions();
      pathItem0.setExtensions((Map<String, Object>) null);
      pathItem2.setPatch((Operation) null);
      pathItem3.addExtension("u_", pathItem5);
      pathItem1.setDescription("    $ref: ");
      // Undeclared exception!
      try { 
        pathItem7.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Server server0 = new Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      PathItem pathItem2 = pathItem1.$ref("    summary: ");
      Operation operation0 = new Operation();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Operation operation1 = operation0.tags(linkedList0);
      operation0.getSecurity();
      Operation operation2 = operation1.security((List<SecurityRequirement>) null);
      PathItem pathItem3 = pathItem2.patch(operation2);
      PathItem pathItem4 = pathItem3.description("    summary: ");
      Operation operation3 = pathItem4.getPost();
      assertNull(operation3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      Operation operation1 = operation0.addTagsItem("GET");
      PathItem pathItem1 = pathItem0.delete(operation1);
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      PathItem pathItem2 = pathItem1.servers(linkedList0);
      Operation operation2 = operation0.operationId("");
      Operation operation3 = operation2.parameters((List<Parameter>) null);
      PathItem pathItem3 = pathItem2.trace(operation3);
      pathItem3.getGet();
      boolean boolean0 = pathItem0.equals("GET");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.head(operation0);
      pathItem1.get(operation0);
      PathItem pathItem2 = pathItem0.summary("qs");
      Operation operation1 = operation0.operationId("qs");
      pathItem0.setPut(operation0);
      Schema<Integer> schema0 = new Schema<Integer>();
      schema0.getRequired();
      Operation operation2 = operation1.tags((List<String>) null);
      PathItem pathItem3 = pathItem1.options(operation2);
      Parameter parameter0 = new Parameter();
      Boolean boolean0 = Boolean.FALSE;
      parameter0.addExtension("9qP+,0PDw<E(ZL", operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.readOperationsMap();
      assertEquals(4, map0.size());
      
      Parameter parameter1 = parameter0.deprecated(boolean0);
      PathItem pathItem4 = pathItem3.addParametersItem(parameter1);
      PathItem pathItem5 = pathItem4.get(operation2);
      List<Parameter> list0 = pathItem4.getParameters();
      PathItem pathItem6 = pathItem5.parameters(list0);
      pathItem6.getExtensions();
      pathItem4.setParameters(list0);
      pathItem6.set$ref("    minimum: ");
      pathItem2.getPatch();
      PathItem.HttpMethod.values();
      pathItem6.setDescription("qs");
      pathItem6.summary("ZNim;<}W|Y<");
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem6.servers(linkedList0);
      PathItem pathItem7 = pathItem5.description("");
      pathItem7.setPatch((Operation) null);
      pathItem6.getDescription();
      pathItem4.patch(operation2);
      pathItem4.post(operation1);
      List<Operation> list1 = pathItem3.readOperations();
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("(Ig>b3&G39),D1%TT");
      pathItem1.getServers();
      PathItem pathItem2 = pathItem1.servers((List<Server>) null);
      PathItem pathItem3 = pathItem2.options((Operation) null);
      pathItem2.setGet((Operation) null);
      pathItem2.addExtension("", pathItem1);
      PathItem pathItem4 = pathItem3.head((Operation) null);
      PathItem pathItem5 = pathItem4.post((Operation) null);
      pathItem5.put((Operation) null);
      pathItem4.setDescription("?7e$28U_lH}gBy jsW");
      pathItem5.toString();
      pathItem5.readOperations();
      // Undeclared exception!
      try { 
        pathItem5.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
