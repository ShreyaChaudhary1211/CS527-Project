/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 05 22:54:18 GMT 2024
 */

package com.alibaba.fastjson.parser.deserializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.time.Clock;
import java.time.Instant;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.FormatStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteJdk8DateCodec_ESTest extends EvosuiteJdk8DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("fastjson.parser.deny", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'fastjson.parser.deny' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("fastjson.parser.autoTypeAccept", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'fastjson.parser.autoTypeAccept' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 9);
      MockLocalDate mockLocalDate0 = new MockLocalDate();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.deserialze(defaultJSONParser0, (Type) null, (Object) mockLocalDate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null, serializeConfig0);
      Period period0 = Period.ofDays(2472);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.write(jSONSerializer0, (Object) period0, (Object) null, (Type) null, 2472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      MockOffsetDateTime mockOffsetDateTime0 = new MockOffsetDateTime();
      Class<MockOffsetTime> class0 = MockOffsetTime.class;
      Class<Field> class1 = Field.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy\uB144M\uC6D4d\uC77C", class0, class1, (Type) null, (Field) null, 1245, 1245, 1245);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.write(jSONSerializer0, (Object) mockOffsetDateTime0, beanContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.MockOffsetDateTime cannot be cast to java.time.temporal.TemporalAccessor
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime((String) null, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Class<MockOffsetDateTime> class0 = MockOffsetDateTime.class;
      Type type0 = FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze((DefaultJSONParser) null, type0, (Object) null, (String) null, 1852);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      SerializeConfig serializeConfig0 = new SerializeConfig(2625, false);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Period period0 = Period.ofYears(2625);
      Class<MockZonedDateTime> class0 = MockZonedDateTime.class;
      Class class1 = (Class)FieldInfo.getFieldType((Class<?>) class0, (Type) class0, (Type) class0);
      jdk8DateCodec0.instance.write(jSONSerializer0, (Object) period0, (Object) period0, (Type) class1, (-11));
      assertEquals("class org.evosuite.runtime.mock.java.time.MockZonedDateTime", class1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      jdk8DateCodec0.instance.write(jSONSerializer0, (Object) null, (Object) null, (Type) null, 12);
      assertEquals(0, jSONSerializer0.getIndentCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseZonedDateTime("'T'", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text ''T'' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseZonedDateTime("3Vrvlty(H^i]toX%U&", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '3Vrvlty(H^i]toX%U&' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_ZONED_DATE_TIME;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseZonedDateTime("", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("\"` Q_", (String) null, (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '\"` Q_' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("", "", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseLocalDate("not close json text, token : ", "G34W1`8$T3Eg#0;'", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'not close json text, token : ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate("u'7p-}sk", (String) null, (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'u'7p-}sk' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_ORDINAL_DATE;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseLocalDate((String) null, "i/a", dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("'T'", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text ''T'' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.parseDateTime("", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("&hDekU2;rfK {32[ ", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '&hDekU2;rfK {32[ ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime("4d7I", (DateTimeFormatter) null);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '4d7I' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("HKabo?:Oqwh5");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Class<MockLocalDate> class0 = MockLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.deserialze(defaultJSONParser0, (Type) class1, (Object) parserConfig0, "fastjson.parser.autoTypeAccept", (int) '|');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      int int0 = jdk8DateCodec0.getFastMatchToken();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofLocalizedTime(formatStyle0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.parseDateTime((String) null, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeatureArray0[0];
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeatureArray0[1];
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      Instant instant0 = MockInstant.now(clock0);
      Class<MockInstant> class0 = MockInstant.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyyMMddHHmmss", class0, class0, class0, (Field) null, 39, 1203, 2);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      // Undeclared exception!
      try { 
        jdk8DateCodec0.instance.write(jSONSerializer0, (Object) instant0, beanContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pattern
         //
         verifyException("java.util.Objects", e);
      }
  }
}
