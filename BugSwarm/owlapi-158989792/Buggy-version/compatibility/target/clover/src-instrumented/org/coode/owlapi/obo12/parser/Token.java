/* $$ This file has been instrumented by Clover 4.5.2#20240131180750 $$ *//* Generated By:JavaCC: Do not edit this line. Token.java Version 5.0 */
/* JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COL=null,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.coode.owlapi.obo12.parser;

/**
 * Describes the input token stream.
 */
@SuppressWarnings({"all","fallthrough"})
class Token implements java.io.Serializable {public static class __CLR4_5_224s24slvicnlhl{public static com_atlassian_clover.CoverageRecorder R;public static com_atlassian_clover.CloverProfile[] profiles = { };@java.lang.SuppressWarnings("unchecked") public static <I, T extends I> I lambdaInc(final int i,final T l,final int si){java.lang.reflect.InvocationHandler h=new java.lang.reflect.InvocationHandler(){public java.lang.Object invoke(java.lang.Object p,java.lang.reflect.Method m,java.lang.Object[] a) throws Throwable{R.inc(i);R.inc(si);try{return m.invoke(l,a);}catch(java.lang.reflect.InvocationTargetException e){throw e.getCause()!=null?e.getCause():new RuntimeException("Clover failed to invoke instrumented lambda",e);}}};return (I)java.lang.reflect.Proxy.newProxyInstance(l.getClass().getClassLoader(),l.getClass().getInterfaces(),h);}static{com_atlassian_clover.CoverageRecorder _R=null;try{com_atlassian_clover.CloverVersionInfo.An_old_version_of_clover_is_on_your_compilation_classpath___Please_remove___Required_version_is___4_5_2();if(20240131180750L!=com_atlassian_clover.CloverVersionInfo.getBuildStamp()){com_atlassian_clover.Clover.l("[CLOVER] WARNING: The Clover version used in instrumentation shall match the runtime version.");com_atlassian_clover.Clover.l("[CLOVER] WARNING: Instr=4.5.2#20240131180750,Runtime="+com_atlassian_clover.CloverVersionInfo.getReleaseNum()+"#"+com_atlassian_clover.CloverVersionInfo.getBuildStamp());}R=com_atlassian_clover.Clover.getNullRecorder();_R=com_atlassian_clover.Clover.getNullRecorder();_R=com_atlassian_clover.Clover.getRecorder("\u002f\u0055\u0073\u0065\u0072\u0073\u002f\u0073\u0068\u0072\u0065\u0079\u0061\u0063\u0068\u0061\u0075\u0064\u0068\u0061\u0072\u0079\u002f\u0044\u0065\u0073\u006b\u0074\u006f\u0070\u002f\u0065\u0078\u0074\u0072\u0061\u002f\u0043\u0053\u0035\u0032\u0037\u002d\u0050\u0072\u006f\u006a\u0065\u0063\u0074\u002f\u0042\u0075\u0067\u0073\u002f\u0042\u0075\u0067\u0053\u0077\u0061\u0072\u006d\u002f\u0032\u006e\u0064\u005f\u0072\u006f\u0075\u006e\u0064\u002f\u006f\u0077\u006c\u0061\u0070\u0069\u002d\u0031\u0035\u0038\u0039\u0038\u0039\u0037\u0039\u0032\u002f\u0042\u0075\u0067\u0067\u0079\u002d\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u002f\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074\u0079\u002f\u0074\u0061\u0072\u0067\u0065\u0074\u002f\u0063\u006c\u006f\u0076\u0065\u0072\u002f\u0063\u006c\u006f\u0076\u0065\u0072\u002e\u0064\u0062",1714237345588L,8589935092L,2780,profiles,new java.lang.String[]{"clover.distributed.coverage",null});}catch(java.lang.SecurityException e){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised because it has insufficient security privileges. Please consult the Clover documentation on the security policy file changes required. ("+e.getClass()+":"+e.getMessage()+")");}catch(java.lang.NoClassDefFoundError e){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised. Are you sure you have Clover in the runtime classpath? ("+e.getClass()+":"+e.getMessage()+")");}catch(java.lang.Throwable t){java.lang.System.err.println("[CLOVER] FATAL ERROR: Clover could not be initialised because of an unexpected error. ("+t.getClass()+":"+t.getMessage()+")");}R=_R;}}public static final com_atlassian_clover.TestNameSniffer __CLR4_5_2_TEST_NAME_SNIFFER=com_atlassian_clover.TestNameSniffer.NULL_INSTANCE;

    /**
     * The version identifier for this Serializable class. Increment only if the
     * <i>serialized</i> form of the class changes.
     */
    private static final long serialVersionUID = 30406L;
    /**
     * An integer that describes the kind of this token. This numbering system
     * is determined by JavaCCParser, and a table of these numbers is stored in
     * the file ...Constants.java.
     */
    public int kind;
    /** The line number of the first character of this Token. */
    public int beginLine;
    /** The column number of the first character of this Token. */
    public int beginColumn;
    /** The line number of the last character of this Token. */
    public int endLine;
    /** The column number of the last character of this Token. */
    public int endColumn;
    /**
     * The string image of the token.
     */
    public String image;
    /**
     * A reference to the next regular (non-special) token from the input
     * stream. If this is the last token from the input stream, or if the token
     * manager has not read tokens beyond this one, this field is set to null.
     * This is true only if this token is also a regular token. Otherwise, see
     * below for a description of the contents of this field.
     */
    public Token next;
    /**
     * This field is used to access special tokens that occur prior to this
     * token, but after the immediately preceding regular (non-special) token.
     * If there are no such special tokens, this field is set to null. When
     * there are more than one such special token, this field refers to the last
     * of these special tokens, which in turn refers to the next previous
     * special token through its specialToken field, and so on until the first
     * special token (whose specialToken field is null). The next fields of
     * special tokens refer to other special tokens that immediately follow it
     * (without an intervening regular token). If there is no such token, this
     * field is null.
     */
    public Token specialToken;

    /**
     * An optional attribute value of the Token. Tokens which are not used as
     * syntactic sugar will often contain meaningful values that will be used
     * later on by the compiler or interpreter. This attribute value is often
     * different from the image. Any subclass of Token that actually wants to
     * return a non-null value can override this method as appropriate.
     */
    public Object getValue() {try{__CLR4_5_224s24slvicnlhl.R.inc(2764);
        __CLR4_5_224s24slvicnlhl.R.inc(2765);return null;
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    /**
     * No-argument constructor
     */
    public Token() {try{__CLR4_5_224s24slvicnlhl.R.inc(2766);}finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    /**
     * Constructs a new token for the specified Image.
     */
    public Token(int kind) {
        this(kind, null);__CLR4_5_224s24slvicnlhl.R.inc(2768);try{__CLR4_5_224s24slvicnlhl.R.inc(2767);
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    /**
     * Constructs a new token for the specified Image and Kind.
     */
    public Token(int kind, String image) {try{__CLR4_5_224s24slvicnlhl.R.inc(2769);
        __CLR4_5_224s24slvicnlhl.R.inc(2770);this.kind = kind;
        __CLR4_5_224s24slvicnlhl.R.inc(2771);this.image = image;
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    /**
     * Returns the image.
     */
    @Override
    public String toString() {try{__CLR4_5_224s24slvicnlhl.R.inc(2772);
        __CLR4_5_224s24slvicnlhl.R.inc(2773);return image;
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    /**
     * Returns a new Token object, by default. However, if you want, you can
     * create and return subclass objects based on the value of ofKind. Simply
     * add the cases to the switch for all those special cases. For example, if
     * you have a subclass of Token called IDToken that you want to create if
     * ofKind is ID, simply add something like : case MyParserConstants.ID :
     * return new IDToken(ofKind, image); to the following switch statement.
     * Then you can cast matchedToken variable to the appropriate type and use
     * sit in your lexical actions.
     */
    public static Token newToken(int ofKind, String image) {try{__CLR4_5_224s24slvicnlhl.R.inc(2774);
        boolean __CLB4_5_2_bool0=false;__CLR4_5_224s24slvicnlhl.R.inc(2775);switch (ofKind) {
            default:if (!__CLB4_5_2_bool0) {__CLR4_5_224s24slvicnlhl.R.inc(2776);__CLB4_5_2_bool0=true;}
                __CLR4_5_224s24slvicnlhl.R.inc(2777);return new Token(ofKind, image);
        }
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}

    public static Token newToken(int ofKind) {try{__CLR4_5_224s24slvicnlhl.R.inc(2778);
        __CLR4_5_224s24slvicnlhl.R.inc(2779);return newToken(ofKind, null);
    }finally{__CLR4_5_224s24slvicnlhl.R.flushNeeded();}}
}
/* JavaCC - OriginalChecksum=d74a6c1fa975221287ec12c892b35821 (do not edit this line) */
