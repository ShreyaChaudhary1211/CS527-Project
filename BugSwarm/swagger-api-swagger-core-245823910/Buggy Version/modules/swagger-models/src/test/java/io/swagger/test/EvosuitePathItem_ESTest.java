/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 09 06:23:20 GMT 2024
 */

package io.swagger.test;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.parameters.Parameter;
import io.swagger.oas.models.servers.Server;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuitePathItem_ESTest extends EvosuitePathItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      Operation operation1 = pathItem1.getTrace();
      assertNull(operation1.getDeprecated());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.summary("b");
      String string0 = pathItem0.getSummary();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.summary("");
      String string0 = pathItem0.getSummary();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem0.servers(linkedList0);
      List<Server> list0 = pathItem0.getServers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Server server0 = new Server();
      pathItem0.addServersItem(server0);
      List<Server> list0 = pathItem0.getServers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.post(operation0);
      Operation operation1 = pathItem0.getPost();
      assertNull(operation1.getSummary());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.patch(operation0);
      Operation operation1 = pathItem1.getPatch();
      assertSame(operation0, operation1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      pathItem0.parameters(linkedList0);
      List<Parameter> list0 = pathItem0.getParameters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      List<Parameter> list0 = pathItem1.getParameters();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.head(operation0);
      Operation operation1 = pathItem0.getHead();
      assertSame(operation1, operation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.get(operation0);
      Operation operation1 = pathItem0.getGet();
      assertSame(operation1, operation0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.addExtension("^jUMiK}g{+ATi1T", operation0);
      Map<String, Object> map0 = pathItem0.getExtensions();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.setDescription("ENUM$VALUES");
      String string0 = pathItem0.getDescription();
      assertEquals("ENUM$VALUES", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.description("");
      String string0 = pathItem0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.delete(operation0);
      Operation operation1 = pathItem1.getDelete();
      assertNull(operation1.getOperationId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.set$ref("Gm$)UO/");
      String string0 = pathItem0.get$ref();
      assertEquals("Gm$)UO/", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("");
      String string0 = pathItem1.get$ref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.trace(operation0);
      Server server0 = new Server();
      operation0.addServersItem(server0);
      server0.addExtension("    delete: ", server0);
      // Undeclared exception!
      try { 
        pathItem1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      pathItem0.$ref("matrix");
      String string0 = pathItem0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      pathItem0.addExtension("XdOJ)C+x5g#", parameter0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.$ref("matrix");
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.patch(operation0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.head(operation0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.delete(operation0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.post(operation0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.put(operation0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.get(operation0);
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.description("    security: ");
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = pathItem0.summary("XdOJ)C+x5g#");
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Parameter parameter0 = new Parameter();
      pathItem0.addParametersItem(parameter0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.patch(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setPatch(operation0);
      PathItem pathItem1 = new PathItem();
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.setHead(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem0.setOptions(operation0);
      boolean boolean0 = pathItem1.equals(pathItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.setOptions(operation0);
      boolean boolean0 = pathItem1.equals(pathItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.setPost(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem0.post(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.setPut(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      PathItem pathItem2 = pathItem1.servers((List<Server>) null);
      assertTrue(pathItem2.equals((Object)pathItem0));
      
      Parameter parameter0 = new Parameter();
      PathItem pathItem3 = pathItem2.addParametersItem(parameter0);
      Operation operation0 = new Operation();
      pathItem2.put(operation0);
      boolean boolean0 = pathItem3.equals(pathItem0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      Operation operation0 = new Operation();
      pathItem1.get(operation0);
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      pathItem1.description("&n<Yt#1#");
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      pathItem0.setDescription("class PathItem {\n");
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(pathItem1.equals((Object)pathItem0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      pathItem1.setSummary("'P#!?CH~!");
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      boolean boolean0 = pathItem0.equals("OFc\"}>]JW(Know0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      boolean boolean0 = pathItem0.equals(pathItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      PathItem pathItem1 = new PathItem();
      assertTrue(pathItem1.equals((Object)pathItem0));
      
      pathItem1.$ref("matrix");
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      pathItem0.addExtension("(yh`AegN[6z:7EQ#z", parameter0);
      pathItem0.addExtension("", pathItem0);
      assertNull(pathItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Parameter parameter0 = new Parameter();
      PathItem pathItem1 = pathItem0.addParametersItem(parameter0);
      pathItem1.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Server server0 = new Server();
      pathItem0.addServersItem(server0);
      pathItem0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem0.servers(linkedList0);
      Server server0 = new Server();
      PathItem pathItem1 = pathItem0.addServersItem(server0);
      assertSame(pathItem0, pathItem1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setTrace(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem1.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.delete(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.post(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.put(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.get(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Map<String, Object> map0 = pathItem0.getExtensions();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getPatch();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getPost();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setGet(operation0);
      PathItem pathItem1 = new PathItem();
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.put(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setPatch(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getHead();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      List<Parameter> list0 = pathItem0.getParameters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getTrace();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getDelete();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      List<Server> list0 = pathItem0.getServers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.head(operation0);
      Map<PathItem.HttpMethod, Operation> map0 = pathItem0.getOperationMap();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Server> linkedList0 = new LinkedList<Server>();
      pathItem0.setServers(linkedList0);
      assertNull(pathItem0.getSummary());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setPut(operation0);
      Operation operation1 = pathItem0.getPut();
      assertNull(operation1.getSummary());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getOptions();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      pathItem0.setExtensions(hashMap0);
      Map<String, Object> map0 = pathItem0.getExtensions();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getGet();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.post(operation0);
      List<Operation> list0 = pathItem1.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.patch(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      String string0 = pathItem0.get$ref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      pathItem0.setParameters(linkedList0);
      assertNull(pathItem0.getDescription());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = pathItem0.getPut();
      assertNull(operation0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      PathItem pathItem1 = pathItem0.parameters(linkedList0);
      Parameter parameter0 = new Parameter();
      PathItem pathItem2 = pathItem0.addParametersItem(parameter0);
      assertSame(pathItem2, pathItem1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.delete(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      PathItem pathItem1 = pathItem0.options(operation0);
      List<Operation> list0 = pathItem1.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setOptions(operation0);
      Operation operation1 = pathItem0.getOptions();
      assertNull(operation1.getSummary());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      String string0 = pathItem0.getSummary();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setTrace(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setHead(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.setDelete(operation0);
      PathItem pathItem1 = new PathItem();
      boolean boolean0 = pathItem0.equals(pathItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      String string0 = pathItem0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      PathItem pathItem0 = new PathItem();
      Operation operation0 = new Operation();
      pathItem0.get(operation0);
      List<Operation> list0 = pathItem0.getOperations();
      assertEquals(1, list0.size());
  }
}
