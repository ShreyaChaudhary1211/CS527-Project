/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 22:40:14 GMT 2024
 */

package com.alibaba.fastjson2.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.filter.ValueFilter;
import com.alibaba.fastjson2.function.impl.StringToAny;
import com.alibaba.fastjson2.function.impl.ToDouble;
import com.alibaba.fastjson2.function.impl.ToShort;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueFilter_ESTest extends ValueFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ValueFilter valueFilter0 = ValueFilter.of((Predicate<String>) null, (Function) null);
      ValueFilter valueFilter1 = ValueFilter.of("8", (Map) hashMap0);
      ValueFilter valueFilter2 = ValueFilter.compose(valueFilter0, valueFilter1);
      assertFalse(valueFilter2.equals((Object)valueFilter0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ValueFilter valueFilter0 = ValueFilter.of("", (Map) hashMap0);
      Object object0 = valueFilter0.apply(hashMap0, "", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Short short0 = new Short((short)0);
      ToShort toShort0 = new ToShort(short0);
      ValueFilter valueFilter0 = ValueFilter.of("1 \"CflyeVHo", (Function) toShort0);
      Integer integer0 = new Integer(83);
      Predicate<String> predicate0 = Predicate.isEqual((Object) integer0);
      Object object0 = valueFilter0.apply(predicate0, "iS FKLMw@#q7mXVU;3p", short0);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Short short0 = new Short((short)0);
      ToShort toShort0 = new ToShort(short0);
      Integer integer0 = new Integer(83);
      Predicate<String> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<String> predicate1 = predicate0.negate();
      ValueFilter valueFilter0 = ValueFilter.of(predicate1, (Function) toShort0);
      // Undeclared exception!
      try { 
        valueFilter0.apply(short0, "W{Xxg<u3z]Hp;DF7N", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Short class java.lang.String
         //
         verifyException("com.alibaba.fastjson2.function.impl.ToShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.negate();
      Double double0 = new Double(1594.85350262601);
      ToDouble toDouble0 = new ToDouble(double0);
      ValueFilter valueFilter0 = ValueFilter.of(predicate1, (Function) toDouble0);
      // Undeclared exception!
      try { 
        valueFilter0.apply((Object) null, "^NHw[}sgj=rV,/*R /", "com.alibaba.fastjson2.util.GuavaSupport$ArrayListMultimapConvertFunction");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueFilter valueFilter0 = ValueFilter.of("", (Map) null);
      // Undeclared exception!
      try { 
        valueFilter0.apply("", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.filter.ValueFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      StringToAny stringToAny0 = new StringToAny(class0, object0);
      ValueFilter valueFilter0 = ValueFilter.of("%.:z;07&|B>9V#v", (Function) stringToAny0);
      // Undeclared exception!
      try { 
        valueFilter0.apply("%.:z;07&|B>9V#v", "%.:z;07&|B>9V#v", stringToAny0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson2.function.impl.StringToAny cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson2.function.impl.StringToAny", e);
      }
  }
}
