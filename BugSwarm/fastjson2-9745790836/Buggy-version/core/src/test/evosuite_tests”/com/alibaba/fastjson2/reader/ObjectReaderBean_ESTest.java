/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:28:35 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.reader.FieldReader;
import com.alibaba.fastjson2.reader.ObjectReaderAdapter;
import com.alibaba.fastjson2.reader.ObjectReaderCreator;
import com.alibaba.fastjson2.reader.ObjectReaderException;
import com.alibaba.fastjson2.reader.ObjectReaderProvider;
import com.alibaba.fastjson2.reader.ObjectReaderSeeAlso;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.time.chrono.ThaiBuddhistEra;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectReaderBean_ESTest extends ObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      objectReaderException0.hasDefaultValue = true;
      JSONReader jSONReader0 = JSONReader.of("2Miy4|+4/b)K,-uj<R");
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, 3309L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character 2, line 1, column 2, fastjson-version 2.0.21 2Miy4|+4/b)K,-uj<R
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      Integer integer0 = new Integer((byte) (-95));
      objectReaderException0.initDefaultValue(integer0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of("No suitable ObjectReader found for", jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) "No suitable ObjectReader found for", 2096L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal fieldName inputN, offset 1, character N, line 1, column 2, fastjson-version 2.0.21 No suitable ObjectReader found for
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.of(byteArray0, 34, (-74));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) class0, (long) 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      char[] charArray0 = new char[3];
      JSONReader jSONReader0 = JSONReader.of(charArray0, 0, (-1796));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) class0, 1370L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte) (-75), (int) (byte)34);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, 3309L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -75
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra((JSONReader) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[0];
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType(jSONReader0, class0, (byte) (-81));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte)0, (int) (byte)34);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, 3332L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte)0, (int) (byte)34);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, 3309L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-81);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (int) (byte)0, (int) (byte)34);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) jSONReader0, 3309L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      classArray0[2] = classArray0[0];
      classArray0[3] = classArray0[2];
      classArray0[4] = class1;
      classArray0[5] = class1;
      classArray0[6] = classArray0[3];
      String[] stringArray0 = new String[6];
      stringArray0[1] = "expect {, but [, class ";
      FieldReader<Map<Object, ThaiBuddhistEra>>[] fieldReaderArray0 = (FieldReader<Map<Object, ThaiBuddhistEra>>[]) Array.newInstance(FieldReader.class, 0);
      ObjectReaderSeeAlso<ThaiBuddhistEra> objectReaderSeeAlso0 = new ObjectReaderSeeAlso<ThaiBuddhistEra>(class0, (Supplier<ThaiBuddhistEra>) null, "expect {, but [, class ", classArray0, stringArray0, fieldReaderArray0);
      byte[] byteArray0 = new byte[1];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      objectReaderSeeAlso0.checkAutoType(jSONReader0, class1, (-1902L));
      assertEquals(32L, objectReaderSeeAlso0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      HashMap<Long, InputStream> hashMap0 = new HashMap<Long, InputStream>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>(hashMap0);
      objectReaderException0.acceptExtra(hashMap1, "auotype not support", (Object) null);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      char[] charArray0 = new char[6];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider((ObjectReaderCreator) null);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(charArray0, 1096, 0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra(jSONReader0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error, offset 1096, char \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ObjectReaderException<Integer> objectReaderException0 = new ObjectReaderException<Integer>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class0, class0, (byte)81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      String[] stringArray0 = new String[6];
      FieldReader<Map<Object, ThaiBuddhistEra>>[] fieldReaderArray0 = (FieldReader<Map<Object, ThaiBuddhistEra>>[]) Array.newInstance(FieldReader.class, 0);
      ObjectReaderSeeAlso<ThaiBuddhistEra> objectReaderSeeAlso0 = null;
      try {
        objectReaderSeeAlso0 = new ObjectReaderSeeAlso<ThaiBuddhistEra>((Class) null, (Supplier<ThaiBuddhistEra>) null, "expect {, but [, class ", classArray0, stringArray0, fieldReaderArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderSeeAlso", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      Class<String> class1 = String.class;
      Supplier<String> supplier0 = objectReaderCreator0.createInstanceSupplier(class1);
      FieldReader<Object>[] fieldReaderArray0 = (FieldReader<Object>[]) Array.newInstance(FieldReader.class, 0);
      ObjectReaderAdapter<String> objectReaderAdapter0 = new ObjectReaderAdapter<String>(class0, supplier0, fieldReaderArray0);
      Class<String> class2 = objectReaderAdapter0.getObjectClass();
      assertEquals(0L, objectReaderAdapter0.getFeatures());
      assertNotNull(class2);
  }
}
