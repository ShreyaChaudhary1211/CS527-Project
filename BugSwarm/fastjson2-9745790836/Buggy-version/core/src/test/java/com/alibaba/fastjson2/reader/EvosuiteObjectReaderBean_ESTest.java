/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:53:33 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONObject;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.codec.BeanInfo;
import com.alibaba.fastjson2.reader.FieldReader;
import com.alibaba.fastjson2.reader.FieldReaderAnySetter;
import com.alibaba.fastjson2.reader.ObjectReader1;
import com.alibaba.fastjson2.reader.ObjectReader4;
import com.alibaba.fastjson2.reader.ObjectReaderCreator;
import com.alibaba.fastjson2.reader.ObjectReaderException;
import com.alibaba.fastjson2.reader.ObjectReaderImplInt64;
import com.alibaba.fastjson2.reader.ObjectReaderProvider;
import com.alibaba.fastjson2.schema.JSONSchema;
import com.alibaba.fastjson2.schema.ObjectSchema;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.format.FormatStyle;
import java.util.HashMap;
import java.util.function.Function;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvosuiteObjectReaderBean_ESTest extends ObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      ObjectReaderImplInt64 objectReaderImplInt64_0 = ObjectReaderImplInt64.INSTANCE;
      char[] charArray0 = new char[6];
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider();
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of(charArray0, jSONReader_Context0);
      Long long0 = objectReaderImplInt64_0.readObject(jSONReader0, (Type) class0, (Object) class0, (-2554L));
      objectReaderException0.initDefaultValue(long0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      JSONReader jSONReader0 = JSONReader.of("-y<-y(pc6VX`F;kE~");
      objectReaderException0.processExtra(jSONReader0, "-y<-y(pc6VX`F;kE~");
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      JSONObject jSONObject0 = new JSONObject();
      ObjectSchema objectSchema0 = new ObjectSchema(jSONObject0);
      Function<Integer, Integer> function0 = Function.identity();
      Class<String> class1 = String.class;
      FieldReaderAnySetter<Integer> fieldReaderAnySetter0 = new FieldReaderAnySetter<Integer>(class1, class1, 0, (-1875L), "i_u6=j", objectSchema0, (Method) null);
      byte[] byteArray0 = new byte[3];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      ObjectReader4<Object> objectReader4_0 = new ObjectReader4<Object>(class0, 64L, objectSchema0, (Supplier<Object>) null, function0, fieldReaderAnySetter0, fieldReaderAnySetter0, fieldReaderAnySetter0, fieldReaderAnySetter0);
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      // Undeclared exception!
      try { 
        objectReader4_0.readObject(jSONReader0, fieldReaderAnySetter0.fieldType, (Object) formatStyle0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect object, but INT32 0, offset 0
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReader4", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ObjectReaderException<FormatStyle> objectReaderException0 = new ObjectReaderException<FormatStyle>(class0);
      JSONReader jSONReader0 = JSONReader.of("com.alibaba.fastjson2.reader.ObjectReaderBean", 3233, (-1670));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) jSONReader0, (long) (-1670));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class0, class0, 1276L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      JSONReader jSONReader0 = JSONReader.of("AW;%>f.i");
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra(jSONReader0, "AW;%>f.i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error, offset 1, char A
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra((JSONReader) null, "AW;%>f.i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType((JSONReader) null, class0, (-916L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNullForPrimitives;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[5] = jSONReader_Feature0;
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[2];
      // Undeclared exception!
      try { 
        JSONObject.parseObject("8[Y", class0, jSONReader_FeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character 8, line 1, column 2, fastjson-version 2.0.21 8[Y
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      ObjectSchema objectSchema0 = new ObjectSchema(jSONObject0);
      Class<String> class0 = String.class;
      FieldReaderAnySetter<Integer> fieldReaderAnySetter0 = new FieldReaderAnySetter<Integer>(class0, class0, 0, (-1875L), "i_u6=j", objectSchema0, (Method) null);
      Class<Long> class1 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class1);
      objectReaderException0.acceptExtra((Object) null, ".", fieldReaderAnySetter0);
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Class<Long> class1 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class1);
      byte[] byteArray0 = new byte[3];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, beanInfo0, (-1875L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect {, but [, class java.lang.Long, parent fieldName com.alibaba.fastjson2.codec.BeanInfo@1, offset 0
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanInfo beanInfo0 = new BeanInfo();
      Class<Long> class1 = Long.class;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class1);
      byte[] byteArray0 = new byte[3];
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, beanInfo0, 1006L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array not support input INT32 0, offset 1/3
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ObjectReaderException<Long> objectReaderException0 = new ObjectReaderException<Long>(class0);
      JSONReader jSONReader0 = JSONReader.of("+_zs8U$0ac/Y{E|@n");
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra(jSONReader0, "+_zs8U$0ac/Y{E|@n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 13
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF16", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = JSONObject.of("5:n`9", (Object) "com.alibaba.fastjson2.writer.ObjectWriterImplString", "char[]", (Object) null, "5:n`9", (Object) hashMap0);
      Class<InputStream> class0 = InputStream.class;
      JSONSchema jSONSchema0 = JSONSchema.of(jSONObject0, class0);
      ObjectReader1<Long> objectReader1_0 = null;
      try {
        objectReader1_0 = new ObjectReader1<Long>((Class) null, 941L, jSONSchema0, (Supplier<Long>) null, (Function) null, (FieldReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<FormatStyle> class0 = FormatStyle.class;
      ObjectReaderException<FormatStyle> objectReaderException0 = new ObjectReaderException<FormatStyle>(class0);
      Class<FormatStyle> class1 = objectReaderException0.getObjectClass();
      assertEquals(0L, objectReaderException0.getFeatures());
      assertNotNull(class1);
  }
}
