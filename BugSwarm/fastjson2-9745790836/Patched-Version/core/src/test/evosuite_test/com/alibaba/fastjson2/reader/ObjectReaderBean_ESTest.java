/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:43:27 GMT 2024
 */

package com.alibaba.fastjson2.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson2.JSONObject;
import com.alibaba.fastjson2.JSONReader;
import com.alibaba.fastjson2.SymbolTable;
import com.alibaba.fastjson2.reader.FieldReaderAnySetter;
import com.alibaba.fastjson2.reader.FieldReaderBoolField;
import com.alibaba.fastjson2.reader.ObjectReader6;
import com.alibaba.fastjson2.reader.ObjectReaderCreator;
import com.alibaba.fastjson2.reader.ObjectReaderException;
import com.alibaba.fastjson2.reader.ObjectReaderImplMap;
import com.alibaba.fastjson2.reader.ObjectReaderProvider;
import com.alibaba.fastjson2.schema.JSONSchema;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.time.chrono.MinguoEra;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.function.Function;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectReaderBean_ESTest extends ObjectReaderBean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of("expect {, but [, class ", jSONReader_Context0);
      LinkedHashSet<MinguoEra> linkedHashSet0 = new LinkedHashSet<MinguoEra>();
      // Undeclared exception!
      try { 
        jSONReader0.readArray((Collection) linkedHashSet0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character e, line 1, column 2, fastjson-version 2.0.21 expect {, but [, class 
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      objectReaderException0.initDefaultValue(class0);
      assertEquals("@type", objectReaderException0.getTypeKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ObjectReaderException<Boolean> objectReaderException0 = new ObjectReaderException<Boolean>(class0);
      JSONReader jSONReader0 = JSONReader.of("(Nykt8g&", 1, (-1471));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Type) class0, (Object) null, (-83L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MinguoEra> class0 = MinguoEra.class;
      ObjectReaderException<MinguoEra> objectReaderException0 = new ObjectReaderException<MinguoEra>(class0);
      Boolean boolean0 = Boolean.TRUE;
      char[] charArray0 = new char[1];
      JSONReader jSONReader0 = JSONReader.of(charArray0, 34, (-1452));
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) boolean0, (long) (-1452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray((JSONReader) null, class0, "L;uuO|!3", 9999999999L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 39, 2333);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[7];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.FieldBased;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_Feature0;
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[4];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      JSONReader.Context jSONReader_Context0 = jSONReader0.getContext();
      JSONReader jSONReader1 = JSONReader.of((InputStream) sequenceInputStream0, charset0, jSONReader_Context0);
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra(jSONReader1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReaderUTF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      // Undeclared exception!
      try { 
        objectReaderException0.processExtra((JSONReader) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      ObjectReaderCreator objectReaderCreator0 = new ObjectReaderCreator();
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0, (SymbolTable) null);
      JSONReader jSONReader0 = JSONReader.of(byteArray0, (int) (byte)126, (-128), charset0, jSONReader_Context0);
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType(jSONReader0, class0, 64L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UnsupportedOperation
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType((JSONReader) null, class1, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderException<BufferedInputStream> objectReaderException0 = new ObjectReaderException<BufferedInputStream>(class0);
      byte[] byteArray0 = new byte[0];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, (-854), (-854), (SymbolTable) null);
      Class<InputStream> class1 = InputStream.class;
      // Undeclared exception!
      try { 
        objectReaderException0.checkAutoType(jSONReader0, class1, (-854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -854
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(" tT'W7*", jSONReader_Context0);
      LinkedHashSet<MinguoEra> linkedHashSet0 = new LinkedHashSet<MinguoEra>();
      // Undeclared exception!
      try { 
        jSONReader0.readArray((Collection) linkedHashSet0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : 
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(" mT'Wz7*", jSONReader_Context0);
      LinkedHashSet<MinguoEra> linkedHashSet0 = new LinkedHashSet<MinguoEra>();
      // Undeclared exception!
      try { 
        jSONReader0.readArray((Collection) linkedHashSet0, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 2, character m, line 1, column 3, fastjson-version 2.0.21  mT'Wz7*
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ObjectReaderException<Boolean> objectReaderException0 = new ObjectReaderException<Boolean>(class0);
      char[] charArray0 = new char[7];
      JSONReader jSONReader0 = JSONReader.of(charArray0);
      // Undeclared exception!
      try { 
        objectReaderException0.readObject(jSONReader0, (Object) class0, (long) 'L');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // offset 1, character \u0000, line 1, column 2, fastjson-version 2.0.21 \u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      byte[] byteArray0 = new byte[2];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0);
      // Undeclared exception!
      try { 
        objectReaderException0.readArrayMappingJSONBObject(jSONReader0, class0, class0, 64L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // array not support input INT32 0, offset 1/2
         //
         verifyException("com.alibaba.fastjson2.JSONReaderJSONB", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      objectReaderException0.acceptExtra(class0, "ww>WqU/.)C$", "ww>WqU/.)C$");
      assertEquals(0L, objectReaderException0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderException<BufferedInputStream> objectReaderException0 = new ObjectReaderException<BufferedInputStream>(class0);
      byte[] byteArray0 = new byte[1];
      JSONReader.Feature[] jSONReader_FeatureArray0 = new JSONReader.Feature[9];
      JSONReader.Feature jSONReader_Feature0 = JSONReader.Feature.ErrorOnNullForPrimitives;
      jSONReader_FeatureArray0[0] = jSONReader_Feature0;
      jSONReader_FeatureArray0[1] = jSONReader_FeatureArray0[0];
      jSONReader_FeatureArray0[2] = jSONReader_Feature0;
      jSONReader_FeatureArray0[3] = jSONReader_FeatureArray0[2];
      jSONReader_FeatureArray0[4] = jSONReader_FeatureArray0[1];
      jSONReader_FeatureArray0[5] = jSONReader_FeatureArray0[3];
      jSONReader_FeatureArray0[6] = jSONReader_FeatureArray0[4];
      jSONReader_FeatureArray0[7] = jSONReader_Feature0;
      jSONReader_FeatureArray0[8] = jSONReader_FeatureArray0[1];
      JSONReader jSONReader0 = JSONReader.ofJSONB(byteArray0, jSONReader_FeatureArray0);
      objectReaderException0.processExtra(jSONReader0, jSONReader_FeatureArray0[6]);
      assertFalse(jSONReader0.isSupportBeanArray());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      JSONReader jSONReader0 = JSONReader.of("");
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, (Object) null, (-2457L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectReaderException<Object> objectReaderException0 = new ObjectReaderException<Object>(class0);
      JSONReader jSONReader0 = JSONReader.of("");
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, (Type) null, (Object) null, (-2457L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : \u001A
         //
         verifyException("com.alibaba.fastjson2.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<Integer> class1 = Integer.class;
      JSONObject jSONObject0 = JSONObject.of("F3 !}V46($o$M5OlO", (Object) null, "F3 !}V46($o$M5OlO", (Object) null);
      Class<String> class2 = String.class;
      JSONSchema jSONSchema0 = JSONSchema.of(jSONObject0, class2);
      Class<Annotation> class3 = Annotation.class;
      Boolean boolean0 = new Boolean("F3 !}V46($o$M5OlO");
      Class class4 = ObjectReaderImplMap.CLASS_UNMODIFIABLE_NAVIGABLE_MAP;
      FieldReaderAnySetter<Integer> fieldReaderAnySetter0 = new FieldReaderAnySetter<Integer>(class4, class0, 458, 297L, "syntax error : ", jSONSchema0, (Method) null);
      FieldReaderBoolField<InputStream> fieldReaderBoolField0 = new FieldReaderBoolField<InputStream>("syntax error : ", class3, (-750), (-750), "F3 !}V46($o$M5OlO", boolean0, jSONSchema0, (Field) null);
      ObjectReader6<Integer> objectReader6_0 = new ObjectReader6<Integer>(class1, (Supplier<Integer>) null, (-750), jSONSchema0, (Function) null, fieldReaderBoolField0, fieldReaderAnySetter0, fieldReaderBoolField0, fieldReaderAnySetter0, fieldReaderAnySetter0, fieldReaderBoolField0);
      // Undeclared exception!
      try { 
        objectReader6_0.initDefaultValue((Integer) fieldReaderBoolField0.ordinal);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // set syntax error :  error
         //
         verifyException("com.alibaba.fastjson2.reader.FieldReaderBoolField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReaderException<BufferedInputStream> objectReaderException0 = new ObjectReaderException<BufferedInputStream>(class0);
      ObjectReaderCreator objectReaderCreator0 = ObjectReaderCreator.INSTANCE;
      ObjectReaderProvider objectReaderProvider0 = new ObjectReaderProvider(objectReaderCreator0);
      JSONReader.Context jSONReader_Context0 = new JSONReader.Context(objectReaderProvider0);
      JSONReader jSONReader0 = JSONReader.of(" mT'Wz7*", jSONReader_Context0);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      // Undeclared exception!
      try { 
        objectReaderException0.processObjectInputSingleItemArray(jSONReader0, class0, hashMap0, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect {, but [, class java.io.BufferedInputStream, parent fieldName {}, offset 2, character m, line 1, column 3, fastjson-version 2.0.21  mT'Wz7*
         //
         verifyException("com.alibaba.fastjson2.reader.ObjectReaderBean", e);
      }
  }
}
