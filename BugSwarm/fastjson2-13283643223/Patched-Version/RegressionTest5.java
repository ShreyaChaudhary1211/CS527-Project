import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        boolean boolean12 = jSONWriter3.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter3.writeEnum((java.lang.Enum) feature13);
        jSONWriter3.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context22.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context22.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        boolean boolean28 = context22.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(context22);
        long long30 = jSONWriter29.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter29.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean33 = context31.isEnabled(feature32);
        jSONWriter3.config(feature32, true);
        com.alibaba.fastjson2.SymbolTable symbolTable36 = jSONWriter3.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 34359804928L + "'", long30 == 34359804928L);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(symbolTable36);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter12.context;
        boolean boolean14 = jSONWriter12.isRefDetect();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        jSONWriter24.writeNull();
        java.lang.reflect.Type type29 = null;
        boolean boolean30 = jSONWriter24.isWriteTypeInfo((java.lang.Object) true, type29);
        jSONWriter15.popPath((java.lang.Object) boolean30);
        jSONWriter15.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        long[] longArray40 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter34.writeInt64(longArray40);
        com.alibaba.fastjson2.JSONObject jSONObject42 = null;
        jSONWriter34.write(jSONObject42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        char[] charArray50 = new char[] { '#', ' ', '#' };
        jSONWriter44.writeString(charArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        jSONWriter52.writeNull();
        boolean boolean56 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        jSONWriter57.writeNameRaw(byteArray59);
        jSONWriter52.writeBinary(byteArray59);
        jSONWriter34.writeBinary(byteArray59);
        jSONWriter15.writeHex(byteArray59);
        jSONWriter12.writeHex(byteArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter65.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter65.writeEnum((java.lang.Enum) feature67);
        boolean boolean69 = jSONWriter65.hasFilter();
        jSONWriter65.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj73 = null;
        boolean boolean74 = jSONWriter72.removeReference(obj73);
        jSONWriter72.writeNull();
        java.math.BigDecimal bigDecimal76 = null;
        jSONWriter72.writeDecimal(bigDecimal76, 1L);
        char[] charArray83 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter72.writeString(charArray83, (int) (byte) 100, (int) (short) 0);
        jSONWriter65.writeString(charArray83);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeString(charArray83, 2, 15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[4,  , a, 4]");
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = null;
        context6.setLabelFilter(labelFilter13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context6.config(feature15, true);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context6.getProvider();
        boolean boolean19 = context6.isDateFormatHasDay();
        context6.setDateFormat("");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context6.setPropertyFilter(propertyFilter12);
        boolean boolean14 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean15 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter16 = context6.getValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(valueFilter16);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        jSONWriter0.writeInt64(longArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        jSONWriter17.writeString("hi!");
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter17.writeDecimal(bigDecimal23, (long) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        com.alibaba.fastjson2.JSONObject jSONObject34 = null;
        jSONWriter26.write(jSONObject34);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter26.isWriteTypeInfo((java.lang.Object) false, class37, (long) (short) -1);
        jSONWriter26.startObject();
        java.math.BigDecimal bigDecimal41 = null;
        jSONWriter26.writeDecimal(bigDecimal41, (long) 100);
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter26.context;
        boolean boolean45 = jSONWriter26.isRefDetect();
        jSONWriter26.writeDateTime14((int) (byte) -1, (int) (byte) 10, (int) (short) 0, (int) '4', (int) (byte) -1, (int) '#');
        java.time.LocalDate localDate53 = null;
        jSONWriter26.writeLocalDate(localDate53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59, feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        jSONWriter65.writeNameRaw(byteArray67);
        java.nio.charset.Charset charset69 = jSONWriter65.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter65.config(feature70, true);
        jSONWriter65.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj76 = null;
        boolean boolean77 = jSONWriter75.removeReference(obj76);
        long[] longArray81 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter75.writeInt64(longArray81);
        java.nio.charset.Charset charset83 = jSONWriter75.getCharset();
        java.lang.String str84 = jSONWriter65.setPath((int) (short) -1, (java.lang.Object) charset83);
        byte[] byteArray85 = jSONWriter64.getBytes(charset83);
        boolean boolean87 = jSONWriter26.writeTypeName(byteArray85, 1056L);
        jSONWriter17.writeRaw(byteArray85);
        jSONWriter0.writeHex(byteArray85);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean8 = context7.isFormatyyyyMMddhhmmss19();
        java.lang.String str9 = context7.getDateFormat();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context7.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray14 = new long[] {};
        jSONWriter11.writeInt64(longArray14);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter11.config(feature16, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        jSONWriter11.config(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context("$.[100].hi\\![32]", featureArray25);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter15.context;
        boolean boolean33 = context32.isDateFormatMillis();
        com.alibaba.fastjson2.filter.NameFilter nameFilter34 = context32.getNameFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context32, symbolTable35);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(nameFilter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        double[] doubleArray12 = new double[] { 34359804928L, 1.0f, 1.0d };
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray12, decimalFormat13);
        java.nio.charset.Charset charset15 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        java.nio.charset.Charset charset20 = jSONWriter16.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter16.config(feature21, true);
        jSONWriter16.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        jSONWriter26.writeNull();
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter26.writeDecimal(bigDecimal30, 1L);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter26.writeBigInt(bigInteger33);
        jSONWriter26.writeInt64((long) 0);
        boolean boolean38 = jSONWriter16.isWriteTypeInfo((java.lang.Object) jSONWriter26, (long) (byte) 1);
        java.time.LocalDate localDate39 = null;
        jSONWriter26.writeLocalDate(localDate39);
        jSONWriter26.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        jSONWriter42.writeNameRaw(byteArray44);
        java.nio.charset.Charset charset46 = jSONWriter42.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter42.config(feature47, true);
        jSONWriter42.writeName("");
        boolean boolean53 = jSONWriter26.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        boolean boolean54 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) boolean53);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.4359804928E10, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeDateTime14((int) '#', (int) (byte) 0, 1, (-1), (int) '4', (int) (byte) 1);
        java.math.BigInteger bigInteger12 = null;
        jSONWriter4.writeBigInt(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.startArray(1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        char[] charArray19 = new char[] { '#', ' ', '#' };
        jSONWriter13.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        jSONWriter21.writeNull();
        boolean boolean25 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter21);
        java.lang.reflect.Type type26 = null;
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter13, type26);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter0.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        java.lang.String[] strArray38 = new java.lang.String[] { "$", "$.hi\\!", "$.[100][4]", "$", "$[0]", "$[0]" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        jSONWriter29.writeString((java.util.List<java.lang.String>) strList39);
        jSONWriter0.write((java.util.List) strList39);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        context15.setDateFormat("hi!");
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        boolean boolean35 = context34.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId36 = context34.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context34.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter38 = context34.getAfterFilter();
        boolean boolean39 = context34.isDateFormatHasDay();
        java.lang.reflect.Type type40 = null;
        boolean boolean42 = jSONWriter27.isWriteTypeInfo((java.lang.Object) boolean39, type40, (long) (-1));
        int int43 = jSONWriter27.level();
        boolean boolean44 = jSONWriter27.utf16;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter45.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter45.writeEnum((java.lang.Enum) feature47);
        boolean boolean49 = jSONWriter45.hasFilter();
        jSONWriter45.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable52 = jSONWriter45.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable53 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray60);
        java.lang.Class class63 = null;
        boolean boolean65 = jSONWriter54.isWriteMapTypeInfo((java.lang.Object) jSONWriter62, class63, 0L);
        java.lang.String[] strArray67 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        jSONWriter54.writeString((java.util.List<java.lang.String>) strList68);
        jSONWriter45.write((java.util.List) strList68);
        jSONWriter27.write((java.util.List) strList68);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList68);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNull(afterFilter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(symbolTable52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        context8.setDateFormat("$");
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable14);
        boolean boolean16 = context8.isDateFormatUnixTime();
        long long17 = context8.getFeatures();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context8.getProvider();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 34359804928L + "'", long17 == 34359804928L);
        org.junit.Assert.assertNotNull(objectWriterProvider18);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        char[] charArray19 = new char[] { '#', ' ', '#' };
        jSONWriter13.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        jSONWriter21.writeNull();
        boolean boolean25 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter21);
        java.lang.reflect.Type type26 = null;
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter13, type26);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeReference("");
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter0.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
        org.junit.Assert.assertNotNull(context31);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        com.alibaba.fastjson2.JSONObject jSONObject51 = null;
        jSONWriter0.write(jSONObject51);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter7.writeBooleanNull();
        jSONWriter7.writeDateTimeISO8601((int) (short) 10, (int) (byte) 10, (int) (byte) 100, 4, (int) (byte) 100, 3, 100, (int) (short) 100, true);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        java.util.Map map31 = null;
        jSONWriter10.write(map31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        jSONWriter33.writeString("hi!");
        jSONWriter33.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        jSONWriter48.writeBooleanNull();
        jSONWriter48.writeComma();
        jSONWriter33.startArray((java.lang.Object) jSONWriter48, (int) (byte) 1);
        jSONWriter48.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        long[] longArray60 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter54.writeInt64(longArray60);
        java.nio.charset.Charset charset62 = jSONWriter54.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter63.writeBooleanNull();
        byte[] byteArray65 = jSONWriter63.getBytes();
        jSONWriter54.writeRaw(byteArray65);
        jSONWriter48.writeStringLatin1(byteArray65);
        boolean boolean68 = jSONWriter10.containsReference((java.lang.Object) jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeDateTime19((int) ' ', (int) (byte) 1, 0, (int) ' ', (int) (short) 10, (-1));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName(34359804938L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        double[] doubleArray12 = new double[] { 34359804928L, 1.0f, 1.0d };
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray12, decimalFormat13);
        long long16 = jSONWriter0.getFeatures(32L);
        boolean boolean17 = jSONWriter0.hasFilter();
        jSONWriter0.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        com.alibaba.fastjson2.JSONObject jSONObject27 = null;
        jSONWriter19.write(jSONObject27);
        java.lang.Class class30 = null;
        boolean boolean32 = jSONWriter19.isWriteTypeInfo((java.lang.Object) false, class30, (long) (short) -1);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter19.writeRaw(byteArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj50 = null;
        boolean boolean51 = jSONWriter49.removeReference(obj50);
        char[] charArray55 = new char[] { '#', ' ', '#' };
        jSONWriter49.writeString(charArray55);
        java.lang.Class class57 = null;
        boolean boolean58 = jSONWriter41.isWriteTypeInfo((java.lang.Object) charArray55, class57);
        jSONWriter19.writeString(charArray55, (int) (byte) 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(charArray55, 4, (-2));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.4359804928E10, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeMillis((long) (byte) 10);
        jSONWriter0.writeTypeName("hi!");
        jSONWriter0.writeReference("");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.startArray((-1));
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId12 = context10.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = context10.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = null;
        context10.setNameFilter(nameFilter14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context10.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        boolean boolean19 = context10.isEnabled(feature18);
        boolean boolean20 = jSONWriter0.isEnabled(feature18);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        boolean boolean36 = context35.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId37 = context35.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter38 = context35.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter39 = context35.getAfterFilter();
        boolean boolean40 = context35.isDateFormatHasDay();
        java.lang.reflect.Type type41 = null;
        boolean boolean43 = jSONWriter28.isWriteTypeInfo((java.lang.Object) boolean40, type41, (long) (-1));
        boolean boolean44 = jSONWriter28.isUTF8();
        jSONWriter28.writeTypeName("$.[100]");
        boolean boolean47 = jSONWriter28.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        java.lang.Class class57 = null;
        jSONWriter55.checkAndWriteTypeName((java.lang.Object) (byte) 0, class57);
        java.math.BigInteger bigInteger59 = null;
        jSONWriter55.writeBigInt(bigInteger59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        long[] longArray64 = new long[] {};
        jSONWriter61.writeInt64(longArray64);
        java.util.Map map66 = null;
        jSONWriter61.write(map66);
        java.util.Map map68 = null;
        jSONWriter61.write(map68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray71 = new double[] {};
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter70.writeDouble(doubleArray71, decimalFormat72);
        java.text.DecimalFormat decimalFormat74 = null;
        jSONWriter61.writeDouble(doubleArray71, decimalFormat74);
        boolean boolean76 = jSONWriter61.useSingleQuote;
        java.lang.Class class78 = null;
        boolean boolean79 = jSONWriter61.isWriteTypeInfo((java.lang.Object) false, class78);
        int[] intArray84 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter61.writeInt32(intArray84);
        jSONWriter55.writeInt32(intArray84);
        jSONWriter28.writeInt32(intArray84);
        boolean boolean88 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) intArray84);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNull(afterFilter13);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertNull(afterFilter38);
        org.junit.Assert.assertNull(afterFilter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[]");
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 10, 52, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        boolean boolean45 = context28.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        long[] longArray49 = new long[] {};
        jSONWriter46.writeInt64(longArray49);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter46.config(feature51, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        jSONWriter46.config(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.of(featureArray60);
        context28.config(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter67);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context10.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11);
        long long13 = context12.getFeatures();
        long long14 = context12.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray21);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context23.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        context23.config(featureArray32);
        context12.config(featureArray32);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature7, feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.of(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        java.nio.charset.Charset charset23 = jSONWriter19.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter19.config(feature24, true);
        jSONWriter19.writeName("");
        boolean boolean29 = jSONWriter19.isWriteNulls();
        java.lang.Class<?> wildcardClass30 = jSONWriter19.getClass();
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) featureArray13, (java.lang.Class) wildcardClass30);
        java.time.LocalDate localDate32 = null;
        jSONWriter0.writeLocalDate(localDate32);
        jSONWriter0.writeFloat((float) '4');
        boolean boolean36 = jSONWriter0.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter0.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        boolean boolean26 = context25.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter27 = context25.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter28 = context25.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        boolean boolean36 = context35.isFormatyyyyMMddhhmmss19();
        boolean boolean38 = context35.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter39 = null;
        context35.setPropertyPreFilter(propertyPreFilter39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.of(context35);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter42 = null;
        context35.setLabelFilter(labelFilter42);
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context35.config(feature44, true);
        boolean boolean47 = context25.isEnabled(feature44);
        boolean boolean48 = jSONWriter0.isEnabled(feature44);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTimeHHMMSS8((int) (short) -1, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(propertyFilter27);
        org.junit.Assert.assertNull(beforeFilter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        java.time.LocalDate localDate34 = null;
        jSONWriter13.writeLocalDate(localDate34);
        java.io.Writer writer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.flushTo(writer36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        jSONWriter27.writeNameRaw(byteArray29);
        java.nio.charset.Charset charset31 = jSONWriter27.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter27.config(feature32, true);
        jSONWriter27.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        java.lang.reflect.Type type41 = null;
        boolean boolean42 = jSONWriter36.isWriteTypeInfo((java.lang.Object) true, type41);
        jSONWriter27.popPath((java.lang.Object) boolean42);
        jSONWriter27.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter27.writeNameRaw(byteArray48);
        long long52 = jSONWriter27.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter53 = null;
        java.lang.String str55 = jSONWriter27.setPath(fieldWriter53, (java.lang.Object) (-1.0f));
        jSONWriter27.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        long[] longArray63 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter57.writeInt64(longArray63);
        com.alibaba.fastjson2.JSONObject jSONObject65 = null;
        jSONWriter57.write(jSONObject65);
        java.lang.Class class68 = null;
        boolean boolean70 = jSONWriter57.isWriteTypeInfo((java.lang.Object) false, class68, (long) (short) -1);
        jSONWriter57.startObject();
        java.math.BigDecimal bigDecimal72 = null;
        jSONWriter57.writeDecimal(bigDecimal72, (long) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj76 = null;
        boolean boolean77 = jSONWriter75.removeReference(obj76);
        jSONWriter75.writeNull();
        java.math.BigDecimal bigDecimal79 = null;
        jSONWriter75.writeDecimal(bigDecimal79, 1L);
        char[] charArray86 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter75.writeString(charArray86, (int) (byte) 100, (int) (short) 0);
        jSONWriter57.writeString(charArray86, (int) 'a', (int) (short) 1);
        jSONWriter27.writeString(charArray86);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter25.writeRaw(charArray86);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1056L + "'", long52 == 1056L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4,  , a, 4]");
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        char[] charArray16 = new char[] { '#', ' ', '#' };
        jSONWriter10.writeString(charArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter18.writeBinary(byteArray25);
        jSONWriter0.writeBinary(byteArray25);
        java.math.BigInteger bigInteger29 = null;
        jSONWriter0.writeBigInt(bigInteger29);
        jSONWriter0.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        long[] longArray36 = new long[] {};
        jSONWriter33.writeInt64(longArray36);
        java.util.Map map38 = null;
        jSONWriter33.write(map38);
        java.util.Map map40 = null;
        jSONWriter33.write(map40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray43 = new double[] {};
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter42.writeDouble(doubleArray43, decimalFormat44);
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter33.writeDouble(doubleArray43, decimalFormat46);
        boolean boolean48 = jSONWriter33.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        jSONWriter33.config(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        boolean boolean59 = jSONWriter58.hasFilter();
        java.time.OffsetDateTime offsetDateTime60 = null;
        jSONWriter58.writeOffsetDateTime(offsetDateTime60);
        java.time.Instant instant62 = null;
        jSONWriter58.writeInstant(instant62);
        java.lang.Class<?> wildcardClass64 = jSONWriter58.getClass();
        java.lang.String str65 = jSONWriter0.setPath("hi!", (java.lang.Object) jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj2 = null;
        boolean boolean3 = jSONWriter1.removeReference(obj2);
        long[] longArray4 = new long[] {};
        jSONWriter1.writeInt64(longArray4);
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter1.config(feature6, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13, feature14 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        jSONWriter1.config(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("$[0]", featureArray15);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter22 = null;
        context21.setLabelFilter(labelFilter22);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        java.lang.String str10 = path9.toString();
        java.lang.String str11 = path9.toString();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$.[100].hi\\![32]" + "'", str10, "$.[100].hi\\![32]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$.[100].hi\\![32]" + "'", str11, "$.[100].hi\\![32]");
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        jSONWriter7.startObject();
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter7.writeFloat(100.0f, decimalFormat25);
        jSONWriter7.writeInt8((byte) 10);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = new double[] {};
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter34.writeDouble(doubleArray35, decimalFormat36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = new double[] {};
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter38.writeDouble(doubleArray39, decimalFormat40);
        jSONWriter34.writeDouble(doubleArray39);
        boolean boolean43 = jSONWriter34.isUTF16();
        java.lang.Class<?> wildcardClass44 = jSONWriter34.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter45 = jSONWriter9.getObjectWriter((java.lang.Class) wildcardClass44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        boolean boolean53 = context52.isFormatyyyyMMddhhmmss19();
        boolean boolean55 = context52.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter56 = null;
        context52.setPropertyPreFilter(propertyPreFilter56);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter58 = context52.getLabelFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter59 = null;
        context52.setNameFilter(nameFilter59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(context52);
        boolean boolean62 = context52.isDateFormatMillis();
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context52);
        boolean boolean65 = context52.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66, feature67, feature68, feature69, feature70, feature71 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(featureArray72);
        boolean boolean75 = jSONWriter74.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        java.lang.String str78 = jSONWriter74.setPath((int) (short) 10, (java.lang.Object) feature77);
        boolean boolean79 = context52.isEnabled(feature77);
        boolean boolean80 = jSONWriter9.isEnabled(feature77);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objectWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(labelFilter58);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.startArray((-1));
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId12 = context10.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = context10.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = null;
        context10.setNameFilter(nameFilter14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context10.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        boolean boolean19 = context10.isEnabled(feature18);
        boolean boolean20 = jSONWriter0.isEnabled(feature18);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNull(afterFilter13);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        java.lang.Class class17 = null;
        jSONWriter15.checkAndWriteTypeName((java.lang.Object) (byte) 0, class17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        java.nio.charset.Charset charset27 = jSONWriter19.getCharset();
        jSONWriter19.writeSymbol((int) (byte) -1);
        int int30 = jSONWriter19.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        boolean boolean38 = context37.isFormatyyyyMMddhhmmss19();
        boolean boolean40 = context37.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter41 = null;
        context37.setPropertyPreFilter(propertyPreFilter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.of(context37);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray45 = new double[] {};
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter44.writeDouble(doubleArray45, decimalFormat46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray49 = new double[] {};
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter48.writeDouble(doubleArray49, decimalFormat50);
        jSONWriter44.writeDouble(doubleArray49);
        boolean boolean53 = jSONWriter44.isUTF16();
        java.lang.Class<?> wildcardClass54 = jSONWriter44.getClass();
        boolean boolean55 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter43, (java.lang.Class) wildcardClass54);
        boolean boolean57 = jSONWriter0.isWriteTypeInfo((java.lang.Object) (byte) 0, (java.lang.Class) wildcardClass54, (long) (byte) 10);
        boolean boolean58 = jSONWriter0.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        boolean boolean53 = jSONWriter45.isWriteTypeInfo((java.lang.Object) featureArray51);
        context28.config(featureArray51);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter55 = context28.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter56 = null;
        context28.setContextValueFilter(contextValueFilter56);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter58 = null;
        context28.setBeforeFilter(beforeFilter58);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(contextNameFilter55);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context6.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter19 = context6.getContextValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(propertyFilter15);
        org.junit.Assert.assertNull(valueFilter18);
        org.junit.Assert.assertNull(contextValueFilter19);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter13 = null;
        context6.setContextNameFilter(contextNameFilter13);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider15 = context6.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.provider;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        jSONWriter0.writeRaw((byte) 1);
        jSONWriter0.writeInt32(9);
        jSONWriter0.writeTypeName("$.hi\\!");
        java.time.LocalTime localTime20 = null;
        jSONWriter0.writeLocalTime(localTime20);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        long long4 = jSONWriter2.getFeatures((long) (short) 100);
        boolean boolean5 = jSONWriter2.jsonb;
        jSONWriter2.endArray();
        jSONWriter2.writeName("$");
        boolean boolean9 = jSONWriter2.isUTF16();
        jSONWriter2.writeBool(false);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeSymbol("");
        boolean boolean25 = jSONWriter15.isWriteNulls();
        boolean boolean26 = jSONWriter0.containsReference((java.lang.Object) boolean25);
        java.util.UUID uUID27 = null;
        jSONWriter0.writeUUID(uUID27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray35 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter29.writeInt64(longArray35);
        java.nio.charset.Charset charset37 = jSONWriter29.getCharset();
        boolean[] booleanArray38 = new boolean[] {};
        jSONWriter29.writeBool(booleanArray38);
        jSONWriter29.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        jSONWriter29.startArray((int) (byte) 0);
        jSONWriter29.endObject();
        jSONWriter29.writeSymbol(0);
        jSONWriter29.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Context context50 = jSONWriter29.context;
        float[] floatArray51 = new float[] {};
        jSONWriter29.writeFloat(floatArray51);
        jSONWriter0.writeFloat(floatArray51);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(context50);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[]");
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        jSONWriter1.writeDouble((double) (-2));
        boolean boolean21 = jSONWriter1.hasFilter(34359804928L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        int int11 = jSONWriter0.size();
        byte[] byteArray12 = jSONWriter0.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 73]");
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean10 = context8.isEnabled(0L);
        java.lang.String str11 = context8.getDateFormat();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter12 = context8.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(contextNameFilter12);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        boolean boolean15 = jSONWriter0.isUTF8();
        jSONWriter0.startArray(1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter0.writeDecimal(bigDecimal6, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter17 = null;
        context15.setLabelFilter(labelFilter17);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider19 = context15.provider;
        boolean boolean21 = context15.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean23 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) context15);
        java.lang.String str24 = context15.getDateFormat();
        boolean boolean26 = context15.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        boolean boolean36 = context35.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context35.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter38 = null;
        context35.setPropertyFilter(propertyFilter38);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter40 = context35.getBeforeFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter41 = context35.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        boolean boolean49 = context48.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter50 = null;
        context48.setBeforeFilter(beforeFilter50);
        java.time.ZoneId zoneId52 = context48.getZoneId();
        context35.setZoneId(zoneId52);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context35.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj56 = null;
        boolean boolean57 = jSONWriter55.removeReference(obj56);
        long[] longArray58 = new long[] {};
        jSONWriter55.writeInt64(longArray58);
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter55.config(feature60, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature63, feature64, feature65, feature66, feature67, feature68 };
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray69);
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray69);
        jSONWriter55.config(featureArray69);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray69);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider54, featureArray69);
        context15.config(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNull(afterFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(propertyFilter37);
        org.junit.Assert.assertNull(beforeFilter40);
        org.junit.Assert.assertNull(nameFilter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneId52);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context31);
        jSONWriter32.writeDateTime14((int) '4', 10, (int) (byte) 10, 100, (int) (short) 100, (int) (short) 0);
        jSONWriter32.writeInt8((byte) 100);
        jSONWriter32.writeSymbol("$.[100].hi\\!");
        java.time.LocalTime localTime44 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter32.writeLocalTime(localTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        context8.config(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        jSONWriter22.writeArrayNull();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        int int13 = jSONWriter1.level();
        java.util.UUID uUID14 = null;
        jSONWriter1.writeUUID(uUID14);
        jSONWriter1.writeInt16((short) (byte) 10);
        java.time.Instant instant18 = null;
        jSONWriter1.writeInstant(instant18);
        boolean boolean20 = jSONWriter1.utf16;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.NameFilter nameFilter43 = context28.getNameFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter44 = null;
        context28.setPropertyFilter(propertyFilter44);
        com.alibaba.fastjson2.filter.NameFilter nameFilter46 = null;
        context28.setNameFilter(nameFilter46);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = null;
        context28.setAfterFilter(afterFilter48);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter50 = null;
        context28.setLabelFilter(labelFilter50);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNull(nameFilter43);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        java.time.LocalDate localDate13 = null;
        jSONWriter0.writeLocalDate(localDate13);
        jSONWriter0.writeChar('#');
        jSONWriter0.writeBooleanNull();
        boolean boolean18 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray22 = new long[] {};
        jSONWriter19.writeInt64(longArray22);
        java.util.Map map24 = null;
        jSONWriter19.write(map24);
        jSONWriter19.close();
        long long28 = jSONWriter19.getFeatures((long) (short) 10);
        java.nio.charset.Charset charset29 = jSONWriter19.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        boolean boolean37 = context36.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context36.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider38);
        boolean boolean40 = context39.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context39);
        jSONWriter41.writeInt64((long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        jSONWriter44.writeNameRaw(byteArray46);
        java.nio.charset.Charset charset48 = jSONWriter44.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter44.config(feature49, true);
        jSONWriter44.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        jSONWriter53.writeNull();
        java.lang.reflect.Type type58 = null;
        boolean boolean59 = jSONWriter53.isWriteTypeInfo((java.lang.Object) true, type58);
        jSONWriter44.popPath((java.lang.Object) boolean59);
        jSONWriter44.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj64 = null;
        boolean boolean65 = jSONWriter63.removeReference(obj64);
        long[] longArray69 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter63.writeInt64(longArray69);
        com.alibaba.fastjson2.JSONObject jSONObject71 = null;
        jSONWriter63.write(jSONObject71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj74 = null;
        boolean boolean75 = jSONWriter73.removeReference(obj74);
        char[] charArray79 = new char[] { '#', ' ', '#' };
        jSONWriter73.writeString(charArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj82 = null;
        boolean boolean83 = jSONWriter81.removeReference(obj82);
        jSONWriter81.writeNull();
        boolean boolean85 = jSONWriter73.isWriteTypeInfo((java.lang.Object) jSONWriter81);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        jSONWriter86.writeNameRaw(byteArray88);
        jSONWriter81.writeBinary(byteArray88);
        jSONWriter63.writeBinary(byteArray88);
        jSONWriter44.writeHex(byteArray88);
        jSONWriter41.writeRaw(byteArray88);
        jSONWriter19.writeBinary(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeBase64(byteArray88);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[100]");
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        java.time.format.DateTimeFormatter dateTimeFormatter9 = context6.getDateFormatter();
        context6.setDateFormat("$[0]");
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray19 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter13.writeInt64(longArray19);
        java.nio.charset.Charset charset21 = jSONWriter13.getCharset();
        jSONWriter13.writeSymbol((int) (byte) -1);
        int int24 = jSONWriter13.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        boolean boolean32 = context31.isFormatyyyyMMddhhmmss19();
        boolean boolean34 = context31.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter35 = null;
        context31.setPropertyPreFilter(propertyPreFilter35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(context31);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = new double[] {};
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter38.writeDouble(doubleArray39, decimalFormat40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray43 = new double[] {};
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter42.writeDouble(doubleArray43, decimalFormat44);
        jSONWriter38.writeDouble(doubleArray43);
        boolean boolean47 = jSONWriter38.isUTF16();
        java.lang.Class<?> wildcardClass48 = jSONWriter38.getClass();
        boolean boolean49 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter37, (java.lang.Class) wildcardClass48);
        jSONWriter37.writeName((long) 4);
        boolean boolean53 = jSONWriter37.hasFilter((long) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        boolean boolean61 = context60.isFormatyyyyMMddhhmmss19();
        boolean boolean63 = context60.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter64 = null;
        context60.setPropertyPreFilter(propertyPreFilter64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(context60);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider67 = context60.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        long[] longArray71 = new long[] {};
        jSONWriter68.writeInt64(longArray71);
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter68.config(feature73, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76, feature77, feature78, feature79, feature80, feature81 };
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray82);
        jSONWriter68.config(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter86 = com.alibaba.fastjson2.JSONWriter.of(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider67, featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context88 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray82);
        jSONWriter37.config(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12, featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray82);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(objectWriterProvider67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(jSONWriter86);
        org.junit.Assert.assertNotNull(jSONWriter91);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        java.time.LocalTime localTime43 = null;
        jSONWriter23.writeLocalTime(localTime43);
        jSONWriter23.writeDateTime19((int) '#', (-1), 10, (int) (short) 1, 100, (int) 'a');
        java.util.Map map52 = null;
        jSONWriter23.write(map52);
        long long54 = jSONWriter23.getFeatures();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        jSONWriter0.writeRaw((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter17.writeBigInt(bigInteger32, (long) (short) -1);
        boolean boolean35 = jSONWriter0.removeReference((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray43);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context45.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(context45);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable49);
        jSONWriter50.writeInt8((byte) 100);
        java.lang.String str53 = jSONWriter0.setPath("$", (java.lang.Object) jSONWriter50);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter50.isRefDetect(obj54);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter50.writeFloat((float) 1L, decimalFormat57);
        java.math.BigDecimal bigDecimal59 = null;
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter50.writeDecimal(bigDecimal59, (long) (byte) 0, decimalFormat61);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        boolean boolean10 = context8.isDateFormatMillis();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter11 = null;
        context8.setPropertyPreFilter(propertyPreFilter11);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context8.getBeforeFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable14);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter15.writeName(0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter55.writeNameRaw(byteArray57);
        java.nio.charset.Charset charset59 = jSONWriter55.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter55.config(feature60, true);
        jSONWriter55.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj65 = null;
        boolean boolean66 = jSONWriter64.removeReference(obj65);
        jSONWriter64.writeNull();
        java.lang.reflect.Type type69 = null;
        boolean boolean70 = jSONWriter64.isWriteTypeInfo((java.lang.Object) true, type69);
        jSONWriter55.popPath((java.lang.Object) boolean70);
        jSONWriter55.writeInt8((byte) 10);
        boolean boolean74 = jSONWriter55.isIgnoreNoneSerializable();
        jSONWriter55.writeBool(true);
        java.lang.String str77 = jSONWriter0.setPath("$", (java.lang.Object) jSONWriter55);
        jSONWriter55.startArray(6);
        jSONWriter55.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        jSONWriter0.endObject();
        java.math.BigDecimal bigDecimal33 = null;
        jSONWriter0.writeDecimal(bigDecimal33);
        boolean boolean35 = jSONWriter0.jsonb;
        boolean boolean36 = jSONWriter0.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        int int61 = jSONWriter10.level();
        jSONWriter10.startObject();
        java.math.BigDecimal bigDecimal63 = null;
        jSONWriter10.writeDecimal(bigDecimal63, 34359804928L);
        boolean boolean66 = jSONWriter10.useSingleQuote;
        java.math.BigDecimal bigDecimal67 = null;
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter10.writeDecimal(bigDecimal67, (long) (-1), decimalFormat69);
        java.math.BigDecimal bigDecimal71 = null;
        jSONWriter10.writeDecimal(bigDecimal71, (long) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter74.writeBooleanNull();
        byte[] byteArray76 = jSONWriter74.getBytes();
        jSONWriter10.writeNameRaw(byteArray76, (long) 2);
        com.alibaba.fastjson2.SymbolTable symbolTable79 = jSONWriter10.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-81]");
        org.junit.Assert.assertNull(symbolTable79);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader4);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        boolean boolean35 = jSONWriter9.hasFilter();
        jSONWriter9.startObject();
        boolean boolean37 = jSONWriter9.isRefDetect();
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter9.writeDecimal(bigDecimal38, 32L);
        java.math.BigDecimal bigDecimal41 = null;
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter9.writeDecimal(bigDecimal41, (long) (byte) -1, decimalFormat43);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeSymbol((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        java.io.OutputStream outputStream10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        boolean boolean22 = jSONWriter11.removeReference((java.lang.Object) jSONWriter14);
        java.nio.charset.Charset charset23 = jSONWriter11.getCharset();
        int int24 = jSONWriter8.flushTo(outputStream10, charset23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter25.writeEnum((java.lang.Enum) feature27);
        boolean boolean29 = jSONWriter25.hasFilter();
        jSONWriter25.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray35 = new long[] {};
        jSONWriter32.writeInt64(longArray35);
        java.util.Map map37 = null;
        jSONWriter32.write(map37);
        java.util.Map map39 = null;
        jSONWriter32.write(map39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter32.writeDouble(doubleArray42, decimalFormat45);
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter25.writeDouble(doubleArray42, decimalFormat47);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter8.writeDouble(doubleArray42, decimalFormat49);
        boolean boolean51 = jSONWriter8.useSingleQuote;
        boolean boolean52 = jSONWriter8.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        long[] longArray56 = new long[] {};
        jSONWriter53.writeInt64(longArray56);
        java.util.Map map58 = null;
        jSONWriter53.write(map58);
        java.util.Map map60 = null;
        jSONWriter53.write(map60);
        boolean boolean62 = jSONWriter53.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        jSONWriter63.writeNameRaw(byteArray65);
        java.nio.charset.Charset charset67 = jSONWriter63.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter63.config(feature68, true);
        jSONWriter63.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj73 = null;
        boolean boolean74 = jSONWriter72.removeReference(obj73);
        jSONWriter72.writeNull();
        java.lang.reflect.Type type77 = null;
        boolean boolean78 = jSONWriter72.isWriteTypeInfo((java.lang.Object) true, type77);
        jSONWriter63.popPath((java.lang.Object) boolean78);
        jSONWriter63.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        jSONWriter82.writeNameRaw(byteArray84);
        jSONWriter63.writeNameRaw(byteArray84);
        long long88 = jSONWriter63.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter89 = null;
        java.lang.String str91 = jSONWriter63.setPath(fieldWriter89, (java.lang.Object) (-1.0f));
        long long92 = jSONWriter63.getFeatures();
        jSONWriter53.writeAny((java.lang.Object) long92);
        java.lang.Class<?> wildcardClass94 = jSONWriter53.getClass();
        boolean boolean95 = jSONWriter8.isRefDetect((java.lang.Object) wildcardClass94);
        int int96 = jSONWriter8.size();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1056L + "'", long88 == 1056L);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1024L + "'", long92 == 1024L);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 5 + "'", int96 == 5);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeSymbol("");
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter15.writeDecimal(bigDecimal25, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        jSONWriter28.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        jSONWriter32.writeNameRaw(byteArray34);
        java.nio.charset.Charset charset36 = jSONWriter32.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter32.config(feature37, true);
        jSONWriter32.writeName("");
        boolean boolean42 = jSONWriter32.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        char[] charArray49 = new char[] { '#', ' ', '#' };
        jSONWriter43.writeString(charArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        jSONWriter51.writeNull();
        boolean boolean55 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter51);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        jSONWriter51.writeBinary(byteArray58);
        boolean boolean62 = jSONWriter32.writeTypeName(byteArray58, (long) (byte) 100);
        jSONWriter28.writeRaw(byteArray58);
        jSONWriter15.writeNameRaw(byteArray58, 1024L);
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter15.writeDouble((double) (-1.0f), decimalFormat67);
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature69, feature70, feature71, feature72, feature73 };
        com.alibaba.fastjson2.JSONWriter.Context context75 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray74);
        jSONWriter15.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13, featureArray74);
        java.time.ZoneId zoneId79 = context78.getZoneId();
        boolean boolean80 = context78.isDateFormatMillis();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider81 = context78.getProvider();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(zoneId79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider81);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        java.time.LocalTime localTime11 = null;
        jSONWriter0.writeLocalTime(localTime11);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        java.nio.charset.Charset charset17 = jSONWriter13.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter13.config(feature18, true);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray29 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter23.writeInt64(longArray29);
        java.nio.charset.Charset charset31 = jSONWriter23.getCharset();
        java.lang.String str32 = jSONWriter13.setPath((int) (short) -1, (java.lang.Object) charset31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        jSONWriter13.writeNameRaw(byteArray35);
        jSONWriter0.writeStringLatin1(byteArray35);
        jSONWriter0.endObject();
        java.time.Instant instant40 = null;
        jSONWriter0.writeInstant(instant40);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray35 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter29.writeInt64(longArray35);
        java.nio.charset.Charset charset37 = jSONWriter29.getCharset();
        boolean[] booleanArray38 = new boolean[] {};
        jSONWriter29.writeBool(booleanArray38);
        jSONWriter29.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        char[] charArray43 = null;
        jSONWriter29.writeString(charArray43, (int) (short) 1, (int) '#');
        boolean boolean47 = jSONWriter29.isUTF8();
        boolean boolean48 = jSONWriter28.removeReference((java.lang.Object) jSONWriter29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter29.writeDateYYYMMDD10(16, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startArray((int) (byte) 0);
        jSONWriter0.endObject();
        jSONWriter0.writeSymbol(0);
        jSONWriter0.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter22.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter22.writeEnum((java.lang.Enum) feature24);
        boolean boolean26 = jSONWriter22.hasFilter();
        jSONWriter22.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray32 = new long[] {};
        jSONWriter29.writeInt64(longArray32);
        java.util.Map map34 = null;
        jSONWriter29.write(map34);
        java.util.Map map36 = null;
        jSONWriter29.write(map36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = new double[] {};
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter38.writeDouble(doubleArray39, decimalFormat40);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter29.writeDouble(doubleArray39, decimalFormat42);
        java.text.DecimalFormat decimalFormat44 = null;
        jSONWriter22.writeDouble(doubleArray39, decimalFormat44);
        java.lang.String str46 = jSONWriter0.setPath((int) 'a', (java.lang.Object) jSONWriter22);
        jSONWriter22.writeInt64((long) 10);
        jSONWriter22.writeDateTime19(6, (int) (byte) 10, (int) (byte) 10, 10, 3, 6);
        com.alibaba.fastjson2.JSONWriter.Context context56 = jSONWriter22.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(context56);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        java.nio.charset.Charset charset16 = jSONWriter8.getCharset();
        boolean[] booleanArray17 = new boolean[] {};
        jSONWriter8.writeBool(booleanArray17);
        jSONWriter8.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        char[] charArray22 = null;
        jSONWriter8.writeString(charArray22, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray31 = new double[] {};
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter30.writeDouble(doubleArray31, decimalFormat32);
        jSONWriter26.writeDouble(doubleArray31);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter8.writeDouble(doubleArray31, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        java.time.LocalDate localDate41 = null;
        jSONWriter37.writeLocalDate(localDate41);
        java.time.LocalTime localTime43 = null;
        jSONWriter37.writeLocalTime(localTime43);
        jSONWriter37.close();
        boolean[] booleanArray52 = new boolean[] { false, false, false, true, false, false };
        jSONWriter37.writeBool(booleanArray52);
        jSONWriter8.writeBool(booleanArray52);
        java.time.ZonedDateTime zonedDateTime55 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime55);
        jSONWriter0.startArray((java.lang.Object) zonedDateTime55, 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter59.removeReference(obj60);
        long[] longArray62 = new long[] {};
        jSONWriter59.writeInt64(longArray62);
        java.util.Map map64 = null;
        jSONWriter59.write(map64);
        java.util.Map map66 = null;
        jSONWriter59.write(map66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray69 = new double[] {};
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter68.writeDouble(doubleArray69, decimalFormat70);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter59.writeDouble(doubleArray69, decimalFormat72);
        boolean boolean74 = jSONWriter59.useSingleQuote;
        jSONWriter59.writeNumberNull();
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter59);
        java.nio.charset.Charset charset77 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray78 = jSONWriter59.getBytes(charset77);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.jsonb;
        boolean boolean10 = jSONWriter0.isUTF16();
        boolean boolean11 = jSONWriter0.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        jSONWriter0.popPath((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal;
        boolean boolean15 = jSONWriter0.isEnabled(feature14);
        jSONWriter0.endObject();
        jSONWriter0.close();
        jSONWriter0.writeTypeName("$[0].hi\\!.$");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        boolean boolean13 = context6.isDateFormatMillis();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter14 = null;
        context6.setPropertyPreFilter(propertyPreFilter14);
        boolean boolean16 = context6.isDateFormatISO8601();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        boolean boolean1 = jSONWriter0.utf16;
        jSONWriter0.writeInt16((short) (byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context8.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        boolean boolean26 = jSONWriter14.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        boolean boolean36 = jSONWriter14.removeReference((java.lang.Object) featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider12, featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context48.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider49);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52, feature53, feature54, feature55, feature56 };
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("$.[100][4]", featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider49, featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider12, featureArray57);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3, feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        java.lang.Class class12 = null;
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) (byte) 0, class12);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter10.writeBigInt(bigInteger14);
        java.lang.reflect.Type type16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, type16);
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter0.writeFloat((float) 34359804938L, decimalFormat19);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = context6.getLabelFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter13 = null;
        context6.setContextNameFilter(contextNameFilter13);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter15 = context6.getPropertyPreFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.getProvider();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter12);
        org.junit.Assert.assertNull(propertyPreFilter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter4 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        boolean boolean8 = jSONWriter7.utf16;
        java.lang.String str9 = jSONWriter0.setPath(fieldWriter4, (java.lang.Object) boolean8);
        jSONWriter0.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context10);
        jSONWriter11.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = new double[] {};
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter14.writeDouble(doubleArray15, decimalFormat16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        jSONWriter14.writeDouble(doubleArray19);
        boolean boolean23 = jSONWriter14.isUTF16();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        long long41 = jSONWriter39.getFeatures((long) (short) 100);
        boolean boolean42 = jSONWriter39.jsonb;
        java.lang.String str43 = jSONWriter35.setPath(fieldWriter36, (java.lang.Object) jSONWriter39);
        java.lang.Class<?> wildcardClass44 = jSONWriter39.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter45 = jSONWriter11.getObjectWriter((java.lang.reflect.Type) wildcardClass24, (java.lang.Class) wildcardClass44);
        java.time.OffsetDateTime offsetDateTime46 = null;
        jSONWriter11.writeOffsetDateTime(offsetDateTime46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        jSONWriter11.config(featureArray54);
        jSONWriter11.writeBooleanNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objectWriter45);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter9 = null;
        context6.setPropertyFilter(propertyFilter9);
        boolean boolean11 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter12 = null;
        context6.setContextNameFilter(contextNameFilter12);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        context15.setDateFormat("hi!");
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = context15.getLabelFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNull(labelFilter18);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter1.writeDecimal(bigDecimal18, 1L);
        com.alibaba.fastjson2.JSONObject jSONObject21 = null;
        jSONWriter1.write(jSONObject21);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        long[] longArray9 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter3.writeInt64(longArray9);
        java.nio.charset.Charset charset11 = jSONWriter3.getCharset();
        boolean boolean12 = path0.equals((java.lang.Object) charset11);
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path0, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path16 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$");
        java.lang.String str17 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path19 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$");
        com.alibaba.fastjson2.JSONWriter.Path path21 = new com.alibaba.fastjson2.JSONWriter.Path(path19, "$.[100]");
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        jSONWriter31.writeNull();
        java.lang.reflect.Type type36 = null;
        boolean boolean37 = jSONWriter31.isWriteTypeInfo((java.lang.Object) true, type36);
        jSONWriter22.popPath((java.lang.Object) boolean37);
        java.nio.charset.Charset charset39 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter40.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter40.writeEnum((java.lang.Enum) feature42);
        boolean boolean44 = jSONWriter40.hasFilter();
        jSONWriter40.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable47 = jSONWriter40.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50, feature51, feature52, feature53, feature54 };
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter49.isWriteMapTypeInfo((java.lang.Object) jSONWriter57, class58, 0L);
        java.lang.String[] strArray62 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        jSONWriter49.writeString((java.util.List<java.lang.String>) strList63);
        jSONWriter40.write((java.util.List) strList63);
        jSONWriter40.writeNull();
        boolean boolean69 = jSONWriter22.isWriteTypeInfo((java.lang.Object) jSONWriter40, (long) 'a');
        boolean boolean70 = path19.equals((java.lang.Object) boolean69);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$" + "'", str17, "$");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(symbolTable47);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        long[] longArray5 = new long[] {};
        jSONWriter2.writeInt64(longArray5);
        long long8 = jSONWriter2.getFeatures((long) '4');
        jSONWriter2.writeInt64((long) 3);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.lang.reflect.Type type5 = null;
        boolean boolean6 = jSONWriter0.isWriteTypeInfo((java.lang.Object) true, type5);
        boolean boolean7 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        jSONWriter8.writeNameRaw(byteArray10);
        java.nio.charset.Charset charset12 = jSONWriter8.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter8.config(feature13, true);
        jSONWriter8.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter8.writeBigInt(bigInteger18, (long) (short) 0);
        java.nio.charset.Charset charset21 = jSONWriter8.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj23 = null;
        boolean boolean24 = jSONWriter22.removeReference(obj23);
        long[] longArray28 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter22.writeInt64(longArray28);
        java.nio.charset.Charset charset30 = jSONWriter22.getCharset();
        boolean[] booleanArray31 = new boolean[] {};
        jSONWriter22.writeBool(booleanArray31);
        jSONWriter22.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj36 = null;
        boolean boolean37 = jSONWriter35.removeReference(obj36);
        long[] longArray38 = new long[] {};
        jSONWriter35.writeInt64(longArray38);
        java.util.Map map40 = null;
        jSONWriter35.write(map40);
        java.util.Map map42 = null;
        jSONWriter35.write(map42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray45 = new double[] {};
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter44.writeDouble(doubleArray45, decimalFormat46);
        java.text.DecimalFormat decimalFormat48 = null;
        jSONWriter35.writeDouble(doubleArray45, decimalFormat48);
        boolean boolean50 = jSONWriter35.useSingleQuote;
        java.lang.Class class51 = null;
        boolean boolean53 = jSONWriter22.isWriteMapTypeInfo((java.lang.Object) jSONWriter35, class51, (long) (short) -1);
        jSONWriter22.endObject();
        jSONWriter22.writeBooleanNull();
        jSONWriter22.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter58.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter58.writeEnum((java.lang.Enum) feature60);
        boolean boolean62 = jSONWriter58.hasFilter();
        jSONWriter58.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable65 = jSONWriter58.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable66 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable66);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray73);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter67.isWriteMapTypeInfo((java.lang.Object) jSONWriter75, class76, 0L);
        java.lang.String[] strArray80 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        jSONWriter67.writeString((java.util.List<java.lang.String>) strList81);
        jSONWriter58.write((java.util.List) strList81);
        jSONWriter22.write((java.util.List) strList81);
        jSONWriter8.write((java.util.List) strList81);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList81);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(symbolTable65);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        jSONWriter10.writeFloat((float) 0);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        boolean boolean43 = jSONWriter41.hasFilter((long) (byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter7.writeBooleanNull();
        long[] longArray13 = new long[] { (byte) 10, (short) 100, (short) 1, (short) 0 };
        jSONWriter7.writeInt64(longArray13);
        jSONWriter7.endArray();
        jSONWriter7.writeChar('#');
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter7.writeDecimal(bigDecimal18, 1L);
        jSONWriter7.writeMillis((long) (-2));
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10, 100, 1, 0]");
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.jsonb;
        boolean boolean10 = jSONWriter0.isUTF16();
        boolean boolean11 = jSONWriter0.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        jSONWriter0.popPath((java.lang.Object) feature12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal;
        boolean boolean15 = jSONWriter0.isEnabled(feature14);
        java.math.BigInteger bigInteger16 = null;
        jSONWriter0.writeBigInt(bigInteger16, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter.Context context19 = jSONWriter0.context;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingOrdinal));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(context19);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        boolean boolean13 = context10.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString;
        context10.config(feature14, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        boolean boolean24 = context23.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context23.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        long[] longArray34 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter28.writeInt64(longArray34);
        java.nio.charset.Charset charset36 = jSONWriter28.getCharset();
        boolean[] booleanArray37 = new boolean[] {};
        jSONWriter28.writeBool(booleanArray37);
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        boolean boolean50 = jSONWriter28.removeReference((java.lang.Object) featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        context51.config(feature52, true);
        java.lang.Class<?> wildcardClass55 = context51.getClass();
        boolean boolean57 = jSONWriter3.isWriteTypeInfo((java.lang.Object) feature14, (java.lang.reflect.Type) wildcardClass55, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringKeyAsString));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        boolean boolean3 = jSONWriter0.isWriteNulls();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) 4L, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        jSONWriter10.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context19);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        jSONWriter25.writeNameRaw(byteArray27);
        java.nio.charset.Charset charset29 = jSONWriter25.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter25.config(feature30, true);
        jSONWriter25.writeName("");
        java.lang.reflect.Type type35 = null;
        boolean boolean36 = jSONWriter24.isWriteTypeInfo((java.lang.Object) "", type35);
        com.alibaba.fastjson2.JSONObject jSONObject37 = null;
        jSONWriter24.write(jSONObject37);
        int int39 = jSONWriter24.size();
        byte[] byteArray40 = jSONWriter24.getBytes();
        jSONWriter10.writeRaw(byteArray40);
        java.time.LocalDate localDate42 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeLocalDate(localDate42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[110, 117, 108, 108]");
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        char[] charArray23 = new char[] { '#', ' ', '#' };
        jSONWriter17.writeString(charArray23);
        boolean boolean25 = jSONWriter14.removeReference((java.lang.Object) jSONWriter17);
        java.lang.String str26 = jSONWriter0.setPath((int) '#', (java.lang.Object) jSONWriter14);
        boolean boolean27 = jSONWriter0.isRefDetect();
        boolean boolean28 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeSymbol("$.[100].hi\\!");
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36 };
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        jSONWriter0.config(featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter43);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context10.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11);
        long long13 = context12.getFeatures();
        long long14 = context12.getFeatures();
        long long15 = context12.getFeatures();
        java.time.ZoneId zoneId16 = context12.getZoneId();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(zoneId16);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter7.writeDecimal(bigDecimal8);
        java.time.OffsetDateTime offsetDateTime10 = null;
        jSONWriter7.writeOffsetDateTime(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean20 = jSONWriter0.hasFilter((long) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.startObject();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter0.writeDecimal(bigDecimal15, (long) 100);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter0.writeDecimal(bigDecimal18);
        boolean boolean21 = jSONWriter0.isEnabled((long) '4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.math.BigInteger bigInteger6 = null;
        jSONWriter4.writeBigInt(bigInteger6, (long) 15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, 6);
        java.lang.String str7 = path2.toString();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$." + "'", str7, "$.");
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        boolean boolean31 = context30.isFormatyyyyMMddhhmmss19();
        boolean boolean33 = context30.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter34 = context30.getValueFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        boolean boolean42 = context41.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId43 = context41.getZoneId();
        context30.setZoneId(zoneId43);
        boolean boolean45 = context30.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        jSONWriter55.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        long[] longArray64 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter58.writeInt64(longArray64);
        java.nio.charset.Charset charset66 = jSONWriter58.getCharset();
        jSONWriter58.writeSymbol((int) (byte) -1);
        int int69 = jSONWriter58.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74 };
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray75);
        boolean boolean77 = context76.isFormatyyyyMMddhhmmss19();
        boolean boolean79 = context76.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter80 = null;
        context76.setPropertyPreFilter(propertyPreFilter80);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.of(context76);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray84 = new double[] {};
        java.text.DecimalFormat decimalFormat85 = null;
        jSONWriter83.writeDouble(doubleArray84, decimalFormat85);
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray88 = new double[] {};
        java.text.DecimalFormat decimalFormat89 = null;
        jSONWriter87.writeDouble(doubleArray88, decimalFormat89);
        jSONWriter83.writeDouble(doubleArray88);
        boolean boolean92 = jSONWriter83.isUTF16();
        java.lang.Class<?> wildcardClass93 = jSONWriter83.getClass();
        boolean boolean94 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter82, (java.lang.Class) wildcardClass93);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter95 = jSONWriter55.getObjectWriter((java.lang.Class) wildcardClass93);
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) boolean45, (java.lang.Class) wildcardClass93);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw("hi!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(valueFilter34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(zoneId43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(jSONWriter87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objectWriter95);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId12 = context10.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = context10.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter14 = context10.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context10.config(feature15, false);
        java.lang.String str18 = context10.getDateFormat();
        java.lang.Class class19 = null;
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) context10, class19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context10);
        boolean boolean22 = jSONWriter21.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNull(afterFilter13);
        org.junit.Assert.assertNull(afterFilter14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context8.getBeforeFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = context8.getNameFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean22 = context21.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter23 = null;
        context21.setBeforeFilter(beforeFilter23);
        java.time.ZoneId zoneId25 = context21.getZoneId();
        context8.setZoneId(zoneId25);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter27 = context8.getValueFilter();
        boolean boolean28 = context8.isDateFormatMillis();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter29 = null;
        context8.setContextValueFilter(contextValueFilter29);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertNull(nameFilter14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNull(valueFilter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = null;
        context31.setContextNameFilter(contextNameFilter32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context31, symbolTable34);
        boolean boolean36 = jSONWriter35.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Context context37 = jSONWriter35.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(context37);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject14 = null;
        jSONWriter0.write(jSONObject14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        boolean boolean24 = context23.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId25 = context23.getZoneId();
        boolean boolean27 = context23.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        boolean boolean35 = context34.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId36 = context34.getZoneId();
        context23.setZoneId(zoneId36);
        boolean boolean39 = context23.isEnabled((long) (short) 10);
        boolean boolean40 = jSONWriter16.removeReference((java.lang.Object) boolean39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray49 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter43.writeInt64(longArray49);
        jSONWriter42.writeInt64(longArray49);
        jSONWriter42.writeTypeName("");
        int int54 = jSONWriter42.level();
        jSONWriter16.writeAny((java.lang.Object) int54);
        jSONWriter16.writeDateTimeISO8601((int) (short) 100, 100, (int) (byte) 0, (int) (short) -1, (int) (short) 10, (int) (byte) 1, (int) (byte) 1, (int) (byte) 0, false);
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        com.alibaba.fastjson2.JSONWriter.Context context69 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray67);
        com.alibaba.fastjson2.SymbolTable symbolTable71 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable71);
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature73, feature74, feature75, feature76, feature77 };
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray78);
        java.lang.Class class81 = null;
        boolean boolean83 = jSONWriter72.isWriteMapTypeInfo((java.lang.Object) jSONWriter80, class81, 0L);
        java.lang.String[] strArray85 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        jSONWriter72.writeString((java.util.List<java.lang.String>) strList86);
        com.alibaba.fastjson2.JSONWriter jSONWriter89 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray90 = new double[] {};
        java.text.DecimalFormat decimalFormat91 = null;
        jSONWriter89.writeDouble(doubleArray90, decimalFormat91);
        java.text.DecimalFormat decimalFormat93 = null;
        jSONWriter72.writeDouble(doubleArray90, decimalFormat93);
        java.text.DecimalFormat decimalFormat95 = null;
        jSONWriter70.writeDouble(doubleArray90, decimalFormat95);
        jSONWriter16.writeDouble(doubleArray90);
        jSONWriter0.writeDouble(doubleArray90);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(jSONWriter89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean52 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) feature51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        jSONWriter53.writeNameRaw(byteArray55);
        java.nio.charset.Charset charset57 = jSONWriter53.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter53.config(feature58, true);
        jSONWriter53.writeSymbol("");
        jSONWriter53.startObject();
        boolean boolean64 = jSONWriter53.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72, feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray74);
        java.lang.Class class77 = null;
        jSONWriter75.checkAndWriteTypeName((java.lang.Object) (byte) 0, class77);
        java.math.BigInteger bigInteger79 = null;
        jSONWriter75.writeBigInt(bigInteger79);
        java.lang.reflect.Type type81 = null;
        boolean boolean82 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter75, type81);
        short[] shortArray84 = new short[] { (byte) 0 };
        jSONWriter75.writeInt16(shortArray84);
        jSONWriter53.writeInt16(shortArray84);
        jSONWriter0.writeInt16(shortArray84);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateYYYMMDD10((int) '#', 5, 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[0]");
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable5);
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature7, feature8, feature9, feature10, feature11 };
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        java.lang.Class class15 = null;
        boolean boolean17 = jSONWriter6.isWriteMapTypeInfo((java.lang.Object) jSONWriter14, class15, 0L);
        java.lang.String[] strArray19 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        jSONWriter6.writeString((java.util.List<java.lang.String>) strList20);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray24 = new double[] {};
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter23.writeDouble(doubleArray24, decimalFormat25);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter6.writeDouble(doubleArray24, decimalFormat27);
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter4.writeDouble(doubleArray24, decimalFormat29);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray38 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter32.writeInt64(longArray38);
        java.nio.charset.Charset charset40 = jSONWriter32.getCharset();
        boolean[] booleanArray41 = new boolean[] {};
        jSONWriter32.writeBool(booleanArray41);
        jSONWriter32.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter32);
        char[] charArray46 = null;
        jSONWriter32.writeString(charArray46, (int) (short) 1, (int) '#');
        jSONWriter32.writeDateTime19((int) '4', 6, (int) '4', (int) (byte) 100, (int) (byte) 100, (int) (byte) 100);
        java.lang.String str57 = jSONWriter4.setPath(fieldWriter31, (java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter9.writeReference("$[0]");
        jSONWriter9.writeDateTimeISO8601((-1), (int) (short) -1, (int) (byte) 0, (int) (byte) 10, (int) 'a', (int) 'a', 4, 5, true);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        boolean boolean12 = jSONWriter10.utf8;
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter10.write(jSONObject13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        char[] charArray21 = new char[] { '#', ' ', '#' };
        jSONWriter15.writeString(charArray21);
        java.math.BigDecimal bigDecimal23 = null;
        java.text.DecimalFormat decimalFormat25 = null;
        jSONWriter15.writeDecimal(bigDecimal23, 100L, decimalFormat25);
        jSONWriter15.writeInt16((short) (byte) 10);
        java.time.OffsetDateTime offsetDateTime29 = null;
        jSONWriter15.writeOffsetDateTime(offsetDateTime29);
        boolean boolean31 = jSONWriter10.containsReference((java.lang.Object) jSONWriter15);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray35 = new long[] {};
        jSONWriter32.writeInt64(longArray35);
        java.util.Map map37 = null;
        jSONWriter32.write(map37);
        java.util.Map map39 = null;
        jSONWriter32.write(map39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter32.writeDouble(doubleArray42, decimalFormat45);
        boolean boolean47 = jSONWriter32.useSingleQuote;
        java.lang.Class class49 = null;
        boolean boolean50 = jSONWriter32.isWriteTypeInfo((java.lang.Object) false, class49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        long[] longArray57 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter51.writeInt64(longArray57);
        java.nio.charset.Charset charset59 = jSONWriter51.getCharset();
        boolean[] booleanArray60 = new boolean[] {};
        jSONWriter51.writeBool(booleanArray60);
        boolean boolean63 = jSONWriter51.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64, feature65, feature66, feature67, feature68, feature69 };
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.of(featureArray70);
        boolean boolean73 = jSONWriter51.removeReference((java.lang.Object) featureArray70);
        byte[] byteArray74 = jSONWriter51.getBytes();
        char[] charArray80 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter51.writeString(charArray80, (int) (short) 10, (int) (short) 0, true);
        jSONWriter32.writeString(charArray80);
        jSONWriter15.writeString(charArray80, (int) (short) 10, (-2), false);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[ ,  , a, #, #]");
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        java.lang.String str45 = context28.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context28.setContextValueFilter(contextValueFilter46);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = null;
        context28.setAfterFilter(afterFilter48);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter50 = null;
        context28.setValueFilter(valueFilter50);
        context28.setDateFormat("$.");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj2 = null;
        boolean boolean3 = jSONWriter1.removeReference(obj2);
        long[] longArray7 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter1.writeInt64(longArray7);
        java.nio.charset.Charset charset9 = jSONWriter1.getCharset();
        boolean[] booleanArray10 = new boolean[] {};
        jSONWriter1.writeBool(booleanArray10);
        jSONWriter1.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter1);
        char[] charArray15 = null;
        jSONWriter1.writeString(charArray15, (int) (short) 1, (int) '#');
        boolean boolean19 = jSONWriter1.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray26);
        jSONWriter1.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        boolean boolean32 = context31.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = null;
        context6.setLabelFilter(labelFilter12);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter14 = context6.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter15 = null;
        context6.setContextValueFilter(contextValueFilter15);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray22);
        boolean boolean24 = context23.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context23.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        long[] longArray34 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter28.writeInt64(longArray34);
        java.nio.charset.Charset charset36 = jSONWriter28.getCharset();
        boolean[] booleanArray37 = new boolean[] {};
        jSONWriter28.writeBool(booleanArray37);
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        boolean boolean50 = jSONWriter28.removeReference((java.lang.Object) featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider25, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        context51.config(feature52, true);
        context6.config(feature52, false);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter57 = null;
        context6.setLabelFilter(labelFilter57);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(propertyPreFilter14);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path13 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path15 = new com.alibaba.fastjson2.JSONWriter.Path(path13, 0);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter0.isWriteTypeInfo((java.lang.Object) path13, class16, (long) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Path path20 = new com.alibaba.fastjson2.JSONWriter.Path(path13, "hi!");
        java.lang.String str21 = path20.toString();
        com.alibaba.fastjson2.JSONWriter.Path path22 = path20.parent;
        com.alibaba.fastjson2.JSONWriter.Path path23 = path22.parent;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$.hi\\!" + "'", str21, "$.hi\\!");
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNull(path23);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        java.time.ZoneId zoneId11 = context10.getZoneId();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(zoneId11);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        java.time.format.DateTimeFormatter dateTimeFormatter4 = context3.getDateFormatter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter5 = context3.getBeforeFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter6 = null;
        context3.setLabelFilter(labelFilter6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(context3);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(beforeFilter5);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        jSONWriter9.writeDateYYYMMDD8((int) (byte) 0, (int) (byte) 1, (int) (short) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray45 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter39.writeInt64(longArray45);
        java.nio.charset.Charset charset47 = jSONWriter39.getCharset();
        boolean[] booleanArray48 = new boolean[] {};
        jSONWriter39.writeBool(booleanArray48);
        boolean boolean51 = jSONWriter39.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52, feature53, feature54, feature55, feature56, feature57 };
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.of(featureArray58);
        boolean boolean61 = jSONWriter39.removeReference((java.lang.Object) featureArray58);
        com.alibaba.fastjson2.SymbolTable symbolTable62 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable62);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64, feature65, feature66, feature67, feature68 };
        com.alibaba.fastjson2.JSONWriter.Context context70 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray69);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray69);
        java.lang.Class class72 = null;
        boolean boolean74 = jSONWriter63.isWriteMapTypeInfo((java.lang.Object) jSONWriter71, class72, 0L);
        boolean boolean75 = jSONWriter63.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter76.writeBooleanNull();
        byte[] byteArray78 = jSONWriter76.getBytes();
        jSONWriter63.writeNameRaw(byteArray78);
        jSONWriter39.writeRaw(byteArray78);
        jSONWriter9.writeBinary(byteArray78);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-81]");
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray29 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter23.writeInt64(longArray29);
        com.alibaba.fastjson2.JSONObject jSONObject31 = null;
        jSONWriter23.write(jSONObject31);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter23.isWriteTypeInfo((java.lang.Object) false, class34, (long) (short) -1);
        jSONWriter23.writeChar(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable39 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        jSONWriter40.writeInt64(longArray47);
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter40.writeDecimal(bigDecimal50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        long[] longArray58 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter52.writeInt64(longArray58);
        java.nio.charset.Charset charset60 = jSONWriter52.getCharset();
        boolean[] booleanArray61 = new boolean[] {};
        jSONWriter52.writeBool(booleanArray61);
        boolean boolean64 = jSONWriter52.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray71 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65, feature66, feature67, feature68, feature69, feature70 };
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.of(featureArray71);
        boolean boolean74 = jSONWriter52.removeReference((java.lang.Object) featureArray71);
        byte[] byteArray75 = jSONWriter52.getBytes();
        jSONWriter40.writeHex(byteArray75);
        jSONWriter23.writeRaw(byteArray75);
        jSONWriter10.writeBinary(byteArray75);
        boolean boolean79 = jSONWriter10.isRefDetect();
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter10.writeFloat(0.0f, decimalFormat81);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray71);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter13.writeBooleanNull();
        boolean boolean16 = jSONWriter13.isEnabled((long) (byte) 0);
        boolean boolean17 = jSONWriter13.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        long[] longArray24 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter18.writeInt64(longArray24);
        java.nio.charset.Charset charset26 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter27.writeBooleanNull();
        byte[] byteArray29 = jSONWriter27.getBytes();
        jSONWriter18.writeRaw(byteArray29);
        jSONWriter13.writeNameRaw(byteArray29, 1L);
        jSONWriter1.writeHex(byteArray29);
        jSONWriter1.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-81]");
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        long long4 = jSONWriter2.getFeatures((long) (short) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj6 = null;
        boolean boolean7 = jSONWriter5.removeReference(obj6);
        long[] longArray11 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter5.writeInt64(longArray11);
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter5.write(jSONObject13);
        java.lang.Class class16 = null;
        boolean boolean18 = jSONWriter5.isWriteTypeInfo((java.lang.Object) false, class16, (long) (short) -1);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter5.writeRaw(byteArray25);
        boolean boolean27 = jSONWriter5.isUTF8();
        java.lang.Object obj28 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter36 = context35.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter37 = null;
        context35.setLabelFilter(labelFilter37);
        boolean boolean40 = context35.isEnabled(1L);
        boolean boolean41 = context35.isDateFormatISO8601();
        java.lang.Class<?> wildcardClass42 = context35.getClass();
        boolean boolean43 = jSONWriter5.isWriteTypeInfo(obj28, (java.lang.Class) wildcardClass42);
        boolean boolean44 = jSONWriter2.isWriteTypeInfo(obj28);
        jSONWriter2.writeInt8((byte) 0);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNull(afterFilter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        jSONWriter12.writeColon();
        boolean boolean14 = jSONWriter12.jsonb;
        java.time.LocalDateTime localDateTime15 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeLocalDateTime(localDateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        char[] charArray22 = new char[] { '#', ' ', '#' };
        jSONWriter16.writeString(charArray22);
        boolean boolean24 = jSONWriter13.removeReference((java.lang.Object) jSONWriter16);
        java.time.LocalDate localDate25 = null;
        jSONWriter13.writeLocalDate(localDate25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        jSONWriter13.setRootObject((java.lang.Object) featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12, featureArray32);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray32);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        jSONWriter0.writeFloat((float) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        java.lang.String str31 = jSONWriter12.setPath(0, (java.lang.Object) context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        java.nio.charset.Charset charset37 = jSONWriter33.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter33.config(feature38, true);
        jSONWriter33.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        jSONWriter42.writeNull();
        java.lang.reflect.Type type47 = null;
        boolean boolean48 = jSONWriter42.isWriteTypeInfo((java.lang.Object) true, type47);
        jSONWriter33.popPath((java.lang.Object) boolean48);
        jSONWriter33.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        jSONWriter52.writeNameRaw(byteArray54);
        jSONWriter33.writeNameRaw(byteArray54);
        jSONWriter32.writeRaw(byteArray54);
        boolean boolean59 = jSONWriter0.writeTypeName(byteArray54, (long) (short) -1);
        jSONWriter0.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature62, true);
        long long65 = jSONWriter0.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2147483648L + "'", long65 == 2147483648L);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        jSONWriter3.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray19 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter13.writeInt64(longArray19);
        com.alibaba.fastjson2.JSONObject jSONObject21 = null;
        jSONWriter13.write(jSONObject21);
        java.lang.Class class24 = null;
        boolean boolean26 = jSONWriter13.isWriteTypeInfo((java.lang.Object) false, class24, (long) (short) -1);
        jSONWriter13.startObject();
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter13.writeDecimal(bigDecimal28, (long) 100);
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter13.context;
        boolean boolean32 = jSONWriter13.isRefDetect();
        jSONWriter13.writeDateTime14((int) (byte) -1, (int) (byte) 10, (int) (short) 0, (int) '4', (int) (byte) -1, (int) '#');
        java.time.LocalDate localDate40 = null;
        jSONWriter13.writeLocalDate(localDate40);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46, feature47 };
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        jSONWriter52.writeNameRaw(byteArray54);
        java.nio.charset.Charset charset56 = jSONWriter52.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter52.config(feature57, true);
        jSONWriter52.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        long[] longArray68 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter62.writeInt64(longArray68);
        java.nio.charset.Charset charset70 = jSONWriter62.getCharset();
        java.lang.String str71 = jSONWriter52.setPath((int) (short) -1, (java.lang.Object) charset70);
        byte[] byteArray72 = jSONWriter51.getBytes(charset70);
        boolean boolean74 = jSONWriter13.writeTypeName(byteArray72, 1056L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter3.writeNameRaw(byteArray72, (int) (byte) 10, (-2));
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        boolean boolean11 = jSONWriter0.hasFilter(34359804928L);
        java.math.BigDecimal bigDecimal12 = null;
        jSONWriter0.writeDecimal(bigDecimal12, (long) 3);
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray23 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter17.writeInt64(longArray23);
        jSONWriter16.writeInt64(longArray23);
        jSONWriter16.writeTypeName("");
        int int28 = jSONWriter16.level();
        java.util.UUID uUID29 = null;
        jSONWriter16.writeUUID(uUID29);
        jSONWriter16.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        long[] longArray39 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter33.writeInt64(longArray39);
        java.nio.charset.Charset charset41 = jSONWriter33.getCharset();
        boolean[] booleanArray42 = new boolean[] {};
        jSONWriter33.writeBool(booleanArray42);
        jSONWriter33.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSONWriter47.removeReference(obj48);
        long[] longArray53 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter47.writeInt64(longArray53);
        java.nio.charset.Charset charset55 = jSONWriter47.getCharset();
        boolean[] booleanArray56 = new boolean[] {};
        jSONWriter47.writeBool(booleanArray56);
        jSONWriter47.writeSymbol((int) (byte) 100);
        boolean boolean60 = jSONWriter46.isRefDetect((java.lang.Object) jSONWriter47);
        java.lang.String str63 = jSONWriter47.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray64 = new boolean[] {};
        jSONWriter47.writeBool(booleanArray64);
        boolean boolean66 = jSONWriter47.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        char[] charArray74 = new char[] { '#', ' ', '#' };
        jSONWriter68.writeString(charArray74);
        java.lang.String str76 = jSONWriter47.setPath("$.[100].hi\\![32]", (java.lang.Object) charArray74);
        jSONWriter16.writeString(charArray74, (int) (byte) 0, (int) (byte) -1);
        jSONWriter0.writeString(charArray74, (int) (byte) 10, (int) 'a');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  , #]");
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        com.alibaba.fastjson2.JSONWriter.Path path7 = path4.parent;
        java.lang.String str8 = path4.toString();
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = context15.getBeforeFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = null;
        context15.setValueFilter(valueFilter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean21 = path4.equals((java.lang.Object) jSONWriter20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        jSONWriter31.writeNull();
        java.lang.reflect.Type type36 = null;
        boolean boolean37 = jSONWriter31.isWriteTypeInfo((java.lang.Object) true, type36);
        jSONWriter22.popPath((java.lang.Object) boolean37);
        jSONWriter22.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter22.writeNameRaw(byteArray43);
        long long47 = jSONWriter22.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter48 = null;
        java.lang.String str50 = jSONWriter22.setPath(fieldWriter48, (java.lang.Object) (-1.0f));
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        char[] charArray57 = new char[] { '#', ' ', '#' };
        jSONWriter51.writeString(charArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter59.removeReference(obj60);
        jSONWriter59.writeNull();
        boolean boolean63 = jSONWriter51.isWriteTypeInfo((java.lang.Object) jSONWriter59);
        boolean boolean64 = jSONWriter22.isIgnoreNoneSerializable((java.lang.Object) jSONWriter51);
        byte[] byteArray65 = jSONWriter51.getBytes();
        jSONWriter20.writeBinary(byteArray65);
        jSONWriter20.writeRaw("");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$.[100]" + "'", str8, "$.[100]");
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNull(afterFilter16);
        org.junit.Assert.assertNull(beforeFilter17);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1056L + "'", long47 == 1056L);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, 35, 32, 35]");
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        jSONWriter0.writeNumberNull();
        java.math.BigDecimal bigDecimal20 = null;
        java.text.DecimalFormat decimalFormat22 = null;
        jSONWriter0.writeDecimal(bigDecimal20, (long) 1, decimalFormat22);
        jSONWriter0.writeChar('4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter10 = null;
        context9.setBeforeFilter(beforeFilter10);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter12 = null;
        context9.setAfterFilter(afterFilter12);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean14 = jSONWriter1.hasFilter((long) (short) -1);
        boolean boolean15 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat(0.0f, decimalFormat17);
        java.nio.charset.Charset charset19 = jSONWriter1.getCharset();
        jSONWriter1.writeMillis((long) 1);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter1.writeBigInt(bigInteger22, (long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter25.config(feature30, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        jSONWriter25.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray51 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter45.writeInt64(longArray51);
        java.nio.charset.Charset charset53 = jSONWriter45.getCharset();
        boolean[] booleanArray54 = new boolean[] {};
        jSONWriter45.writeBool(booleanArray54);
        jSONWriter45.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter45);
        jSONWriter45.startArray((int) (byte) 0);
        jSONWriter45.endObject();
        jSONWriter45.writeSymbol(0);
        jSONWriter45.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Context context66 = jSONWriter45.context;
        float[] floatArray67 = new float[] {};
        jSONWriter45.writeFloat(floatArray67);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter44.writeFloat(floatArray67, decimalFormat69);
        jSONWriter1.writeFloat(floatArray67);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[]");
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(context66);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[]");
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter8.writeDouble(doubleArray10, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean22 = context21.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context21.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = context21.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        jSONWriter27.writeNameRaw(byteArray29);
        java.nio.charset.Charset charset31 = jSONWriter27.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter27.config(feature32, true);
        jSONWriter27.writeName("");
        java.lang.reflect.Type type37 = null;
        boolean boolean38 = jSONWriter26.isWriteTypeInfo((java.lang.Object) "", type37);
        com.alibaba.fastjson2.JSONObject jSONObject39 = null;
        jSONWriter26.write(jSONObject39);
        int int41 = jSONWriter26.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName;
        java.lang.String str44 = jSONWriter26.setPath((int) ' ', (java.lang.Object) feature43);
        jSONWriter8.writeEnum((java.lang.Enum) feature43);
        long long47 = jSONWriter8.getFeatures((long) 10);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertNull(afterFilter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumsUsingName));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 34359804938L + "'", long47 == 34359804938L);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3, feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        java.lang.Class class12 = null;
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) (byte) 0, class12);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter10.writeBigInt(bigInteger14);
        java.lang.reflect.Type type16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, type16);
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter0.context;
        jSONWriter0.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(context18);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatMillis();
        boolean boolean15 = context6.isEnabled((long) 0);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.provider;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        java.time.LocalTime localTime43 = null;
        jSONWriter23.writeLocalTime(localTime43);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter46.writeString("hi!");
        jSONWriter46.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        jSONWriter61.writeBooleanNull();
        jSONWriter61.writeComma();
        jSONWriter46.startArray((java.lang.Object) jSONWriter61, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature67, feature68, feature69, feature70, feature71 };
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray72);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter75 = null;
        context74.setBeforeFilter(beforeFilter75);
        boolean boolean77 = jSONWriter61.removeReference((java.lang.Object) context74);
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature83 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray84 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature79, feature80, feature81, feature82, feature83 };
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray84);
        com.alibaba.fastjson2.JSONWriter.Context context86 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray84);
        com.alibaba.fastjson2.JSONWriter jSONWriter87 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray84);
        context74.config(featureArray84);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter89 = null;
        context74.setLabelFilter(labelFilter89);
        java.lang.String str91 = jSONWriter23.setPath("$.[100].hi\\!", (java.lang.Object) context74);
        boolean boolean92 = jSONWriter23.isUTF16();
        jSONWriter23.close();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature83.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray84);
        org.junit.Assert.assertNotNull(jSONWriter87);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        jSONWriter13.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        jSONWriter22.writeDouble(doubleArray27);
        boolean boolean31 = jSONWriter22.isUTF16();
        java.lang.Class<?> wildcardClass32 = jSONWriter22.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter33 = jSONWriter17.getObjectWriter((java.lang.Class) wildcardClass32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter34.writeBooleanNull();
        boolean boolean37 = jSONWriter34.isEnabled((long) (byte) 0);
        boolean boolean38 = jSONWriter34.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime39 = null;
        jSONWriter34.writeOffsetDateTime(offsetDateTime39);
        jSONWriter17.writeAny((java.lang.Object) offsetDateTime39);
        com.alibaba.fastjson2.JSONObject jSONObject42 = null;
        jSONWriter17.write(jSONObject42);
        jSONWriter17.writeFloat((java.lang.Float) 100.0f);
        byte[] byteArray46 = jSONWriter17.getBytes();
        java.lang.String str47 = jSONWriter13.setPath("", (java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.SymbolTable symbolTable48 = jSONWriter17.symbolTable;
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(objectWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100, -81, -81, -76, -48, 100]");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(symbolTable48);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        java.nio.charset.Charset charset16 = jSONWriter8.getCharset();
        boolean[] booleanArray17 = new boolean[] {};
        jSONWriter8.writeBool(booleanArray17);
        jSONWriter8.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        long[] longArray24 = new long[] {};
        jSONWriter21.writeInt64(longArray24);
        java.util.Map map26 = null;
        jSONWriter21.write(map26);
        java.util.Map map28 = null;
        jSONWriter21.write(map28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray31 = new double[] {};
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter30.writeDouble(doubleArray31, decimalFormat32);
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter21.writeDouble(doubleArray31, decimalFormat34);
        boolean boolean36 = jSONWriter21.useSingleQuote;
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter8.isWriteMapTypeInfo((java.lang.Object) jSONWriter21, class37, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject40 = null;
        jSONWriter21.write(jSONObject40);
        float[] floatArray44 = new float[] { '4', '4' };
        jSONWriter21.writeFloat(floatArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        java.nio.charset.Charset charset50 = jSONWriter46.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray56 = new double[] {};
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter55.writeDouble(doubleArray56, decimalFormat57);
        jSONWriter51.writeDouble(doubleArray56);
        boolean boolean60 = jSONWriter51.isUTF16();
        java.lang.Class<?> wildcardClass61 = jSONWriter51.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter62 = jSONWriter46.getObjectWriter((java.lang.Class) wildcardClass61);
        boolean boolean63 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter21, (java.lang.Class) wildcardClass61);
        java.time.ZonedDateTime zonedDateTime64 = null;
        jSONWriter7.writeZonedDateTime(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[52.0, 52.0]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(objectWriter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        jSONWriter8.writeNameRaw(byteArray10);
        jSONWriter8.writeString("hi!");
        jSONWriter8.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        jSONWriter23.writeBooleanNull();
        jSONWriter23.writeComma();
        jSONWriter8.startArray((java.lang.Object) jSONWriter23, (int) (byte) 1);
        double[] doubleArray32 = new double[] { (short) 10, 0.0f, 'a', (byte) 100 };
        jSONWriter23.writeDouble(doubleArray32);
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter0.writeDouble(doubleArray32, decimalFormat34);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 0.0, 97.0, 100.0]");
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        boolean boolean2 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        jSONWriter4.writeNameRaw(byteArray6);
        java.nio.charset.Charset charset8 = jSONWriter4.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter4.config(feature9, true);
        jSONWriter4.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        java.lang.reflect.Type type18 = null;
        boolean boolean19 = jSONWriter13.isWriteTypeInfo((java.lang.Object) true, type18);
        jSONWriter4.popPath((java.lang.Object) boolean19);
        jSONWriter4.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter4.writeNameRaw(byteArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter28.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter28.writeEnum((java.lang.Enum) feature30);
        boolean boolean32 = jSONWriter28.hasFilter();
        jSONWriter28.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = jSONWriter28.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable36);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray43);
        java.lang.Class class46 = null;
        boolean boolean48 = jSONWriter37.isWriteMapTypeInfo((java.lang.Object) jSONWriter45, class46, 0L);
        java.lang.String[] strArray50 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList51);
        jSONWriter28.write((java.util.List) strList51);
        jSONWriter4.writeString((java.util.List<java.lang.String>) strList51);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        java.nio.charset.Charset charset60 = jSONWriter56.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter56.config(feature61, true);
        jSONWriter56.writeSymbol("");
        jSONWriter56.startObject();
        boolean boolean67 = jSONWriter56.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature71, feature72, feature73, feature74, feature75, feature76 };
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray77);
        java.lang.Class class80 = null;
        jSONWriter78.checkAndWriteTypeName((java.lang.Object) (byte) 0, class80);
        java.math.BigInteger bigInteger82 = null;
        jSONWriter78.writeBigInt(bigInteger82);
        java.lang.reflect.Type type84 = null;
        boolean boolean85 = jSONWriter68.isWriteTypeInfo((java.lang.Object) jSONWriter78, type84);
        short[] shortArray87 = new short[] { (byte) 0 };
        jSONWriter78.writeInt16(shortArray87);
        jSONWriter56.writeInt16(shortArray87);
        jSONWriter4.writeInt16(shortArray87);
        jSONWriter3.writeInt16(shortArray87);
        jSONWriter0.writeInt16(shortArray87);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(symbolTable35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[0]");
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeNumberNull();
        com.alibaba.fastjson2.JSONObject jSONObject30 = null;
        jSONWriter0.write(jSONObject30);
        jSONWriter0.writeInt32((int) ' ');
        jSONWriter0.startObject();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        int int23 = jSONWriter7.level();
        boolean boolean24 = jSONWriter7.utf16;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        java.util.Map map30 = null;
        jSONWriter25.write(map30);
        java.util.Map map32 = null;
        jSONWriter25.write(map32);
        boolean boolean34 = jSONWriter25.isIgnoreNoneSerializable();
        boolean boolean35 = jSONWriter25.isBeanToArray();
        java.time.LocalDateTime localDateTime36 = null;
        jSONWriter25.writeLocalDateTime(localDateTime36);
        java.nio.charset.Charset charset38 = jSONWriter25.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray39 = jSONWriter7.getBytes(charset38);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset38);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        java.time.Instant instant18 = null;
        jSONWriter1.writeInstant(instant18);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.of(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray26);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter30.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray35 = new long[] {};
        jSONWriter32.writeInt64(longArray35);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter32.config(feature37, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        jSONWriter32.config(featureArray46);
        jSONWriter32.writeRaw((byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        char[] charArray58 = new char[] { '#', ' ', '#' };
        jSONWriter52.writeString(charArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj61 = null;
        boolean boolean62 = jSONWriter60.removeReference(obj61);
        jSONWriter60.writeNull();
        boolean boolean64 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter60);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        jSONWriter65.writeNameRaw(byteArray67);
        jSONWriter60.writeBinary(byteArray67);
        jSONWriter32.writeStringLatin1(byteArray67);
        boolean boolean71 = jSONWriter30.isIgnoreNoneSerializable((java.lang.Object) jSONWriter32);
        boolean boolean72 = jSONWriter32.hasFilter();
        boolean boolean73 = jSONWriter32.useSingleQuote;
        boolean boolean74 = jSONWriter32.isUseSingleQuotes();
        jSONWriter1.startArray((java.lang.Object) jSONWriter32, (int) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter11.writeInt16((short) 10);
        boolean boolean14 = jSONWriter11.isWriteNulls();
        boolean boolean15 = jSONWriter11.utf16;
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int int17 = jSONWriter16.level();
        java.util.Map map18 = null;
        jSONWriter16.write(map18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter30.writeDecimal(bigDecimal34, 1L);
        java.math.BigInteger bigInteger37 = null;
        jSONWriter30.writeBigInt(bigInteger37);
        jSONWriter30.writeInt64((long) 0);
        boolean boolean42 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter30, (long) (byte) 1);
        java.time.LocalDate localDate43 = null;
        jSONWriter30.writeLocalDate(localDate43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSONWriter47.removeReference(obj48);
        long[] longArray53 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter47.writeInt64(longArray53);
        java.nio.charset.Charset charset55 = jSONWriter47.getCharset();
        boolean[] booleanArray56 = new boolean[] {};
        jSONWriter47.writeBool(booleanArray56);
        jSONWriter47.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        long[] longArray67 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter61.writeInt64(longArray67);
        java.nio.charset.Charset charset69 = jSONWriter61.getCharset();
        boolean[] booleanArray70 = new boolean[] {};
        jSONWriter61.writeBool(booleanArray70);
        jSONWriter61.writeSymbol((int) (byte) 100);
        boolean boolean74 = jSONWriter60.isRefDetect((java.lang.Object) jSONWriter61);
        int int75 = jSONWriter60.level();
        long long77 = jSONWriter60.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass78 = jSONWriter60.getClass();
        boolean boolean80 = jSONWriter30.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass78, (long) '4');
        jSONWriter4.checkAndWriteTypeName((java.lang.Object) jSONWriter16, (java.lang.Class) wildcardClass78);
        boolean boolean82 = jSONWriter16.isIgnoreErrorGetter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (-2));
        com.alibaba.fastjson2.JSONWriter.Path path12 = path11.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
        org.junit.Assert.assertNotNull(path12);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.startArray((-1));
        java.util.UUID uUID4 = null;
        jSONWriter0.writeUUID(uUID4);
        boolean boolean6 = jSONWriter0.hasFilter();
        jSONWriter0.writeFloat((float) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        java.nio.charset.Charset charset13 = jSONWriter9.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter9.config(feature14, true);
        jSONWriter9.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter19.writeDecimal(bigDecimal23, 1L);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter19.writeBigInt(bigInteger26);
        jSONWriter19.writeInt64((long) 0);
        boolean boolean31 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) (byte) 1);
        java.time.LocalDate localDate32 = null;
        jSONWriter19.writeLocalDate(localDate32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        jSONWriter19.writeTypeName("");
        boolean boolean37 = jSONWriter0.isWriteTypeInfo((java.lang.Object) "");
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter45 = context44.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context44.setLabelFilter(labelFilter46);
        boolean boolean48 = context44.isDateFormatHasDay();
        jSONWriter0.setRootObject((java.lang.Object) context44);
        boolean boolean50 = context44.isDateFormatHasDay();
        boolean boolean51 = context44.isFormatyyyyMMddhhmmss19();
        boolean boolean52 = context44.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNull(afterFilter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        jSONWriter7.writeSymbol(0);
        jSONWriter7.writeReference("$[100]");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter12.context;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter14 = context13.getContextNameFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter15 = context13.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = null;
        context13.setPropertyFilter(propertyFilter16);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertNull(contextNameFilter14);
        org.junit.Assert.assertNull(valueFilter15);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = context6.getLabelFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = context6.getAfterFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter12);
        org.junit.Assert.assertNull(afterFilter13);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = null;
        context8.setAfterFilter(afterFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context8.setPropertyFilter(propertyFilter12);
        boolean boolean14 = context8.isDateFormatISO8601();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter9.startObject();
        java.nio.charset.Charset charset11 = jSONWriter9.getCharset();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble((double) 10L, decimalFormat13);
        int int15 = jSONWriter9.size();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$.hi\\!");
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        long[] longArray13 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter7.writeInt64(longArray13);
        java.nio.charset.Charset charset15 = jSONWriter7.getCharset();
        boolean[] booleanArray16 = new boolean[] {};
        jSONWriter7.writeBool(booleanArray16);
        boolean boolean19 = jSONWriter7.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(featureArray26);
        boolean boolean29 = jSONWriter7.removeReference((java.lang.Object) featureArray26);
        byte[] byteArray30 = jSONWriter7.getBytes();
        char[] charArray36 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter7.writeString(charArray36, (int) (short) 10, (int) (short) 0, true);
        boolean boolean42 = jSONWriter7.hasFilter(10L);
        byte[] byteArray43 = jSONWriter7.getBytes();
        jSONWriter7.writeDateTime14(0, (int) (short) 10, (int) (byte) 0, (int) (byte) 10, (int) ' ', 10);
        jSONWriter7.writeName("$[100]");
        boolean boolean53 = path6.equals((java.lang.Object) "$[100]");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-105, -1, -1, 10, -108, 73]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        java.lang.Class class23 = null;
        jSONWriter21.checkAndWriteTypeName((java.lang.Object) (byte) 0, class23);
        java.math.BigInteger bigInteger25 = null;
        jSONWriter21.writeBigInt(bigInteger25);
        java.lang.reflect.Type type27 = null;
        boolean boolean28 = jSONWriter11.isWriteTypeInfo((java.lang.Object) jSONWriter21, type27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        jSONWriter29.writeNameRaw(byteArray31);
        java.nio.charset.Charset charset33 = jSONWriter29.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter29.config(feature34, true);
        jSONWriter29.writeName("");
        boolean boolean39 = jSONWriter29.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        char[] charArray46 = new char[] { '#', ' ', '#' };
        jSONWriter40.writeString(charArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        jSONWriter48.writeNull();
        boolean boolean52 = jSONWriter40.isWriteTypeInfo((java.lang.Object) jSONWriter48);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        jSONWriter53.writeNameRaw(byteArray55);
        jSONWriter48.writeBinary(byteArray55);
        boolean boolean59 = jSONWriter29.writeTypeName(byteArray55, (long) (byte) 100);
        jSONWriter11.writeBinary(byteArray55);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61, feature62, feature63, feature64, feature65 };
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        jSONWriter11.config(featureArray66);
        com.alibaba.fastjson2.JSONWriter.Context context70 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider10, featureArray66);
        boolean boolean72 = context70.isEnabled((long) '#');
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter73 = context70.getPropertyPreFilter();
        boolean boolean75 = context70.isEnabled((long) ' ');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(propertyPreFilter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context9.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context9.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context18.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter20 = null;
        context18.setLabelFilter(labelFilter20);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context18.provider;
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray25);
        jSONWriter28.writeComma();
        java.util.Map map30 = null;
        jSONWriter28.write(map30);
        boolean boolean32 = jSONWriter28.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = null;
        context41.setBeforeFilter(beforeFilter42);
        boolean boolean44 = context41.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        context41.config(featureArray51);
        jSONWriter28.config(featureArray51);
        context23.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11, featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNotNull(objectWriterProvider22);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        char[] charArray19 = new char[] { '#', ' ', '#' };
        jSONWriter13.writeString(charArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        jSONWriter21.writeNull();
        boolean boolean25 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter21);
        java.lang.reflect.Type type26 = null;
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter13, type26);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeReference("");
        jSONWriter0.writeChar('a');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(symbolTable28);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter0.writeDecimal(bigDecimal20);
        jSONWriter0.writeChar('a');
        jSONWriter0.writeNull();
        jSONWriter0.startArray(3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeSymbol("$[0]");
        java.nio.charset.Charset charset3 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Context context4 = jSONWriter0.getContext();
        java.math.BigDecimal bigDecimal5 = null;
        jSONWriter0.writeDecimal(bigDecimal5, 34359804928L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(context4);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        jSONWriter0.writeInt16((short) (byte) 0);
        java.time.LocalDate localDate16 = null;
        jSONWriter0.writeLocalDate(localDate16);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        long long24 = jSONWriter0.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray31 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter25.writeInt64(longArray31);
        java.nio.charset.Charset charset33 = jSONWriter25.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter34.writeBooleanNull();
        byte[] byteArray36 = jSONWriter34.getBytes();
        jSONWriter25.writeRaw(byteArray36);
        boolean boolean39 = jSONWriter0.writeTypeName(byteArray36, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray50 = new double[] {};
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter49.writeDouble(doubleArray50, decimalFormat51);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter48.writeDouble(doubleArray50, decimalFormat53);
        jSONWriter0.writeDouble(doubleArray50);
        jSONWriter0.close();
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57, feature58, feature59, feature60, feature61, feature62 };
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        jSONWriter0.popPath((java.lang.Object) featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter67);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        boolean boolean20 = jSONWriter15.useSingleQuote;
        boolean boolean21 = jSONWriter15.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        java.time.OffsetDateTime offsetDateTime10 = null;
        jSONWriter0.writeOffsetDateTime(offsetDateTime10);
        jSONWriter0.writeString("hi!");
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(reader14);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter12.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter12.writeEnum((java.lang.Enum) feature14);
        boolean boolean16 = jSONWriter12.hasFilter();
        jSONWriter12.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter19.writeDecimal(bigDecimal23, 1L);
        char[] charArray30 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter19.writeString(charArray30, (int) (byte) 100, (int) (short) 0);
        jSONWriter12.writeString(charArray30);
        jSONWriter0.writeString(charArray30);
        jSONWriter0.writeInt16((short) 0);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean39 = jSONWriter0.isEnabled(feature38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = new double[] {};
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter40.writeDouble(doubleArray41, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray45 = new double[] {};
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter44.writeDouble(doubleArray45, decimalFormat46);
        jSONWriter40.writeDouble(doubleArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj50 = null;
        boolean boolean51 = jSONWriter49.removeReference(obj50);
        long[] longArray55 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter49.writeInt64(longArray55);
        com.alibaba.fastjson2.JSONObject jSONObject57 = null;
        jSONWriter49.write(jSONObject57);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter49.isWriteTypeInfo((java.lang.Object) false, class60, (long) (short) -1);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter49.writeRaw(byteArray69);
        jSONWriter40.writeStringLatin1(byteArray69);
        jSONWriter0.writeNameRaw(byteArray69, 10L);
        jSONWriter0.writeInt8((byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, -1, 0, 10, 10, 10]");
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 4);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$[0]");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        boolean boolean26 = jSONWriter14.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        boolean boolean36 = jSONWriter14.removeReference((java.lang.Object) featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray33);
        boolean boolean38 = path10.equals((java.lang.Object) context37);
        java.time.ZoneId zoneId39 = context37.getZoneId();
        java.lang.Class<?> wildcardClass40 = zoneId39.getClass();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeBool(false);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        long[] longArray16 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter10.writeInt64(longArray16);
        java.nio.charset.Charset charset18 = jSONWriter10.getCharset();
        boolean[] booleanArray19 = new boolean[] {};
        jSONWriter10.writeBool(booleanArray19);
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(featureArray29);
        boolean boolean32 = jSONWriter10.removeReference((java.lang.Object) featureArray29);
        byte[] byteArray33 = jSONWriter10.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(byteArray33, (int) (short) 10, 16);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-105, -1, -1, 10, -108]");
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter10.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter10.writeBool(booleanArray21);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter33.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        long[] longArray42 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter36.writeInt64(longArray42);
        java.nio.charset.Charset charset44 = jSONWriter36.getCharset();
        jSONWriter36.writeSymbol((int) (byte) -1);
        int int47 = jSONWriter36.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52 };
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray53);
        boolean boolean55 = context54.isFormatyyyyMMddhhmmss19();
        boolean boolean57 = context54.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter58 = null;
        context54.setPropertyPreFilter(propertyPreFilter58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.of(context54);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray62 = new double[] {};
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter61.writeDouble(doubleArray62, decimalFormat63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray66 = new double[] {};
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter65.writeDouble(doubleArray66, decimalFormat67);
        jSONWriter61.writeDouble(doubleArray66);
        boolean boolean70 = jSONWriter61.isUTF16();
        java.lang.Class<?> wildcardClass71 = jSONWriter61.getClass();
        boolean boolean72 = jSONWriter36.isWriteTypeInfo((java.lang.Object) jSONWriter60, (java.lang.Class) wildcardClass71);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter73 = jSONWriter33.getObjectWriter((java.lang.Class) wildcardClass71);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.startArray((java.lang.Object) jSONWriter74, (int) '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1 };
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(jSONWriter6);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.time.Instant instant4 = null;
        jSONWriter0.writeInstant(instant4);
        jSONWriter0.writeFloat((float) 100L);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        java.nio.charset.Charset charset16 = jSONWriter8.getCharset();
        jSONWriter8.writeSymbol((int) (byte) -1);
        int int19 = jSONWriter8.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        com.alibaba.fastjson2.JSONObject jSONObject28 = null;
        jSONWriter20.write(jSONObject28);
        java.lang.Class class31 = null;
        boolean boolean33 = jSONWriter20.isWriteTypeInfo((java.lang.Object) false, class31, (long) (short) -1);
        jSONWriter20.startObject();
        boolean boolean35 = jSONWriter8.removeReference((java.lang.Object) jSONWriter20);
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter12.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter12);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        java.nio.charset.Charset charset34 = jSONWriter26.getCharset();
        boolean[] booleanArray35 = new boolean[] {};
        jSONWriter26.writeBool(booleanArray35);
        jSONWriter26.writeSymbol((int) (byte) 100);
        boolean boolean39 = jSONWriter25.isRefDetect((java.lang.Object) jSONWriter26);
        java.lang.String str42 = jSONWriter26.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray43 = new boolean[] {};
        jSONWriter26.writeBool(booleanArray43);
        jSONWriter11.writeBool(booleanArray43);
        jSONWriter11.writeSymbol("hi!");
        boolean boolean49 = jSONWriter11.hasFilter((long) 'a');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        boolean boolean45 = jSONWriter30.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        long[] longArray60 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter54.writeInt64(longArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        char[] charArray68 = new char[] { '#', ' ', '#' };
        jSONWriter62.writeString(charArray68);
        java.lang.Class class70 = null;
        boolean boolean71 = jSONWriter54.isWriteTypeInfo((java.lang.Object) charArray68, class70);
        jSONWriter53.writeRaw(charArray68, (int) (byte) 0, (int) (byte) 0);
        jSONWriter30.writeString(charArray68);
        jSONWriter28.writeString(charArray68);
        jSONWriter28.writeFloat((float) 6);
        boolean boolean79 = jSONWriter28.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.nio.charset.Charset charset12 = jSONWriter0.getCharset();
        boolean boolean13 = jSONWriter0.isUseSingleQuotes();
        jSONWriter0.writeDateYYYMMDD8(0, 15, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        jSONWriter18.writeNameRaw(byteArray20);
        java.nio.charset.Charset charset22 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter18.config(feature23, true);
        jSONWriter18.writeNull();
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter18.writeFloat((float) '#', decimalFormat28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        boolean[] booleanArray39 = new boolean[] {};
        jSONWriter30.writeBool(booleanArray39);
        jSONWriter30.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray46 = new long[] {};
        jSONWriter43.writeInt64(longArray46);
        java.util.Map map48 = null;
        jSONWriter43.write(map48);
        java.util.Map map50 = null;
        jSONWriter43.write(map50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray53 = new double[] {};
        java.text.DecimalFormat decimalFormat54 = null;
        jSONWriter52.writeDouble(doubleArray53, decimalFormat54);
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter43.writeDouble(doubleArray53, decimalFormat56);
        boolean boolean58 = jSONWriter43.useSingleQuote;
        java.lang.Class class59 = null;
        boolean boolean61 = jSONWriter30.isWriteMapTypeInfo((java.lang.Object) jSONWriter43, class59, (long) (short) -1);
        jSONWriter30.endObject();
        jSONWriter30.writeBooleanNull();
        jSONWriter30.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter66.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter66.writeEnum((java.lang.Enum) feature68);
        boolean boolean70 = jSONWriter66.hasFilter();
        jSONWriter66.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable73 = jSONWriter66.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable74 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable74);
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray81 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76, feature77, feature78, feature79, feature80 };
        com.alibaba.fastjson2.JSONWriter.Context context82 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray81);
        java.lang.Class class84 = null;
        boolean boolean86 = jSONWriter75.isWriteMapTypeInfo((java.lang.Object) jSONWriter83, class84, 0L);
        java.lang.String[] strArray88 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        jSONWriter75.writeString((java.util.List<java.lang.String>) strList89);
        jSONWriter66.write((java.util.List) strList89);
        jSONWriter30.write((java.util.List) strList89);
        jSONWriter18.writeString((java.util.List<java.lang.String>) strList89);
        jSONWriter0.write((java.util.List) strList89);
        boolean boolean96 = jSONWriter0.utf8;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(symbolTable73);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray81);
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        boolean boolean15 = jSONWriter0.isIgnoreNoneSerializable();
        java.util.Map map16 = null;
        jSONWriter0.write(map16);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(context6);
        long long14 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter13.getContext();
        jSONWriter13.writeDateTime14((int) (short) 0, (int) (short) 100, (int) (byte) 0, (int) (byte) 1, (int) (short) -1, (int) '#');
        jSONWriter13.endArray();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable24);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray31);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter25.isWriteMapTypeInfo((java.lang.Object) jSONWriter33, class34, 0L);
        boolean boolean37 = jSONWriter25.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter38.writeBooleanNull();
        byte[] byteArray40 = jSONWriter38.getBytes();
        jSONWriter25.writeNameRaw(byteArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter42.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter42.writeEnum((java.lang.Enum) feature44);
        boolean boolean46 = jSONWriter42.hasFilter();
        jSONWriter42.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj50 = null;
        boolean boolean51 = jSONWriter49.removeReference(obj50);
        long[] longArray52 = new long[] {};
        jSONWriter49.writeInt64(longArray52);
        java.util.Map map54 = null;
        jSONWriter49.write(map54);
        java.util.Map map56 = null;
        jSONWriter49.write(map56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray59 = new double[] {};
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter58.writeDouble(doubleArray59, decimalFormat60);
        java.text.DecimalFormat decimalFormat62 = null;
        jSONWriter49.writeDouble(doubleArray59, decimalFormat62);
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter42.writeDouble(doubleArray59, decimalFormat64);
        jSONWriter25.writeDouble(doubleArray59);
        jSONWriter25.writeName("$.[100][4]");
        boolean boolean69 = jSONWriter25.hasFilter();
        java.lang.Class class70 = null;
        boolean boolean71 = jSONWriter13.isWriteTypeInfo((java.lang.Object) jSONWriter25, class70);
        java.math.BigInteger bigInteger72 = null;
        jSONWriter25.writeBigInt(bigInteger72);
        jSONWriter25.endObject();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[]");
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter9 = null;
        context6.setPropertyFilter(propertyFilter9);
        boolean boolean12 = context6.isEnabled((long) 100);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = context6.getLabelFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = context6.getLabelFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(labelFilter13);
        org.junit.Assert.assertNull(labelFilter14);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        java.math.BigInteger bigInteger28 = null;
        jSONWriter0.writeBigInt(bigInteger28);
        long long30 = jSONWriter0.getFeatures();
        jSONWriter0.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        jSONWriter0.writeEnum((java.lang.Enum) feature32);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean19 = jSONWriter0.isIgnoreNoneSerializable();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter0.writeDecimal(bigDecimal20, (long) 'a');
        boolean boolean23 = jSONWriter0.useSingleQuote;
        boolean boolean24 = jSONWriter0.isBeanToArray();
        jSONWriter0.writeMillis((long) 1);
        byte[] byteArray27 = jSONWriter0.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, -81, -67, 10, -81, -85, 0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter7.writeBooleanNull();
        jSONWriter7.writeComma();
        jSONWriter7.writeRaw('#', '#');
        java.time.LocalTime localTime13 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.writeLocalTime(localTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter24.writeEnum((java.lang.Enum) feature26);
        boolean boolean28 = jSONWriter24.hasFilter();
        jSONWriter24.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter33.isWriteMapTypeInfo((java.lang.Object) jSONWriter41, class42, 0L);
        java.lang.String[] strArray46 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter24.write((java.util.List) strList47);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList47);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter0.writeFloat((float) 100L, decimalFormat53);
        long long55 = jSONWriter0.getFeatures();
        boolean boolean56 = jSONWriter0.isWriteNulls();
        java.math.BigDecimal bigDecimal57 = null;
        jSONWriter0.writeDecimal(bigDecimal57, 4L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1024L + "'", long55 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        boolean boolean53 = jSONWriter45.isWriteTypeInfo((java.lang.Object) featureArray51);
        context28.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(featureArray51);
        boolean boolean56 = jSONWriter55.utf8;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter14 = null;
        context6.setAfterFilter(afterFilter14);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter16 = null;
        context6.setContextNameFilter(contextNameFilter16);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter18 = context6.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(contextNameFilter18);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter0.utf8;
        jSONWriter0.writeSymbol((int) '4');
        jSONWriter0.writeRaw((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray17);
        jSONWriter20.writeSymbol("$.[100].hi\\![32]");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter20.writeRaw((byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId12 = context10.getZoneId();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context10.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        context10.config(featureArray20);
        boolean boolean23 = path0.equals((java.lang.Object) featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray31 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter25.writeInt64(longArray31);
        java.nio.charset.Charset charset33 = jSONWriter25.getCharset();
        boolean[] booleanArray34 = new boolean[] {};
        jSONWriter25.writeBool(booleanArray34);
        boolean boolean37 = jSONWriter25.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.of(featureArray44);
        boolean boolean47 = jSONWriter25.removeReference((java.lang.Object) featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray44);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray44);
        boolean boolean50 = path0.equals((java.lang.Object) jSONWriter49);
        jSONWriter49.writeRaw(' ', 'a');
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider9 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        context6.config(featureArray16);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter19 = context6.getPropertyPreFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(objectWriterProvider9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNull(propertyPreFilter19);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.time.LocalDate localDate4 = null;
        jSONWriter0.writeLocalDate(localDate4);
        jSONWriter0.writeInt64((long) 10);
        jSONWriter0.writeTypeName("$.[100][4]");
        jSONWriter0.writeDateTime19((int) 'a', 6, 10, (int) (short) -1, (int) ' ', (int) (byte) 1);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter0.writeFloat((float) (byte) 10, decimalFormat18);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName(52L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8, feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context13, symbolTable14);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context13.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        boolean boolean32 = jSONWriter17.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter17.config(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider16, featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49 };
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray50);
        java.lang.Class<?> wildcardClass55 = featureArray50.getClass();
        boolean boolean57 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter43, (java.lang.Class) wildcardClass55, (long) (short) -1);
        boolean boolean58 = jSONWriter43.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter0.utf8;
        java.lang.Object obj17 = null;
        jSONWriter0.startArray(obj17, (int) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.time.LocalDate localDate4 = null;
        jSONWriter0.writeLocalDate(localDate4);
        jSONWriter0.writeSymbol("$[0]");
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray14);
        jSONWriter18.writeArrayNull();
        com.alibaba.fastjson2.JSONObject jSONObject20 = null;
        jSONWriter18.write(jSONObject20);
        jSONWriter18.writeString("hi!");
        boolean boolean24 = jSONWriter0.isWriteTypeInfo((java.lang.Object) "hi!");
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter0.writeDecimal(bigDecimal25);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONObject jSONObject10 = null;
        jSONWriter9.write(jSONObject10);
        boolean boolean12 = jSONWriter0.removeReference((java.lang.Object) jSONWriter9);
        jSONWriter9.writeRaw((byte) 10);
        jSONWriter9.writeInt32((int) '#');
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(featureArray23);
        boolean boolean27 = jSONWriter25.hasFilter(100L);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean;
        jSONWriter25.writeEnum((java.lang.Enum) feature28);
        boolean boolean30 = jSONWriter25.isUTF16();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter32.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter32.writeEnum((java.lang.Enum) feature34);
        boolean boolean36 = jSONWriter32.hasFilter();
        jSONWriter32.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray42 = new long[] {};
        jSONWriter39.writeInt64(longArray42);
        java.util.Map map44 = null;
        jSONWriter39.write(map44);
        java.util.Map map46 = null;
        jSONWriter39.write(map46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray49 = new double[] {};
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter48.writeDouble(doubleArray49, decimalFormat50);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter39.writeDouble(doubleArray49, decimalFormat52);
        java.text.DecimalFormat decimalFormat54 = null;
        jSONWriter32.writeDouble(doubleArray49, decimalFormat54);
        java.lang.String str56 = jSONWriter25.setPath("$[0].hi\\!.$", (java.lang.Object) doubleArray49);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter9.writeDouble(doubleArray49, decimalFormat57);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.startObject();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter0.writeDecimal(bigDecimal15, (long) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 1L);
        char[] charArray29 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter18.writeString(charArray29, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeString(charArray29, (int) 'a', (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        jSONWriter36.writeNameRaw(byteArray38);
        java.nio.charset.Charset charset40 = jSONWriter36.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter36.config(feature41, true);
        jSONWriter36.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        java.lang.reflect.Type type50 = null;
        boolean boolean51 = jSONWriter45.isWriteTypeInfo((java.lang.Object) true, type50);
        jSONWriter36.popPath((java.lang.Object) boolean51);
        jSONWriter36.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter55.writeNameRaw(byteArray57);
        jSONWriter36.writeNameRaw(byteArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter60.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter60.writeEnum((java.lang.Enum) feature62);
        boolean boolean64 = jSONWriter60.hasFilter();
        jSONWriter60.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = jSONWriter60.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74 };
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        java.lang.Class class78 = null;
        boolean boolean80 = jSONWriter69.isWriteMapTypeInfo((java.lang.Object) jSONWriter77, class78, 0L);
        java.lang.String[] strArray82 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        jSONWriter69.writeString((java.util.List<java.lang.String>) strList83);
        jSONWriter60.write((java.util.List) strList83);
        jSONWriter36.writeString((java.util.List<java.lang.String>) strList83);
        java.text.DecimalFormat decimalFormat89 = null;
        jSONWriter36.writeFloat((float) 100L, decimalFormat89);
        long long91 = jSONWriter36.getFeatures();
        java.time.LocalTime localTime92 = null;
        jSONWriter36.writeLocalTime(localTime92);
        java.time.ZonedDateTime zonedDateTime94 = null;
        jSONWriter36.writeZonedDateTime(zonedDateTime94);
        boolean boolean96 = jSONWriter36.isRefDetect();
        boolean boolean97 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4,  , a, 4]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(symbolTable67);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1024L + "'", long91 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        jSONWriter0.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        java.time.ZonedDateTime zonedDateTime9 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime9);
        jSONWriter0.endArray();
        jSONWriter0.writeMillis(34359804928L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 4);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$[0]");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) 'a');
        com.alibaba.fastjson2.JSONWriter.Path path14 = new com.alibaba.fastjson2.JSONWriter.Path(path12, (int) (short) 1);
        org.junit.Assert.assertNotNull(path0);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        jSONWriter0.config(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter64 = null;
        context63.setContextNameFilter(contextNameFilter64);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter61);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        jSONWriter0.close();
        long long9 = jSONWriter0.getFeatures((long) (short) 10);
        java.nio.charset.Charset charset10 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider19 = context17.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider19);
        boolean boolean21 = context20.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context20);
        jSONWriter22.writeInt64((long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        jSONWriter25.writeNameRaw(byteArray27);
        java.nio.charset.Charset charset29 = jSONWriter25.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter25.config(feature30, true);
        jSONWriter25.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        jSONWriter34.writeNull();
        java.lang.reflect.Type type39 = null;
        boolean boolean40 = jSONWriter34.isWriteTypeInfo((java.lang.Object) true, type39);
        jSONWriter25.popPath((java.lang.Object) boolean40);
        jSONWriter25.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray50 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter44.writeInt64(longArray50);
        com.alibaba.fastjson2.JSONObject jSONObject52 = null;
        jSONWriter44.write(jSONObject52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        char[] charArray60 = new char[] { '#', ' ', '#' };
        jSONWriter54.writeString(charArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        jSONWriter62.writeNull();
        boolean boolean66 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter62);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        jSONWriter67.writeNameRaw(byteArray69);
        jSONWriter62.writeBinary(byteArray69);
        jSONWriter44.writeBinary(byteArray69);
        jSONWriter25.writeHex(byteArray69);
        jSONWriter22.writeRaw(byteArray69);
        jSONWriter0.writeBinary(byteArray69);
        jSONWriter0.writeMillis(34359804938L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = null;
        context6.setLabelFilter(labelFilter13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context6.config(feature15, true);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider18 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.SymbolTable symbolTable29 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28, symbolTable29);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context28.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter32 = null;
        context28.setNameFilter(nameFilter32);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider34 = context28.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter42 = context41.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context41.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider45 = context41.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider45, featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider34, featureArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58, feature59, feature60, feature61, feature62 };
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter65 = context64.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter66 = null;
        context64.setLabelFilter(labelFilter66);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider68 = context64.provider;
        boolean boolean70 = context64.isEnabled(1024L);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter71 = context64.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature73, feature74, feature75, feature76, feature77 };
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray78);
        context64.config(featureArray78);
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider34, featureArray78);
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider18, featureArray78);
        com.alibaba.fastjson2.filter.NameFilter nameFilter86 = context85.getNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
        org.junit.Assert.assertNotNull(objectWriterProvider18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(objectWriterProvider34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNull(afterFilter42);
        org.junit.Assert.assertNotNull(objectWriterProvider45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNull(afterFilter65);
        org.junit.Assert.assertNotNull(objectWriterProvider68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(propertyFilter71);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertNull(nameFilter86);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        boolean boolean26 = jSONWriter10.hasFilter();
        boolean boolean27 = jSONWriter10.useSingleQuote;
        jSONWriter10.writeReference("$.[100].$\\[0\\]");
        java.math.BigInteger bigInteger30 = null;
        jSONWriter10.writeBigInt(bigInteger30, 10L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = jSONWriter0.getContext();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTimeHHMMSS8(6, (-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(context17);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter29.isWriteMapTypeInfo((java.lang.Object) jSONWriter37, class38, 0L);
        boolean boolean41 = jSONWriter29.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter42.writeBooleanNull();
        byte[] byteArray44 = jSONWriter42.getBytes();
        jSONWriter29.writeNameRaw(byteArray44);
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter29);
        jSONWriter0.writeDateYYYMMDD10((int) (byte) -1, (int) (short) -1, (-2));
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81]");
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context18.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        jSONWriter24.writeNameRaw(byteArray26);
        jSONWriter24.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        boolean boolean38 = context37.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId39 = context37.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter40 = context37.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = context37.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context37.config(feature42, false);
        java.lang.String str45 = jSONWriter24.setPath("", (java.lang.Object) context37);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context37.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        long[] longArray61 = new long[] {};
        jSONWriter58.writeInt64(longArray61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter58.config(feature63, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66, feature67, feature68, feature69, feature70, feature71 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        jSONWriter58.config(featureArray72);
        context37.config(featureArray72);
        context21.config(featureArray72);
        context6.config(featureArray72);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNull(afterFilter40);
        org.junit.Assert.assertNull(afterFilter41);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        java.math.BigInteger bigInteger3 = null;
        jSONWriter0.writeBigInt(bigInteger3);
        java.time.Instant instant5 = null;
        jSONWriter0.writeInstant(instant5);
        jSONWriter0.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        char[] charArray54 = new char[] { '#', ' ', '#' };
        jSONWriter48.writeString(charArray54);
        boolean boolean56 = jSONWriter45.removeReference((java.lang.Object) jSONWriter48);
        boolean boolean57 = jSONWriter48.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter48.writeEnum((java.lang.Enum) feature58);
        boolean boolean60 = context28.isEnabled(feature58);
        boolean boolean61 = context28.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter62 = context28.getPropertyFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable63 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28, symbolTable63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(propertyFilter62);
        org.junit.Assert.assertNotNull(jSONWriter64);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.context;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray11 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature6, feature7, feature8, feature9, feature10 };
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray11);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray11);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray11);
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        jSONWriter0.writeFloat((java.lang.Float) (-1.0f));
        int int11 = jSONWriter0.level();
        jSONWriter0.writeDouble((double) 52L);
        boolean boolean14 = jSONWriter0.jsonb;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        long[] longArray21 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter15.writeInt64(longArray21);
        java.nio.charset.Charset charset23 = jSONWriter15.getCharset();
        boolean[] booleanArray24 = new boolean[] {};
        jSONWriter15.writeBool(booleanArray24);
        boolean boolean27 = jSONWriter15.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        java.lang.reflect.Type type41 = null;
        boolean boolean42 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter28, type41);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = jSONWriter15.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        long[] longArray52 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter46.writeInt64(longArray52);
        jSONWriter45.writeInt64(longArray52);
        java.math.BigDecimal bigDecimal55 = null;
        jSONWriter45.writeDecimal(bigDecimal55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        long[] longArray63 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter57.writeInt64(longArray63);
        java.nio.charset.Charset charset65 = jSONWriter57.getCharset();
        boolean[] booleanArray66 = new boolean[] {};
        jSONWriter57.writeBool(booleanArray66);
        boolean boolean69 = jSONWriter57.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74, feature75 };
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.of(featureArray76);
        boolean boolean79 = jSONWriter57.removeReference((java.lang.Object) featureArray76);
        byte[] byteArray80 = jSONWriter57.getBytes();
        jSONWriter45.writeHex(byteArray80);
        jSONWriter15.writeRaw(byteArray80);
        jSONWriter0.writeStringLatin1(byteArray80);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(symbolTable43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-105, -1, -1, 10, -108]");
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        boolean boolean10 = context6.isDateFormatISO8601();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable11);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONObject jSONObject10 = null;
        jSONWriter9.write(jSONObject10);
        boolean boolean12 = jSONWriter0.removeReference((java.lang.Object) jSONWriter9);
        jSONWriter9.writeRaw((byte) 10);
        boolean boolean15 = jSONWriter9.useSingleQuote;
        long long16 = jSONWriter9.getFeatures();
        jSONWriter9.writeDateYYYMMDD8((int) (short) 100, (int) (short) -1, 15);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 34359804928L + "'", long16 == 34359804928L);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        boolean boolean12 = context9.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter13 = null;
        context9.setValueFilter(valueFilter13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context9.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.of(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider16, featureArray23);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter28);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        java.lang.Class class17 = null;
        boolean boolean18 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class17);
        int[] intArray23 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter0.writeInt32(intArray23);
        jSONWriter0.startArray(4);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 10, 52, 100]");
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        jSONWriter0.writeChar('#');
        java.math.BigInteger bigInteger17 = null;
        jSONWriter0.writeBigInt(bigInteger17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        context8.setDateFormat("$");
        boolean boolean14 = context8.isDateFormatISO8601();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        java.time.Instant instant18 = null;
        jSONWriter1.writeInstant(instant18);
        java.util.Map map20 = null;
        jSONWriter1.write(map20);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = null;
        context31.setContextNameFilter(contextNameFilter32);
        java.lang.String str34 = context31.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        jSONWriter30.writeNameRaw(byteArray32);
        java.nio.charset.Charset charset34 = jSONWriter30.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter30.config(feature35, true);
        jSONWriter30.writeSymbol("");
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter30.writeDecimal(bigDecimal40, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        jSONWriter43.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        jSONWriter47.writeNameRaw(byteArray49);
        java.nio.charset.Charset charset51 = jSONWriter47.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter47.config(feature52, true);
        jSONWriter47.writeName("");
        boolean boolean57 = jSONWriter47.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        char[] charArray64 = new char[] { '#', ' ', '#' };
        jSONWriter58.writeString(charArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj67 = null;
        boolean boolean68 = jSONWriter66.removeReference(obj67);
        jSONWriter66.writeNull();
        boolean boolean70 = jSONWriter58.isWriteTypeInfo((java.lang.Object) jSONWriter66);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        jSONWriter71.writeNameRaw(byteArray73);
        jSONWriter66.writeBinary(byteArray73);
        boolean boolean77 = jSONWriter47.writeTypeName(byteArray73, (long) (byte) 100);
        jSONWriter43.writeRaw(byteArray73);
        jSONWriter30.writeNameRaw(byteArray73, 1024L);
        jSONWriter0.writeStringLatin1(byteArray73);
        java.time.LocalDateTime localDateTime82 = null;
        jSONWriter0.writeLocalDateTime(localDateTime82);
        java.time.LocalDateTime localDateTime84 = null;
        jSONWriter0.writeLocalDateTime(localDateTime84);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        int int11 = jSONWriter0.size();
        java.nio.charset.Charset charset12 = jSONWriter0.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(charset12);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        boolean boolean45 = context44.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter46 = null;
        context44.setPropertyFilter(propertyFilter46);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context44.setLabelFilter(labelFilter48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context44);
        java.nio.charset.Charset charset51 = jSONWriter50.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray52 = jSONWriter10.getBytes(charset51);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(charset51);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = jSONWriter0.context;
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter0.writeDouble((double) (byte) 10, decimalFormat6);
        jSONWriter0.writeDateTime14(2, 9, 5, (int) 'a', 0, 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(context4);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter12 = null;
        context6.setContextValueFilter(contextValueFilter12);
        boolean boolean15 = context6.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = null;
        context6.setContextNameFilter(contextNameFilter17);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter19 = context6.getPropertyFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertNull(propertyFilter19);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        boolean boolean8 = jSONWriter4.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14 };
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter18 = null;
        context17.setBeforeFilter(beforeFilter18);
        boolean boolean20 = context17.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25, feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray27);
        context17.config(featureArray27);
        jSONWriter4.config(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray27);
        jSONWriter32.writeArrayNull();
        jSONWriter32.writeComma();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        boolean boolean22 = context19.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter23 = null;
        context19.setPropertyPreFilter(propertyPreFilter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.of(context19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context19.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray30 = new long[] {};
        jSONWriter27.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter27.config(feature32, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35, feature36, feature37, feature38, feature39, feature40 };
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray41);
        jSONWriter27.config(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(featureArray41);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider26, featureArray41);
        context6.config(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter48);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = jSONWriter1.context;
        jSONWriter1.writeName("hi!");
        boolean boolean7 = jSONWriter1.isUTF8();
        jSONWriter1.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        jSONWriter11.writeInt64((long) 100);
        jSONWriter11.writeRaw("hi!");
        jSONWriter11.writeBooleanNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.startObject();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter0.writeDecimal(bigDecimal15, (long) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 1L);
        char[] charArray29 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter18.writeString(charArray29, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeString(charArray29, (int) 'a', (int) (short) 1);
        long long37 = jSONWriter0.getFeatures(1024L);
        boolean boolean38 = jSONWriter0.utf8;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1024L + "'", long37 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        int int12 = jSONWriter11.level();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        jSONWriter13.writeString("hi!");
        com.alibaba.fastjson2.JSONObject jSONObject19 = null;
        jSONWriter13.write(jSONObject19);
        java.util.UUID uUID21 = null;
        jSONWriter13.writeUUID(uUID21);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter23 = null;
        java.lang.Object obj24 = null;
        java.lang.String str25 = jSONWriter13.setPath(fieldWriter23, obj24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        com.alibaba.fastjson2.JSONObject jSONObject34 = null;
        jSONWriter26.write(jSONObject34);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter26.isWriteTypeInfo((java.lang.Object) false, class37, (long) (short) -1);
        jSONWriter26.startObject();
        java.math.BigDecimal bigDecimal41 = null;
        jSONWriter26.writeDecimal(bigDecimal41, (long) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        jSONWriter44.writeNull();
        java.math.BigDecimal bigDecimal48 = null;
        jSONWriter44.writeDecimal(bigDecimal48, 1L);
        char[] charArray55 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter44.writeString(charArray55, (int) (byte) 100, (int) (short) 0);
        jSONWriter26.writeString(charArray55, (int) 'a', (int) (short) 1);
        jSONWriter13.writeString(charArray55, (int) (short) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter11.writeNameRaw(charArray55, 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4,  , a, 4]");
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature7, feature8, feature9, feature10, feature11 };
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray12);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean22 = context21.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context21.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = context21.getAfterFilter();
        boolean boolean26 = context21.isDateFormatHasDay();
        java.lang.reflect.Type type27 = null;
        boolean boolean29 = jSONWriter14.isWriteTypeInfo((java.lang.Object) boolean26, type27, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        boolean boolean45 = jSONWriter30.useSingleQuote;
        jSONWriter30.writeNumberNull();
        java.lang.Class class47 = null;
        boolean boolean49 = jSONWriter14.isWriteMapTypeInfo((java.lang.Object) jSONWriter30, class47, (long) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable50 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable50);
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52, feature53, feature54, feature55, feature56 };
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray57);
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter51.isWriteMapTypeInfo((java.lang.Object) jSONWriter59, class60, 0L);
        boolean boolean63 = jSONWriter51.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter64.writeBooleanNull();
        byte[] byteArray66 = jSONWriter64.getBytes();
        jSONWriter51.writeNameRaw(byteArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray69 = new double[] {};
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter68.writeDouble(doubleArray69, decimalFormat70);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray73 = new double[] {};
        java.text.DecimalFormat decimalFormat74 = null;
        jSONWriter72.writeDouble(doubleArray73, decimalFormat74);
        jSONWriter68.writeDouble(doubleArray73);
        boolean boolean77 = jSONWriter68.isUTF16();
        java.lang.Class<?> wildcardClass78 = jSONWriter68.getClass();
        boolean boolean80 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter51, (java.lang.Class) wildcardClass78, (long) (short) 1);
        jSONWriter51.endObject();
        boolean boolean82 = path4.equals((java.lang.Object) jSONWriter51);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertNull(afterFilter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter11 = null;
        context6.setAfterFilter(afterFilter11);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context21.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = null;
        context21.setLabelFilter(labelFilter23);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider25 = context21.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.of(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider25, featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context("$", featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13, featureArray32);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNotNull(objectWriterProvider25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONObject jSONObject5 = null;
        jSONWriter0.write(jSONObject5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter7.writeBooleanNull();
        byte[] byteArray9 = jSONWriter7.getBytes();
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray11 = new double[] {};
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter10.writeDouble(doubleArray11, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = new double[] {};
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter14.writeDouble(doubleArray15, decimalFormat16);
        jSONWriter10.writeDouble(doubleArray15);
        boolean boolean19 = jSONWriter10.isUTF16();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean21 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass20);
        int int22 = jSONWriter7.size();
        jSONWriter7.startArray((int) (short) 100);
        boolean boolean25 = jSONWriter7.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context10);
        jSONWriter11.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = new double[] {};
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter14.writeDouble(doubleArray15, decimalFormat16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        jSONWriter14.writeDouble(doubleArray19);
        boolean boolean23 = jSONWriter14.isUTF16();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        long long41 = jSONWriter39.getFeatures((long) (short) 100);
        boolean boolean42 = jSONWriter39.jsonb;
        java.lang.String str43 = jSONWriter35.setPath(fieldWriter36, (java.lang.Object) jSONWriter39);
        java.lang.Class<?> wildcardClass44 = jSONWriter39.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter45 = jSONWriter11.getObjectWriter((java.lang.reflect.Type) wildcardClass24, (java.lang.Class) wildcardClass44);
        java.time.OffsetDateTime offsetDateTime46 = null;
        jSONWriter11.writeOffsetDateTime(offsetDateTime46);
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        jSONWriter11.config(featureArray54);
        byte[] byteArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter11.writeNameRaw(byteArray59, 4, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objectWriter45);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter56);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(context31);
        java.time.OffsetDateTime offsetDateTime33 = null;
        jSONWriter32.writeOffsetDateTime(offsetDateTime33);
        boolean boolean35 = jSONWriter32.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        boolean boolean13 = context6.isEnabled(0L);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter14 = context6.getPropertyFilter();
        java.time.format.DateTimeFormatter dateTimeFormatter15 = context6.getDateFormatter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = context6.getPropertyPreFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter17 = context6.getNameFilter();
        long long18 = context6.getFeatures();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(propertyFilter14);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(propertyPreFilter16);
        org.junit.Assert.assertNull(nameFilter17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 34359804928L + "'", long18 == 34359804928L);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeBool(true);
        boolean boolean7 = jSONWriter0.isIgnoreErrorGetter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw("$[100]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        jSONWriter0.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        jSONWriter7.writeNull();
        java.time.LocalDate localDate11 = null;
        jSONWriter7.writeLocalDate(localDate11);
        java.util.UUID uUID13 = null;
        jSONWriter7.writeUUID(uUID13);
        jSONWriter0.writeAny((java.lang.Object) uUID13);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter16 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter17.writeBooleanNull();
        boolean boolean19 = jSONWriter17.utf16;
        java.lang.String str20 = jSONWriter0.setPath(fieldWriter16, (java.lang.Object) jSONWriter17);
        jSONWriter0.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        boolean boolean10 = context9.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9);
        jSONWriter11.writeInt64((long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        java.nio.charset.Charset charset18 = jSONWriter14.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter14.config(feature19, true);
        jSONWriter14.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        jSONWriter23.writeNull();
        java.lang.reflect.Type type28 = null;
        boolean boolean29 = jSONWriter23.isWriteTypeInfo((java.lang.Object) true, type28);
        jSONWriter14.popPath((java.lang.Object) boolean29);
        jSONWriter14.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        long[] longArray39 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter33.writeInt64(longArray39);
        com.alibaba.fastjson2.JSONObject jSONObject41 = null;
        jSONWriter33.write(jSONObject41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        char[] charArray49 = new char[] { '#', ' ', '#' };
        jSONWriter43.writeString(charArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        jSONWriter51.writeNull();
        boolean boolean55 = jSONWriter43.isWriteTypeInfo((java.lang.Object) jSONWriter51);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        jSONWriter51.writeBinary(byteArray58);
        jSONWriter33.writeBinary(byteArray58);
        jSONWriter14.writeHex(byteArray58);
        jSONWriter11.writeRaw(byteArray58);
        boolean boolean64 = jSONWriter11.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context65 = jSONWriter11.getContext();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(context65);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23, symbolTable24);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context23.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter27 = null;
        context23.setNameFilter(nameFilter27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context23.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context36.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context36.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context36.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider40, featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider29, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12, featureArray47);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter54 = context53.getContextValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNull(contextValueFilter54);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        jSONWriter0.writeSymbol((int) (byte) -1);
        boolean boolean11 = jSONWriter0.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter0.writeBool(booleanArray21);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONObject jSONObject5 = null;
        jSONWriter0.write(jSONObject5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter7.writeBooleanNull();
        byte[] byteArray9 = jSONWriter7.getBytes();
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray11 = new double[] {};
        java.text.DecimalFormat decimalFormat12 = null;
        jSONWriter10.writeDouble(doubleArray11, decimalFormat12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = new double[] {};
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter14.writeDouble(doubleArray15, decimalFormat16);
        jSONWriter10.writeDouble(doubleArray15);
        boolean boolean19 = jSONWriter10.isUTF16();
        java.lang.Class<?> wildcardClass20 = jSONWriter10.getClass();
        boolean boolean21 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter7, (java.lang.Class) wildcardClass20);
        jSONWriter7.writeSymbol("$.[100].hi\\!");
        java.math.BigDecimal bigDecimal24 = null;
        jSONWriter7.writeDecimal(bigDecimal24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter26.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter26.writeEnum((java.lang.Enum) feature28);
        boolean boolean30 = jSONWriter26.hasFilter();
        jSONWriter26.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = jSONWriter26.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature36, feature37, feature38, feature39, feature40 };
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter35.isWriteMapTypeInfo((java.lang.Object) jSONWriter43, class44, 0L);
        java.lang.String[] strArray48 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        jSONWriter35.writeString((java.util.List<java.lang.String>) strList49);
        jSONWriter26.write((java.util.List) strList49);
        jSONWriter7.writeString((java.util.List<java.lang.String>) strList49);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(symbolTable33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter24.writeEnum((java.lang.Enum) feature26);
        boolean boolean28 = jSONWriter24.hasFilter();
        jSONWriter24.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter33.isWriteMapTypeInfo((java.lang.Object) jSONWriter41, class42, 0L);
        java.lang.String[] strArray46 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter24.write((java.util.List) strList47);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList47);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter0.writeFloat((float) 100L, decimalFormat53);
        jSONWriter0.writeSymbol("$[0]");
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57, feature58, feature59, feature60, feature61 };
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray62);
        boolean boolean64 = context63.isFormatyyyyMMddhhmmss19();
        boolean boolean66 = context63.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter67 = context63.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter68 = context63.getBeforeFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter69 = context63.getPropertyFilter();
        jSONWriter0.popPath((java.lang.Object) context63);
        boolean boolean71 = jSONWriter0.isUseSingleQuotes();
        jSONWriter0.writeInt8((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(valueFilter67);
        org.junit.Assert.assertNull(beforeFilter68);
        org.junit.Assert.assertNull(propertyFilter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context28.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = null;
        context28.setAfterFilter(afterFilter34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context28);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = null;
        context31.setContextNameFilter(contextNameFilter32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context31, symbolTable34);
        boolean boolean36 = context31.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter48 = context47.getContextNameFilter();
        boolean boolean50 = context47.isEnabled((long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter51.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter51.writeEnum((java.lang.Enum) feature53);
        boolean boolean55 = context47.isEnabled(feature53);
        boolean boolean56 = context31.isEnabled(feature53);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNull(contextNameFilter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        jSONWriter0.close();
        long long9 = jSONWriter0.getFeatures((long) (short) 10);
        java.nio.charset.Charset charset10 = jSONWriter0.getCharset();
        jSONWriter0.close();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeFloat((float) '#', decimalFormat13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean22 = context21.isFormatyyyyMMddhhmmss19();
        boolean boolean24 = context21.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.NameFilter nameFilter25 = context21.getNameFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter26 = context21.getValueFilter();
        boolean boolean28 = context21.isEnabled(100L);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray35 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter29.writeInt64(longArray35);
        java.nio.charset.Charset charset37 = jSONWriter29.getCharset();
        boolean[] booleanArray38 = new boolean[] {};
        jSONWriter29.writeBool(booleanArray38);
        jSONWriter29.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray49 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter43.writeInt64(longArray49);
        java.nio.charset.Charset charset51 = jSONWriter43.getCharset();
        boolean[] booleanArray52 = new boolean[] {};
        jSONWriter43.writeBool(booleanArray52);
        jSONWriter43.writeSymbol((int) (byte) 100);
        boolean boolean56 = jSONWriter42.isRefDetect((java.lang.Object) jSONWriter43);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter43.config(feature57, true);
        boolean boolean60 = context21.isEnabled(feature57);
        jSONWriter0.config(feature57, true);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(nameFilter25);
        org.junit.Assert.assertNull(valueFilter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        boolean boolean12 = jSONWriter3.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter3.writeEnum((java.lang.Enum) feature13);
        jSONWriter3.endArray();
        com.alibaba.fastjson2.JSONWriter.Context context16 = jSONWriter3.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(context16);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter24.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        char[] charArray40 = new char[] { '#', ' ', '#' };
        jSONWriter34.writeString(charArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        jSONWriter42.writeNull();
        boolean boolean46 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter42);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        jSONWriter47.writeNameRaw(byteArray49);
        jSONWriter42.writeBinary(byteArray49);
        jSONWriter24.writeBinary(byteArray49);
        jSONWriter0.writeBinary(byteArray49);
        java.time.LocalTime localTime54 = null;
        jSONWriter0.writeLocalTime(localTime54);
        java.time.ZonedDateTime zonedDateTime56 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime56);
        boolean boolean58 = jSONWriter0.utf16;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        boolean boolean11 = context6.isDateFormatHasDay();
        boolean boolean12 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = null;
        context6.setAfterFilter(afterFilter13);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter15 = null;
        context6.setValueFilter(valueFilter15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        long[] longArray16 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter10.writeInt64(longArray16);
        java.nio.charset.Charset charset18 = jSONWriter10.getCharset();
        java.lang.String str19 = jSONWriter0.setPath((int) (short) -1, (java.lang.Object) charset18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        jSONWriter0.writeNameRaw(byteArray22);
        jSONWriter0.writeArrayNull();
        byte[] byteArray26 = jSONWriter0.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, -81, 100, -81]");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj2 = null;
        boolean boolean3 = jSONWriter1.removeReference(obj2);
        long[] longArray4 = new long[] {};
        jSONWriter1.writeInt64(longArray4);
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter1.config(feature6, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13, feature14 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        jSONWriter1.config(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("$[0]", featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean8 = context7.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId9 = context7.getZoneId();
        boolean boolean11 = context7.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId20 = context18.getZoneId();
        context7.setZoneId(zoneId20);
        boolean boolean23 = context7.isEnabled((long) (short) 10);
        boolean boolean24 = jSONWriter0.removeReference((java.lang.Object) boolean23);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        jSONWriter26.writeInt64(longArray33);
        jSONWriter26.writeTypeName("");
        int int38 = jSONWriter26.level();
        jSONWriter0.writeAny((java.lang.Object) int38);
        jSONWriter0.writeDateTimeISO8601((int) (short) 100, 100, (int) (byte) 0, (int) (short) -1, (int) (short) 10, (int) (byte) 1, (int) (byte) 1, (int) (byte) 0, false);
        java.time.LocalTime localTime50 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeLocalTime(localTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean52 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) feature51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        jSONWriter53.writeNameRaw(byteArray55);
        java.nio.charset.Charset charset57 = jSONWriter53.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter53.config(feature58, true);
        jSONWriter53.writeSymbol("");
        jSONWriter53.startObject();
        boolean boolean64 = jSONWriter53.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72, feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray74);
        java.lang.Class class77 = null;
        jSONWriter75.checkAndWriteTypeName((java.lang.Object) (byte) 0, class77);
        java.math.BigInteger bigInteger79 = null;
        jSONWriter75.writeBigInt(bigInteger79);
        java.lang.reflect.Type type81 = null;
        boolean boolean82 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter75, type81);
        short[] shortArray84 = new short[] { (byte) 0 };
        jSONWriter75.writeInt16(shortArray84);
        jSONWriter53.writeInt16(shortArray84);
        jSONWriter0.writeInt16(shortArray84);
        java.util.UUID uUID88 = null;
        jSONWriter0.writeUUID(uUID88);
        boolean boolean91 = jSONWriter0.hasFilter((long) (short) 0);
        com.alibaba.fastjson2.SymbolTable symbolTable92 = jSONWriter0.symbolTable;
        jSONWriter0.endObject();
        jSONWriter0.writeReference("");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(symbolTable92);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        java.lang.String str30 = jSONWriter14.setPath("", (java.lang.Object) (short) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        long[] longArray37 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter31.writeInt64(longArray37);
        java.nio.charset.Charset charset39 = jSONWriter31.getCharset();
        boolean[] booleanArray40 = new boolean[] {};
        jSONWriter31.writeBool(booleanArray40);
        jSONWriter31.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray47 = new long[] {};
        jSONWriter44.writeInt64(longArray47);
        java.util.Map map49 = null;
        jSONWriter44.write(map49);
        java.util.Map map51 = null;
        jSONWriter44.write(map51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray54 = new double[] {};
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter53.writeDouble(doubleArray54, decimalFormat55);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter44.writeDouble(doubleArray54, decimalFormat57);
        boolean boolean59 = jSONWriter44.useSingleQuote;
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter31.isWriteMapTypeInfo((java.lang.Object) jSONWriter44, class60, (long) (short) -1);
        jSONWriter31.endObject();
        jSONWriter31.writeBooleanNull();
        jSONWriter31.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path67 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path69 = new com.alibaba.fastjson2.JSONWriter.Path(path67, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj71 = null;
        boolean boolean72 = jSONWriter70.removeReference(obj71);
        long[] longArray76 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter70.writeInt64(longArray76);
        java.nio.charset.Charset charset78 = jSONWriter70.getCharset();
        boolean boolean79 = path67.equals((java.lang.Object) charset78);
        com.alibaba.fastjson2.JSONWriter.Path path81 = new com.alibaba.fastjson2.JSONWriter.Path(path67, (int) '#');
        java.lang.Class<?> wildcardClass82 = path67.getClass();
        boolean boolean83 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter31, (java.lang.reflect.Type) wildcardClass82);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(path67);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        jSONWriter0.writeRaw('#');
        boolean boolean3 = jSONWriter0.jsonb;
        jSONWriter0.writeFloat((float) 6);
        jSONWriter0.writeColon();
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        long[] longArray10 = new long[] {};
        jSONWriter7.writeInt64(longArray10);
        java.util.Map map12 = null;
        jSONWriter7.write(map12);
        java.util.Map map14 = null;
        jSONWriter7.write(map14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray17 = new double[] {};
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter16.writeDouble(doubleArray17, decimalFormat18);
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter7.writeDouble(doubleArray17, decimalFormat20);
        boolean boolean22 = jSONWriter7.useSingleQuote;
        java.lang.Class class24 = null;
        boolean boolean25 = jSONWriter7.isWriteTypeInfo((java.lang.Object) false, class24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        java.nio.charset.Charset charset34 = jSONWriter26.getCharset();
        boolean[] booleanArray35 = new boolean[] {};
        jSONWriter26.writeBool(booleanArray35);
        boolean boolean38 = jSONWriter26.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43, feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        boolean boolean48 = jSONWriter26.removeReference((java.lang.Object) featureArray45);
        byte[] byteArray49 = jSONWriter26.getBytes();
        char[] charArray55 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter26.writeString(charArray55, (int) (short) 10, (int) (short) 0, true);
        jSONWriter7.writeString(charArray55);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(charArray55, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ ,  , a, #, #]");
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter6 = context5.getValueFilter();
        java.lang.String str7 = context5.getDateFormat();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertNull(valueFilter6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        boolean boolean11 = jSONWriter0.hasFilter();
        long long13 = jSONWriter0.getFeatures((long) (byte) 0);
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        java.nio.charset.Charset charset20 = jSONWriter16.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter16.config(feature21, true);
        jSONWriter16.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        jSONWriter25.writeNull();
        java.lang.reflect.Type type30 = null;
        boolean boolean31 = jSONWriter25.isWriteTypeInfo((java.lang.Object) true, type30);
        jSONWriter16.popPath((java.lang.Object) boolean31);
        jSONWriter16.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        jSONWriter35.writeNameRaw(byteArray37);
        jSONWriter16.writeNameRaw(byteArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        long[] longArray46 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter40.writeInt64(longArray46);
        com.alibaba.fastjson2.JSONObject jSONObject48 = null;
        jSONWriter40.write(jSONObject48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj51 = null;
        boolean boolean52 = jSONWriter50.removeReference(obj51);
        char[] charArray56 = new char[] { '#', ' ', '#' };
        jSONWriter50.writeString(charArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        jSONWriter58.writeNull();
        boolean boolean62 = jSONWriter50.isWriteTypeInfo((java.lang.Object) jSONWriter58);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        jSONWriter63.writeNameRaw(byteArray65);
        jSONWriter58.writeBinary(byteArray65);
        jSONWriter40.writeBinary(byteArray65);
        jSONWriter16.writeBinary(byteArray65);
        jSONWriter0.writeRaw(byteArray65);
        jSONWriter0.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1024L + "'", long13 == 1024L);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        boolean boolean9 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeReference("$[0]");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        java.nio.charset.Charset charset17 = jSONWriter13.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        jSONWriter18.writeDouble(doubleArray23);
        boolean boolean27 = jSONWriter18.isUTF16();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter29 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter30.writeBooleanNull();
        boolean boolean33 = jSONWriter30.isEnabled((long) (byte) 0);
        boolean boolean34 = jSONWriter30.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime35 = null;
        jSONWriter30.writeOffsetDateTime(offsetDateTime35);
        jSONWriter13.writeAny((java.lang.Object) offsetDateTime35);
        com.alibaba.fastjson2.JSONObject jSONObject38 = null;
        jSONWriter13.write(jSONObject38);
        jSONWriter0.popPath((java.lang.Object) jSONWriter13);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.writeRaw("$.[100].hi\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objectWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        java.util.Map map31 = null;
        jSONWriter10.write(map31);
        jSONWriter10.writeDouble((double) 'a');
        jSONWriter10.writeNumberNull();
        com.alibaba.fastjson2.SymbolTable symbolTable36 = jSONWriter10.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(symbolTable36);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        jSONWriter13.writeDateTime19(100, (int) (short) 100, 7, 6, 7, (-1));
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter34);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        java.math.BigInteger bigInteger6 = null;
        jSONWriter0.writeBigInt(bigInteger6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        java.lang.Class class20 = null;
        jSONWriter18.checkAndWriteTypeName((java.lang.Object) (byte) 0, class20);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter18.writeBigInt(bigInteger22);
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter18, type24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean36 = jSONWriter26.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        char[] charArray43 = new char[] { '#', ' ', '#' };
        jSONWriter37.writeString(charArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        boolean boolean49 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        jSONWriter50.writeNameRaw(byteArray52);
        jSONWriter45.writeBinary(byteArray52);
        boolean boolean56 = jSONWriter26.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter8.writeBinary(byteArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58, feature59, feature60, feature61, feature62 };
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        jSONWriter8.config(featureArray63);
        jSONWriter8.startObject();
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        jSONWriter68.writeNameRaw(byteArray70);
        java.nio.charset.Charset charset72 = jSONWriter68.getCharset();
        boolean boolean73 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter68);
        boolean boolean75 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8, 10L);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        jSONWriter5.writeNameRaw(byteArray7);
        java.nio.charset.Charset charset9 = jSONWriter5.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter5.config(feature10, true);
        jSONWriter5.writeSymbol("");
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter5.writeDecimal(bigDecimal15, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeName("");
        boolean boolean32 = jSONWriter22.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        char[] charArray39 = new char[] { '#', ' ', '#' };
        jSONWriter33.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        jSONWriter41.writeNull();
        boolean boolean45 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter41.writeBinary(byteArray48);
        boolean boolean52 = jSONWriter22.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter18.writeRaw(byteArray48);
        jSONWriter5.writeNameRaw(byteArray48, 1024L);
        jSONWriter0.writeNameRaw(byteArray48, (long) 4);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        long[] longArray61 = new long[] {};
        jSONWriter58.writeInt64(longArray61);
        java.util.Map map63 = null;
        jSONWriter58.write(map63);
        java.util.Map map65 = null;
        jSONWriter58.write(map65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray68 = new double[] {};
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter67.writeDouble(doubleArray68, decimalFormat69);
        java.text.DecimalFormat decimalFormat71 = null;
        jSONWriter58.writeDouble(doubleArray68, decimalFormat71);
        boolean boolean73 = jSONWriter58.useSingleQuote;
        java.lang.Class class75 = null;
        boolean boolean76 = jSONWriter58.isWriteTypeInfo((java.lang.Object) false, class75);
        int[] intArray81 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter58.writeInt32(intArray81);
        boolean boolean84 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter58, 1024L);
        com.alibaba.fastjson2.SymbolTable symbolTable85 = jSONWriter0.getSymbolTable();
        jSONWriter0.startObject();
        byte[] byteArray87 = jSONWriter0.getBytes();
        long long89 = jSONWriter0.getFeatures((long) 3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 10, 52, 100]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(symbolTable85);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-81, 18, 100, -90]");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 3L + "'", long89 == 3L);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        long[] longArray9 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter3.writeInt64(longArray9);
        java.nio.charset.Charset charset11 = jSONWriter3.getCharset();
        boolean boolean12 = path0.equals((java.lang.Object) charset11);
        com.alibaba.fastjson2.JSONWriter.Path path13 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray20);
        boolean boolean23 = jSONWriter22.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        java.lang.String str26 = jSONWriter22.setPath((int) (short) 10, (java.lang.Object) feature25);
        boolean boolean27 = path0.equals((java.lang.Object) jSONWriter22);
        com.alibaba.fastjson2.JSONWriter.Path path29 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$.[100].$\\[0\\]");
        com.alibaba.fastjson2.SymbolTable symbolTable30 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray38 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter32.writeInt64(longArray38);
        jSONWriter31.writeInt64(longArray38);
        java.math.BigDecimal bigDecimal41 = null;
        jSONWriter31.writeDecimal(bigDecimal41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray49 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter43.writeInt64(longArray49);
        java.nio.charset.Charset charset51 = jSONWriter43.getCharset();
        boolean[] booleanArray52 = new boolean[] {};
        jSONWriter43.writeBool(booleanArray52);
        boolean boolean55 = jSONWriter43.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature56, feature57, feature58, feature59, feature60, feature61 };
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.of(featureArray62);
        boolean boolean65 = jSONWriter43.removeReference((java.lang.Object) featureArray62);
        byte[] byteArray66 = jSONWriter43.getBytes();
        jSONWriter31.writeHex(byteArray66);
        jSONWriter31.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString;
        jSONWriter31.config(feature70, true);
        boolean boolean73 = path0.equals((java.lang.Object) jSONWriter31);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter13 = null;
        context6.setPropertyFilter(propertyFilter13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.of(context6);
        jSONWriter15.writeName((int) 'a');
        boolean boolean18 = jSONWriter15.isIgnoreErrorGetter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter8 = context6.getBeforeFilter();
        boolean boolean9 = context6.isDateFormatUnixTime();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNull(beforeFilter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter12.context;
        boolean boolean14 = jSONWriter12.isRefDetect();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        jSONWriter24.writeNull();
        java.lang.reflect.Type type29 = null;
        boolean boolean30 = jSONWriter24.isWriteTypeInfo((java.lang.Object) true, type29);
        jSONWriter15.popPath((java.lang.Object) boolean30);
        jSONWriter15.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        long[] longArray40 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter34.writeInt64(longArray40);
        com.alibaba.fastjson2.JSONObject jSONObject42 = null;
        jSONWriter34.write(jSONObject42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        char[] charArray50 = new char[] { '#', ' ', '#' };
        jSONWriter44.writeString(charArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        jSONWriter52.writeNull();
        boolean boolean56 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        jSONWriter57.writeNameRaw(byteArray59);
        jSONWriter52.writeBinary(byteArray59);
        jSONWriter34.writeBinary(byteArray59);
        jSONWriter15.writeHex(byteArray59);
        jSONWriter12.writeHex(byteArray59);
        jSONWriter12.writeName("$.hi\\!");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter10.symbolTable;
        jSONWriter10.writeRaw('a');
        boolean boolean14 = jSONWriter10.isUTF8();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        java.util.Map map31 = null;
        jSONWriter10.write(map31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        java.lang.String str35 = jSONWriter10.setPath(4, (java.lang.Object) jSONWriter34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        long[] longArray42 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter36.writeInt64(longArray42);
        java.nio.charset.Charset charset44 = jSONWriter36.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        java.lang.String str55 = jSONWriter36.setPath(0, (java.lang.Object) context54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context54);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter57 = context54.getPropertyPreFilter();
        context54.setDateFormat("$[0]");
        boolean boolean61 = jSONWriter10.isWriteTypeInfo((java.lang.Object) context54, 1L);
        long long62 = jSONWriter10.getFeatures();
        java.util.UUID uUID63 = null;
        jSONWriter10.writeUUID(uUID63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNull(propertyPreFilter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj2 = null;
        boolean boolean3 = jSONWriter1.removeReference(obj2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8, feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray10);
        java.lang.Class class13 = null;
        jSONWriter11.checkAndWriteTypeName((java.lang.Object) (byte) 0, class13);
        java.math.BigInteger bigInteger15 = null;
        jSONWriter11.writeBigInt(bigInteger15);
        java.lang.reflect.Type type17 = null;
        boolean boolean18 = jSONWriter1.isWriteTypeInfo((java.lang.Object) jSONWriter11, type17);
        jSONWriter0.writeAny((java.lang.Object) boolean18);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        boolean boolean27 = context26.isFormatyyyyMMddhhmmss19();
        boolean boolean29 = context26.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter30 = null;
        context26.setPropertyPreFilter(propertyPreFilter30);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter32 = context26.getLabelFilter();
        boolean boolean33 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) labelFilter32);
        java.lang.String str36 = jSONWriter0.setPath(1, (java.lang.Object) (short) 1);
        byte[] byteArray37 = jSONWriter0.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(labelFilter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[102, 97, 108, 115, 101]");
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean10 = context8.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        boolean boolean20 = context17.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context17.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context17);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context17.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter25.config(feature30, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        jSONWriter25.config(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.of(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider24, featureArray39);
        java.time.ZoneId zoneId45 = context44.getZoneId();
        context8.setZoneId(zoneId45);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(zoneId45);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        boolean boolean12 = jSONWriter10.utf8;
        com.alibaba.fastjson2.JSONObject jSONObject13 = null;
        jSONWriter10.write(jSONObject13);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeSymbol(7);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter11.writeInt16((short) 10);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context20.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        jSONWriter25.writeNull();
        java.math.BigDecimal bigDecimal29 = null;
        jSONWriter25.writeDecimal(bigDecimal29, 1L);
        char[] charArray36 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter25.writeString(charArray36, (int) (byte) 100, (int) (short) 0);
        jSONWriter24.writeString(charArray36, 4, 1, true);
        jSONWriter11.writeString(charArray36, 4, (-1), false);
        boolean boolean49 = jSONWriter11.isEnabled((long) (short) 1);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider22);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context18.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context18);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context18.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context18.config(feature27, true);
        boolean boolean30 = context8.isEnabled(feature27);
        boolean boolean32 = context8.isEnabled(100L);
        boolean boolean33 = context8.isDateFormatUnixTime();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeNumberNull();
        com.alibaba.fastjson2.JSONObject jSONObject30 = null;
        jSONWriter0.write(jSONObject30);
        java.nio.charset.Charset charset32 = jSONWriter0.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw("$.[100].hi\\!");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charset32);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        java.lang.String str31 = jSONWriter12.setPath(0, (java.lang.Object) context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        java.nio.charset.Charset charset37 = jSONWriter33.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter33.config(feature38, true);
        jSONWriter33.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        jSONWriter42.writeNull();
        java.lang.reflect.Type type47 = null;
        boolean boolean48 = jSONWriter42.isWriteTypeInfo((java.lang.Object) true, type47);
        jSONWriter33.popPath((java.lang.Object) boolean48);
        jSONWriter33.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        jSONWriter52.writeNameRaw(byteArray54);
        jSONWriter33.writeNameRaw(byteArray54);
        jSONWriter32.writeRaw(byteArray54);
        jSONWriter10.writeHex(byteArray54);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        boolean boolean13 = jSONWriter12.utf8;
        jSONWriter12.writeName("");
        jSONWriter12.writeInt32((int) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context26);
        int[] intArray29 = new int[] { (-1) };
        jSONWriter27.writeInt32(intArray29);
        jSONWriter12.writeInt32(intArray29);
        jSONWriter12.writeDateTime14((int) (byte) 100, 4, 7, 7, (int) '#', 5);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1]");
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        jSONWriter32.writeNameRaw(byteArray34);
        jSONWriter32.writeString("hi!");
        com.alibaba.fastjson2.JSONObject jSONObject38 = null;
        jSONWriter32.write(jSONObject38);
        java.util.UUID uUID40 = null;
        jSONWriter32.writeUUID(uUID40);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter42 = null;
        java.lang.Object obj43 = null;
        java.lang.String str44 = jSONWriter32.setPath(fieldWriter42, obj43);
        java.math.BigInteger bigInteger45 = null;
        jSONWriter32.writeBigInt(bigInteger45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter47.writeBooleanNull();
        boolean boolean50 = jSONWriter47.isEnabled((long) (byte) 0);
        boolean boolean51 = jSONWriter47.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        long[] longArray58 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter52.writeInt64(longArray58);
        java.nio.charset.Charset charset60 = jSONWriter52.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter61.writeBooleanNull();
        byte[] byteArray63 = jSONWriter61.getBytes();
        jSONWriter52.writeRaw(byteArray63);
        jSONWriter47.writeNameRaw(byteArray63, 1L);
        jSONWriter32.writeHex(byteArray63);
        jSONWriter10.setRootObject((java.lang.Object) jSONWriter32);
        jSONWriter32.writeFloat((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-81]");
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter22.writeSymbol(15);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.math.BigInteger bigInteger23 = null;
        jSONWriter10.writeBigInt(bigInteger23);
        long long26 = jSONWriter10.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        jSONWriter27.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        jSONWriter31.writeNameRaw(byteArray33);
        java.nio.charset.Charset charset35 = jSONWriter31.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter31.config(feature36, true);
        jSONWriter31.writeName("");
        boolean boolean41 = jSONWriter31.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        char[] charArray48 = new char[] { '#', ' ', '#' };
        jSONWriter42.writeString(charArray48);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj51 = null;
        boolean boolean52 = jSONWriter50.removeReference(obj51);
        jSONWriter50.writeNull();
        boolean boolean54 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter50);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter55.writeNameRaw(byteArray57);
        jSONWriter50.writeBinary(byteArray57);
        boolean boolean61 = jSONWriter31.writeTypeName(byteArray57, (long) (byte) 100);
        jSONWriter27.writeRaw(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeNameRaw(byteArray57, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        com.alibaba.fastjson2.SymbolTable symbolTable4 = jSONWriter1.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature5, feature6, feature7, feature8, feature9 };
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        boolean boolean12 = context11.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = null;
        context11.setBeforeFilter(beforeFilter13);
        java.time.ZoneId zoneId15 = context11.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter16 = null;
        context11.setBeforeFilter(beforeFilter16);
        java.lang.String str18 = context11.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context11.config(feature19, true);
        jSONWriter1.startArray((java.lang.Object) context11, (int) (byte) 10);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNull(symbolTable4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        long long13 = context8.getFeatures();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider14 = context8.getProvider();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 34359804928L + "'", long13 == 34359804928L);
        org.junit.Assert.assertNotNull(objectWriterProvider14);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        java.time.LocalTime localTime43 = null;
        jSONWriter23.writeLocalTime(localTime43);
        jSONWriter23.writeDateTime19((int) '#', (-1), 10, (int) (short) 1, 100, (int) 'a');
        jSONWriter23.writeInt64((long) (-2));
        jSONWriter23.writeSymbol("$.");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        jSONWriter13.writeDateYYYMMDD8((-1), 0, (int) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36 };
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        boolean boolean39 = context38.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId40 = context38.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = context38.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter42 = context38.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context38);
        com.alibaba.fastjson2.filter.NameFilter nameFilter44 = null;
        context38.setNameFilter(nameFilter44);
        java.time.ZoneId zoneId46 = null;
        context38.setZoneId(zoneId46);
        jSONWriter13.setRootObject((java.lang.Object) zoneId46);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50, feature51, feature52, feature53, feature54, feature55 };
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.of(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider60 = context59.provider;
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter61 = context59.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context59);
        java.time.ZoneId zoneId63 = context59.getZoneId();
        java.lang.String str64 = jSONWriter13.setPath(0, (java.lang.Object) zoneId63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertNull(afterFilter41);
        org.junit.Assert.assertNull(afterFilter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(objectWriterProvider60);
        org.junit.Assert.assertNull(beforeFilter61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(zoneId63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean14 = jSONWriter1.hasFilter((long) (short) -1);
        boolean boolean15 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat(0.0f, decimalFormat17);
        java.nio.charset.Charset charset19 = jSONWriter1.getCharset();
        jSONWriter1.writeMillis((long) 1);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter22 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context29.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context29.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter33 = null;
        context29.setPropertyPreFilter(propertyPreFilter33);
        boolean boolean36 = context29.isEnabled((long) 4);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context29.config(feature37, true);
        java.lang.String str40 = jSONWriter1.setPath(fieldWriter22, (java.lang.Object) context29);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context29, symbolTable41);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(jSONWriter42);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        boolean boolean18 = context16.isEnabled(0L);
        java.lang.String str19 = context16.getDateFormat();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter20 = null;
        context16.setLabelFilter(labelFilter20);
        java.time.format.DateTimeFormatter dateTimeFormatter22 = context16.getDateFormatter();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        boolean boolean30 = context29.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context33);
        jSONWriter34.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray38 = new double[] {};
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter37.writeDouble(doubleArray38, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        jSONWriter37.writeDouble(doubleArray42);
        boolean boolean46 = jSONWriter37.isUTF16();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter59 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        long long64 = jSONWriter62.getFeatures((long) (short) 100);
        boolean boolean65 = jSONWriter62.jsonb;
        java.lang.String str66 = jSONWriter58.setPath(fieldWriter59, (java.lang.Object) jSONWriter62);
        java.lang.Class<?> wildcardClass67 = jSONWriter62.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter34.getObjectWriter((java.lang.reflect.Type) wildcardClass47, (java.lang.Class) wildcardClass67);
        boolean boolean69 = jSONWriter0.isWriteTypeInfo((java.lang.Object) context16, (java.lang.Class) wildcardClass67);
        com.alibaba.fastjson2.filter.NameFilter nameFilter70 = null;
        context16.setNameFilter(nameFilter70);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context10.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11);
        long long13 = context12.getFeatures();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter14 = null;
        context12.setPropertyFilter(propertyFilter14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context12);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        boolean boolean9 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        jSONWriter10.writeFloat((float) 0);
        jSONWriter10.writeNumberNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(context6);
        long long14 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter13.getContext();
        jSONWriter13.writeDateTime14((int) (short) 0, (int) (short) 100, (int) (byte) 0, (int) (byte) 1, (int) (short) -1, (int) '#');
        jSONWriter13.writeFloat((java.lang.Float) 1.0f);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
        org.junit.Assert.assertNotNull(context15);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter10.writeRaw('a', '#');
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14);
        jSONWriter10.writeComma();
        jSONWriter10.startObject();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter2.writeTimeHHMMSS8((int) (byte) 0, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = null;
        context28.setAfterFilter(afterFilter32);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider34 = context28.getProvider();
        boolean boolean35 = context28.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.alibaba.fastjson2.JSONWriter.Context context0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter24.writeEnum((java.lang.Enum) feature26);
        boolean boolean28 = jSONWriter24.hasFilter();
        jSONWriter24.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter33.isWriteMapTypeInfo((java.lang.Object) jSONWriter41, class42, 0L);
        java.lang.String[] strArray46 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter24.write((java.util.List) strList47);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList47);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter0.writeFloat((float) 100L, decimalFormat53);
        long long55 = jSONWriter0.getFeatures();
        java.time.LocalTime localTime56 = null;
        jSONWriter0.writeLocalTime(localTime56);
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59, feature60, feature61, feature62, feature63 };
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray64);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter66 = context65.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter67 = null;
        context65.setLabelFilter(labelFilter67);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider69 = context65.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature71 };
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray72);
        com.alibaba.fastjson2.JSONWriter.Context context75 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider69, featureArray72);
        boolean boolean77 = jSONWriter0.isWriteTypeInfo((java.lang.Object) objectWriterProvider69);
        boolean boolean78 = jSONWriter0.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1024L + "'", long55 == 1024L);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNull(afterFilter66);
        org.junit.Assert.assertNotNull(objectWriterProvider69);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        com.alibaba.fastjson2.SymbolTable symbolTable21 = jSONWriter20.symbolTable;
        long long23 = jSONWriter20.getFeatures((long) (short) 0);
        java.io.OutputStream outputStream24 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter34 = null;
        context33.setBeforeFilter(beforeFilter34);
        boolean boolean36 = context33.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context33);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        long[] longArray44 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter38.writeInt64(longArray44);
        com.alibaba.fastjson2.JSONObject jSONObject46 = null;
        jSONWriter38.write(jSONObject46);
        java.lang.Class class49 = null;
        boolean boolean51 = jSONWriter38.isWriteTypeInfo((java.lang.Object) false, class49, (long) (short) -1);
        jSONWriter38.writeChar(' ');
        java.nio.charset.Charset charset54 = jSONWriter38.getCharset();
        byte[] byteArray55 = jSONWriter37.getBytes(charset54);
        int int56 = jSONWriter20.flushTo(outputStream24, charset54);
        boolean boolean57 = jSONWriter9.isIgnoreNoneSerializable((java.lang.Object) jSONWriter20);
        jSONWriter9.writeMillis(1025L);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNull(symbolTable21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 34359804928L + "'", long23 == 34359804928L);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        char[] charArray16 = new char[] { '#', ' ', '#' };
        jSONWriter10.writeString(charArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter18.writeBinary(byteArray25);
        jSONWriter0.writeBinary(byteArray25);
        java.math.BigInteger bigInteger29 = null;
        jSONWriter0.writeBigInt(bigInteger29);
        jSONWriter0.endArray();
        boolean boolean32 = jSONWriter0.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.startObject();
        jSONWriter0.writeMillis(1056L);
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        jSONWriter19.writeFloat((float) (short) 0);
        long[] longArray22 = new long[] {};
        jSONWriter19.writeInt64(longArray22);
        long long25 = jSONWriter19.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter26.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter26.writeEnum((java.lang.Enum) feature28);
        boolean boolean30 = jSONWriter26.hasFilter();
        jSONWriter26.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable33 = jSONWriter26.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable34);
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray41 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature36, feature37, feature38, feature39, feature40 };
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray41);
        java.lang.Class class44 = null;
        boolean boolean46 = jSONWriter35.isWriteMapTypeInfo((java.lang.Object) jSONWriter43, class44, 0L);
        java.lang.String[] strArray48 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        jSONWriter35.writeString((java.util.List<java.lang.String>) strList49);
        jSONWriter26.write((java.util.List) strList49);
        jSONWriter19.write((java.util.List) strList49);
        jSONWriter0.write((java.util.List) strList49);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(symbolTable33);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray41);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.nio.charset.Charset charset8 = jSONWriter7.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context17);
        jSONWriter7.popPath((java.lang.Object) jSONWriter18);
        jSONWriter7.writeInt64(0L);
        boolean boolean22 = jSONWriter7.jsonb;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        java.nio.charset.Charset charset17 = jSONWriter13.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter13.config(feature18, true);
        jSONWriter13.writeName("");
        boolean boolean23 = jSONWriter13.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        char[] charArray30 = new char[] { '#', ' ', '#' };
        jSONWriter24.writeString(charArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        jSONWriter32.writeNull();
        boolean boolean36 = jSONWriter24.isWriteTypeInfo((java.lang.Object) jSONWriter32);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        jSONWriter37.writeNameRaw(byteArray39);
        jSONWriter32.writeBinary(byteArray39);
        boolean boolean43 = jSONWriter13.writeTypeName(byteArray39, (long) (byte) 100);
        jSONWriter9.writeRaw(byteArray39);
        jSONWriter0.writeHex(byteArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        jSONWriter46.writeNull();
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter46.writeDecimal(bigDecimal50, 1L);
        char[] charArray57 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter46.writeString(charArray57, (int) (byte) 100, (int) (short) 0);
        jSONWriter46.writeFloat((java.lang.Float) 1.0f);
        jSONWriter46.writeNumberNull();
        jSONWriter46.endObject();
        jSONWriter0.popPath((java.lang.Object) jSONWriter46);
        java.util.Map map66 = null;
        jSONWriter46.write(map66);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[4,  , a, 4]");
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        jSONWriter9.writeString("hi!");
        jSONWriter9.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter24.writeBooleanNull();
        jSONWriter24.writeComma();
        jSONWriter9.startArray((java.lang.Object) jSONWriter24, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray35);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context37.setBeforeFilter(beforeFilter38);
        boolean boolean40 = jSONWriter24.removeReference((java.lang.Object) context37);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        context37.config(featureArray47);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter52 = null;
        context37.setLabelFilter(labelFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        char[] charArray63 = new char[] { '#', ' ', '#' };
        jSONWriter57.writeString(charArray63);
        boolean boolean65 = jSONWriter54.removeReference((java.lang.Object) jSONWriter57);
        boolean boolean66 = jSONWriter57.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter57.writeEnum((java.lang.Enum) feature67);
        boolean boolean69 = context37.isEnabled(feature67);
        jSONWriter0.writeEnum((java.lang.Enum) feature67);
        jSONWriter0.writeTypeName("$[0]");
        boolean boolean74 = jSONWriter0.isEnabled((long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter0.getContext();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter76 = null;
        context75.setPropertyPreFilter(propertyPreFilter76);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(context75);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        jSONWriter15.close();
        java.time.LocalDate localDate21 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter15.writeLocalDate(localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }
}

