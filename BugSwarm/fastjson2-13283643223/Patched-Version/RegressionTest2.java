import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path2, 6);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "$.[100].hi\\![32]");
        org.junit.Assert.assertNotNull(path0);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        jSONWriter8.writeNameRaw(byteArray10);
        java.nio.charset.Charset charset12 = jSONWriter8.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter8.config(feature13, true);
        jSONWriter8.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        jSONWriter17.writeNull();
        java.lang.reflect.Type type22 = null;
        boolean boolean23 = jSONWriter17.isWriteTypeInfo((java.lang.Object) true, type22);
        jSONWriter8.popPath((java.lang.Object) boolean23);
        jSONWriter8.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        com.alibaba.fastjson2.JSONObject jSONObject35 = null;
        jSONWriter27.write(jSONObject35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        char[] charArray43 = new char[] { '#', ' ', '#' };
        jSONWriter37.writeString(charArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        boolean boolean49 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        jSONWriter50.writeNameRaw(byteArray52);
        jSONWriter45.writeBinary(byteArray52);
        jSONWriter27.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter1.writeRaw(byteArray52);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = jSONWriter1.symbolTable;
        boolean boolean59 = jSONWriter1.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context4);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNull(symbolTable58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        boolean boolean11 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context6.setPropertyFilter(propertyFilter12);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.jsonb;
        boolean boolean10 = jSONWriter0.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        byte[] byteArray34 = jSONWriter11.getBytes();
        char[] charArray40 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter11.writeString(charArray40, (int) (short) 10, (int) (short) 0, true);
        boolean boolean46 = jSONWriter11.hasFilter(10L);
        byte[] byteArray47 = jSONWriter11.getBytes();
        jSONWriter0.writeRaw(byteArray47);
        jSONWriter0.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-105, -1, -1, 10, -108, 73]");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.nio.charset.Charset charset12 = jSONWriter0.getCharset();
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter0.writeBool(booleanArray23);
        byte[] byteArray26 = jSONWriter0.getBytes();
        jSONWriter0.writeArrayNull();
        int int28 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-81, -108]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter18.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter18.writeEnum((java.lang.Enum) feature20);
        boolean boolean22 = jSONWriter18.hasFilter();
        jSONWriter18.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        java.util.Map map30 = null;
        jSONWriter25.write(map30);
        java.util.Map map32 = null;
        jSONWriter25.write(map32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = new double[] {};
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter34.writeDouble(doubleArray35, decimalFormat36);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter25.writeDouble(doubleArray35, decimalFormat38);
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter18.writeDouble(doubleArray35, decimalFormat40);
        jSONWriter1.writeDouble(doubleArray35);
        jSONWriter1.writeName("$.[100][4]");
        java.math.BigInteger bigInteger45 = null;
        jSONWriter1.writeBigInt(bigInteger45, 1024L);
        jSONWriter1.writeMillis(0L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        jSONWriter32.writeNameRaw(byteArray34);
        jSONWriter32.writeString("hi!");
        com.alibaba.fastjson2.JSONObject jSONObject38 = null;
        jSONWriter32.write(jSONObject38);
        java.util.UUID uUID40 = null;
        jSONWriter32.writeUUID(uUID40);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter42 = null;
        java.lang.Object obj43 = null;
        java.lang.String str44 = jSONWriter32.setPath(fieldWriter42, obj43);
        java.math.BigInteger bigInteger45 = null;
        jSONWriter32.writeBigInt(bigInteger45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter47.writeBooleanNull();
        boolean boolean50 = jSONWriter47.isEnabled((long) (byte) 0);
        boolean boolean51 = jSONWriter47.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        long[] longArray58 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter52.writeInt64(longArray58);
        java.nio.charset.Charset charset60 = jSONWriter52.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter61.writeBooleanNull();
        byte[] byteArray63 = jSONWriter61.getBytes();
        jSONWriter52.writeRaw(byteArray63);
        jSONWriter47.writeNameRaw(byteArray63, 1L);
        jSONWriter32.writeHex(byteArray63);
        jSONWriter10.setRootObject((java.lang.Object) jSONWriter32);
        java.io.OutputStream outputStream69 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74 };
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray75);
        boolean boolean77 = context76.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider78 = context76.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.of(context79);
        java.nio.charset.Charset charset81 = jSONWriter80.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = jSONWriter10.flushTo(outputStream69, charset81);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-81]");
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider78);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(charset81);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter24.writeEnum((java.lang.Enum) feature26);
        boolean boolean28 = jSONWriter24.hasFilter();
        jSONWriter24.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter33.isWriteMapTypeInfo((java.lang.Object) jSONWriter41, class42, 0L);
        java.lang.String[] strArray46 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter24.write((java.util.List) strList47);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList47);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter0.writeFloat((float) 100L, decimalFormat53);
        long long55 = jSONWriter0.getFeatures();
        java.time.LocalTime localTime56 = null;
        jSONWriter0.writeLocalTime(localTime56);
        jSONWriter0.writeBooleanNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateTimeISO8601(3, (int) (short) -1, (int) (short) -1, 10, 3, 3, (int) ' ', 0, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1024L + "'", long55 == 1024L);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        boolean boolean15 = context6.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter12 = null;
        context6.setContextValueFilter(contextValueFilter12);
        boolean boolean15 = context6.isEnabled((long) (byte) -1);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.getProvider();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = null;
        context6.setContextNameFilter(contextNameFilter17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter19.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertNotNull(jSONWriter19);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        boolean boolean12 = jSONWriter10.utf8;
        boolean boolean13 = jSONWriter10.isBeanToArray();
        long long14 = jSONWriter10.getFeatures();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter10.containsReference(obj15);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17, 100L);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 4);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$[0]");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, "$.hi\\!");
        org.junit.Assert.assertNotNull(path0);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter10.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter10.writeBool(booleanArray21);
        jSONWriter10.writeDateTime14((int) '#', 9, (int) (short) -1, (int) (byte) 10, (int) (byte) 10, 15);
        jSONWriter10.writeDoubleArray((double) (byte) 10, (double) (byte) 0);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        jSONWriter9.writeString("hi!");
        jSONWriter9.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter24.writeBooleanNull();
        jSONWriter24.writeComma();
        jSONWriter9.startArray((java.lang.Object) jSONWriter24, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray35);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context37.setBeforeFilter(beforeFilter38);
        boolean boolean40 = jSONWriter24.removeReference((java.lang.Object) context37);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        context37.config(featureArray47);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter52 = null;
        context37.setLabelFilter(labelFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        char[] charArray63 = new char[] { '#', ' ', '#' };
        jSONWriter57.writeString(charArray63);
        boolean boolean65 = jSONWriter54.removeReference((java.lang.Object) jSONWriter57);
        boolean boolean66 = jSONWriter57.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter57.writeEnum((java.lang.Enum) feature67);
        boolean boolean69 = context37.isEnabled(feature67);
        jSONWriter0.writeEnum((java.lang.Enum) feature67);
        java.io.OutputStream outputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int72 = jSONWriter0.flushTo(outputStream71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray38 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter32.writeInt64(longArray38);
        java.nio.charset.Charset charset40 = jSONWriter32.getCharset();
        boolean[] booleanArray41 = new boolean[] {};
        jSONWriter32.writeBool(booleanArray41);
        jSONWriter32.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray48 = new long[] {};
        jSONWriter45.writeInt64(longArray48);
        java.util.Map map50 = null;
        jSONWriter45.write(map50);
        java.util.Map map52 = null;
        jSONWriter45.write(map52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray55 = new double[] {};
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter54.writeDouble(doubleArray55, decimalFormat56);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter45.writeDouble(doubleArray55, decimalFormat58);
        boolean boolean60 = jSONWriter45.useSingleQuote;
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter32.isWriteMapTypeInfo((java.lang.Object) jSONWriter45, class61, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject64 = null;
        jSONWriter45.write(jSONObject64);
        float[] floatArray68 = new float[] { '4', '4' };
        jSONWriter45.writeFloat(floatArray68);
        jSONWriter0.writeFloat(floatArray68);
        jSONWriter0.writeDateYYYMMDD8(1, 6, (int) (byte) 100);
        java.io.OutputStream outputStream75 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature77, feature78, feature79, feature80, feature81 };
        com.alibaba.fastjson2.JSONWriter.Context context83 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray82);
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray82);
        jSONWriter85.startObject();
        java.nio.charset.Charset charset87 = jSONWriter85.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = jSONWriter0.flushTo(outputStream75, charset87);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[52.0, 52.0]");
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(charset87);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        java.math.BigDecimal bigDecimal8 = null;
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter0.writeDecimal(bigDecimal8, (long) (byte) 10, decimalFormat10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        java.nio.charset.Charset charset16 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter12.config(feature17, true);
        jSONWriter12.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        jSONWriter21.writeNull();
        java.lang.reflect.Type type26 = null;
        boolean boolean27 = jSONWriter21.isWriteTypeInfo((java.lang.Object) true, type26);
        jSONWriter12.popPath((java.lang.Object) boolean27);
        jSONWriter12.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        jSONWriter31.writeNameRaw(byteArray33);
        jSONWriter12.writeNameRaw(byteArray33);
        long long37 = jSONWriter12.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        java.lang.Class class50 = null;
        jSONWriter48.checkAndWriteTypeName((java.lang.Object) (byte) 0, class50);
        java.math.BigInteger bigInteger52 = null;
        jSONWriter48.writeBigInt(bigInteger52);
        java.lang.reflect.Type type54 = null;
        boolean boolean55 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter48, type54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        java.nio.charset.Charset charset60 = jSONWriter56.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter56.config(feature61, true);
        jSONWriter56.writeName("");
        boolean boolean66 = jSONWriter56.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj68 = null;
        boolean boolean69 = jSONWriter67.removeReference(obj68);
        char[] charArray73 = new char[] { '#', ' ', '#' };
        jSONWriter67.writeString(charArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj76 = null;
        boolean boolean77 = jSONWriter75.removeReference(obj76);
        jSONWriter75.writeNull();
        boolean boolean79 = jSONWriter67.isWriteTypeInfo((java.lang.Object) jSONWriter75);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        jSONWriter80.writeNameRaw(byteArray82);
        jSONWriter75.writeBinary(byteArray82);
        boolean boolean86 = jSONWriter56.writeTypeName(byteArray82, (long) (byte) 100);
        jSONWriter38.writeBinary(byteArray82);
        jSONWriter12.writeNameRaw(byteArray82);
        jSONWriter0.writeRaw(byteArray82);
        java.lang.Class<?> wildcardClass90 = jSONWriter0.getClass();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1056L + "'", long37 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter36 = context35.getAfterFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(afterFilter36);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.NameFilter nameFilter32 = context28.getNameFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter33 = context28.getBeforeFilter();
        long long34 = context28.getFeatures();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter35 = null;
        context28.setValueFilter(valueFilter35);
        boolean boolean37 = context28.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(nameFilter32);
        org.junit.Assert.assertNull(beforeFilter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 34359804928L + "'", long34 == 34359804928L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray17);
        boolean boolean22 = jSONWriter20.isEnabled((long) (short) -1);
        jSONWriter20.writeNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter14 = null;
        context6.setAfterFilter(afterFilter14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter17 = null;
        context6.setContextNameFilter(contextNameFilter17);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(afterFilter16);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) (short) -1);
        boolean boolean13 = jSONWriter0.utf16;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        boolean boolean11 = jSONWriter0.hasFilter();
        java.math.BigInteger bigInteger12 = null;
        jSONWriter0.writeBigInt(bigInteger12, (long) ' ');
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter0.writeDouble(0.0d, decimalFormat16);
        jSONWriter0.writeInt32((int) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        jSONWriter0.writeDouble((double) (short) 10);
        java.util.Map map12 = null;
        jSONWriter0.write(map12);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable43 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49 };
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray50);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter44.isWriteMapTypeInfo((java.lang.Object) jSONWriter52, class53, 0L);
        boolean boolean56 = jSONWriter44.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter57.writeBooleanNull();
        byte[] byteArray59 = jSONWriter57.getBytes();
        jSONWriter44.writeNameRaw(byteArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray62 = new double[] {};
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter61.writeDouble(doubleArray62, decimalFormat63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray66 = new double[] {};
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter65.writeDouble(doubleArray66, decimalFormat67);
        jSONWriter61.writeDouble(doubleArray66);
        boolean boolean70 = jSONWriter61.isUTF16();
        java.lang.Class<?> wildcardClass71 = jSONWriter61.getClass();
        boolean boolean73 = jSONWriter23.isWriteTypeInfo((java.lang.Object) jSONWriter44, (java.lang.Class) wildcardClass71, (long) (short) 1);
        jSONWriter44.close();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider9 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        context6.config(featureArray16);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider19 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Path path20 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str21 = path20.toString();
        com.alibaba.fastjson2.JSONWriter.Path path23 = new com.alibaba.fastjson2.JSONWriter.Path(path20, "");
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        boolean boolean31 = context30.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId32 = context30.getZoneId();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context30.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context30.config(featureArray40);
        boolean boolean43 = path20.equals((java.lang.Object) featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider19, featureArray40);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(objectWriterProvider9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(objectWriterProvider19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$" + "'", str21, "$");
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.lang.Class class9 = null;
        jSONWriter7.checkAndWriteTypeName((java.lang.Object) (byte) 0, class9);
        jSONWriter7.writeColon();
        jSONWriter7.writeName((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls;
        jSONWriter7.writeEnum((java.lang.Enum) feature14);
        java.math.BigInteger bigInteger16 = null;
        jSONWriter7.writeBigInt(bigInteger16, (long) (byte) -1);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNulls));
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean8 = jSONWriter0.isWriteTypeInfo((java.lang.Object) featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        java.lang.Class class19 = null;
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) (byte) 0, class19);
        java.math.BigInteger bigInteger21 = null;
        jSONWriter17.writeBigInt(bigInteger21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter23.writeEnum((java.lang.Enum) feature25);
        boolean boolean27 = jSONWriter23.hasFilter();
        jSONWriter23.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter23.writeDouble(doubleArray40, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        jSONWriter47.writeDouble(doubleArray52);
        boolean boolean56 = jSONWriter47.isUTF16();
        java.lang.Class<?> wildcardClass57 = jSONWriter47.getClass();
        boolean boolean58 = jSONWriter17.isWriteTypeInfo((java.lang.Object) doubleArray40, (java.lang.Class) wildcardClass57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter9.writeDouble(doubleArray40, decimalFormat59);
        boolean boolean61 = jSONWriter9.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        boolean boolean11 = context6.isDateFormatHasDay();
        boolean boolean12 = context6.isDateFormatHasDay();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter13 = null;
        context6.setContextNameFilter(contextNameFilter13);
        boolean boolean16 = context6.isEnabled((long) '#');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        jSONWriter0.writeSymbol((int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        jSONWriter11.writeNameRaw(byteArray13);
        java.nio.charset.Charset charset15 = jSONWriter11.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter11.config(feature16, true);
        jSONWriter11.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        jSONWriter20.writeNull();
        java.lang.reflect.Type type25 = null;
        boolean boolean26 = jSONWriter20.isWriteTypeInfo((java.lang.Object) true, type25);
        jSONWriter11.popPath((java.lang.Object) boolean26);
        jSONWriter11.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        jSONWriter30.writeNameRaw(byteArray32);
        jSONWriter11.writeNameRaw(byteArray32);
        long long36 = jSONWriter11.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        java.lang.Class class49 = null;
        jSONWriter47.checkAndWriteTypeName((java.lang.Object) (byte) 0, class49);
        java.math.BigInteger bigInteger51 = null;
        jSONWriter47.writeBigInt(bigInteger51);
        java.lang.reflect.Type type53 = null;
        boolean boolean54 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter47, type53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter55.writeNameRaw(byteArray57);
        java.nio.charset.Charset charset59 = jSONWriter55.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter55.config(feature60, true);
        jSONWriter55.writeName("");
        boolean boolean65 = jSONWriter55.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj67 = null;
        boolean boolean68 = jSONWriter66.removeReference(obj67);
        char[] charArray72 = new char[] { '#', ' ', '#' };
        jSONWriter66.writeString(charArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj75 = null;
        boolean boolean76 = jSONWriter74.removeReference(obj75);
        jSONWriter74.writeNull();
        boolean boolean78 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter74);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        jSONWriter79.writeNameRaw(byteArray81);
        jSONWriter74.writeBinary(byteArray81);
        boolean boolean85 = jSONWriter55.writeTypeName(byteArray81, (long) (byte) 100);
        jSONWriter37.writeBinary(byteArray81);
        jSONWriter11.writeNameRaw(byteArray81);
        jSONWriter0.writeNameRaw(byteArray81);
        boolean boolean89 = jSONWriter0.isWriteNulls();
        java.lang.Enum enum90 = null;
        jSONWriter0.writeEnum(enum90);
        com.alibaba.fastjson2.JSONWriter jSONWriter92 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter92.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature94 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter92.writeEnum((java.lang.Enum) feature94);
        jSONWriter0.popPath((java.lang.Object) jSONWriter92);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1056L + "'", long36 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSONWriter92);
        org.junit.Assert.assertTrue("'" + feature94 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature94.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        java.math.BigDecimal bigDecimal3 = null;
        jSONWriter0.writeDecimal(bigDecimal3, 52L);
        java.util.UUID uUID6 = null;
        jSONWriter0.writeUUID(uUID6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        java.nio.charset.Charset charset16 = jSONWriter8.getCharset();
        boolean[] booleanArray17 = new boolean[] {};
        jSONWriter8.writeBool(booleanArray17);
        jSONWriter8.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj23 = null;
        boolean boolean24 = jSONWriter22.removeReference(obj23);
        long[] longArray28 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter22.writeInt64(longArray28);
        java.nio.charset.Charset charset30 = jSONWriter22.getCharset();
        boolean[] booleanArray31 = new boolean[] {};
        jSONWriter22.writeBool(booleanArray31);
        jSONWriter22.writeSymbol((int) (byte) 100);
        boolean boolean35 = jSONWriter21.isRefDetect((java.lang.Object) jSONWriter22);
        int int36 = jSONWriter21.level();
        long long38 = jSONWriter21.getFeatures((long) (-1));
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        boolean boolean46 = context45.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider47 = context45.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context49);
        jSONWriter50.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray54 = new double[] {};
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter53.writeDouble(doubleArray54, decimalFormat55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray58 = new double[] {};
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter57.writeDouble(doubleArray58, decimalFormat59);
        jSONWriter53.writeDouble(doubleArray58);
        boolean boolean62 = jSONWriter53.isUTF16();
        java.lang.Class<?> wildcardClass63 = jSONWriter53.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65, feature66, feature67, feature68, feature69 };
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray70);
        com.alibaba.fastjson2.JSONWriter.Context context72 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray70);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter75 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76 };
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        long long80 = jSONWriter78.getFeatures((long) (short) 100);
        boolean boolean81 = jSONWriter78.jsonb;
        java.lang.String str82 = jSONWriter74.setPath(fieldWriter75, (java.lang.Object) jSONWriter78);
        java.lang.Class<?> wildcardClass83 = jSONWriter78.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter84 = jSONWriter50.getObjectWriter((java.lang.reflect.Type) wildcardClass63, (java.lang.Class) wildcardClass83);
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) (-1), (java.lang.Class) wildcardClass63);
        jSONWriter0.writeInt64((long) 'a');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(objectWriter84);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        long long32 = context31.getFeatures();
        boolean boolean33 = context31.isDateFormatHasDay();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeName((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = null;
        context6.setAfterFilter(afterFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        jSONWriter0.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeRaw('#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.lang.Class class9 = null;
        jSONWriter7.checkAndWriteTypeName((java.lang.Object) (byte) 0, class9);
        java.math.BigInteger bigInteger11 = null;
        jSONWriter7.writeBigInt(bigInteger11);
        jSONWriter7.writeRaw('#', '4');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        java.time.LocalDateTime localDateTime43 = null;
        jSONWriter23.writeLocalDateTime(localDateTime43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49 };
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray50);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter52 = context51.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter53 = null;
        context51.setLabelFilter(labelFilter53);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider55 = context51.provider;
        boolean boolean57 = context51.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.of(context51);
        long long59 = jSONWriter58.getFeatures();
        jSONWriter23.startArray((java.lang.Object) long59, (int) (short) 0);
        jSONWriter23.writeNumberNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNull(afterFilter52);
        org.junit.Assert.assertNotNull(objectWriterProvider55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 34359804928L + "'", long59 == 34359804928L);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter8 = null;
        context6.setBeforeFilter(beforeFilter8);
        java.time.ZoneId zoneId10 = context6.getZoneId();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter11 = context6.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNull(contextNameFilter11);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 4);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$[0]");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        boolean boolean26 = jSONWriter14.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        boolean boolean36 = jSONWriter14.removeReference((java.lang.Object) featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray33);
        boolean boolean38 = path10.equals((java.lang.Object) context37);
        boolean boolean39 = context37.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        java.lang.Class class24 = null;
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) afterFilter23, class24);
        com.alibaba.fastjson2.JSONWriter.Context context26 = jSONWriter0.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(context26);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        boolean boolean53 = jSONWriter45.isWriteTypeInfo((java.lang.Object) featureArray51);
        context28.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.of(featureArray51);
        boolean boolean56 = jSONWriter55.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        jSONWriter10.writeFloat((float) 0);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter10.getContext();
        jSONWriter10.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = null;
        context31.setContextNameFilter(contextNameFilter32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context31, symbolTable34);
        boolean boolean36 = jSONWriter35.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context8.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12);
        context13.setDateFormat("hi!");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = null;
        context8.setContextValueFilter(contextValueFilter14);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeSymbol("");
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter17.writeDecimal(bigDecimal27, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        jSONWriter34.writeNameRaw(byteArray36);
        java.nio.charset.Charset charset38 = jSONWriter34.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter34.config(feature39, true);
        jSONWriter34.writeName("");
        boolean boolean44 = jSONWriter34.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        char[] charArray51 = new char[] { '#', ' ', '#' };
        jSONWriter45.writeString(charArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        jSONWriter53.writeNull();
        boolean boolean57 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter53);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        jSONWriter58.writeNameRaw(byteArray60);
        jSONWriter53.writeBinary(byteArray60);
        boolean boolean64 = jSONWriter34.writeTypeName(byteArray60, (long) (byte) 100);
        jSONWriter30.writeRaw(byteArray60);
        jSONWriter17.writeNameRaw(byteArray60, 1024L);
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter17.writeDouble((double) (-1.0f), decimalFormat69);
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature71, feature72, feature73, feature74, feature75 };
        com.alibaba.fastjson2.JSONWriter.Context context77 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray76);
        jSONWriter17.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context81 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider16, featureArray76);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter78);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        boolean boolean35 = jSONWriter9.hasFilter();
        jSONWriter9.startObject();
        boolean boolean37 = jSONWriter9.isRefDetect();
        double[] doubleArray38 = null;
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter9.writeDouble(doubleArray38, decimalFormat39);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.of(context13);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter14);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        java.text.DecimalFormat decimalFormat10 = null;
        jSONWriter0.writeFloat((float) '#', decimalFormat10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter12.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        java.util.Map map30 = null;
        jSONWriter25.write(map30);
        java.util.Map map32 = null;
        jSONWriter25.write(map32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = new double[] {};
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter34.writeDouble(doubleArray35, decimalFormat36);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter25.writeDouble(doubleArray35, decimalFormat38);
        boolean boolean40 = jSONWriter25.useSingleQuote;
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter12.isWriteMapTypeInfo((java.lang.Object) jSONWriter25, class41, (long) (short) -1);
        jSONWriter12.endObject();
        jSONWriter12.writeBooleanNull();
        jSONWriter12.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter48.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter48.writeEnum((java.lang.Enum) feature50);
        boolean boolean52 = jSONWriter48.hasFilter();
        jSONWriter48.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable55 = jSONWriter48.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable56 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable56);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58, feature59, feature60, feature61, feature62 };
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter57.isWriteMapTypeInfo((java.lang.Object) jSONWriter65, class66, 0L);
        java.lang.String[] strArray70 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        jSONWriter57.writeString((java.util.List<java.lang.String>) strList71);
        jSONWriter48.write((java.util.List) strList71);
        jSONWriter12.write((java.util.List) strList71);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList71);
        jSONWriter0.writeChar('4');
        boolean boolean79 = jSONWriter0.isBeanToArray();
        boolean boolean80 = jSONWriter0.isUTF16();
        int int81 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(symbolTable55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter45 = null;
        context28.setValueFilter(valueFilter45);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter47 = null;
        context28.setContextValueFilter(contextValueFilter47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(context28);
        java.io.Reader reader50 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter49.writeString(reader50);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: read string from reader error");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter49);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, (int) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Path path8 = new com.alibaba.fastjson2.JSONWriter.Path(path4, 4);
        com.alibaba.fastjson2.JSONWriter.Path path10 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "$[0]");
        com.alibaba.fastjson2.JSONWriter.Path path12 = new com.alibaba.fastjson2.JSONWriter.Path(path10, 100);
        java.lang.String str13 = path10.toString();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$.[100].$\\[0\\]" + "'", str13, "$.[100].$\\[0\\]");
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        java.lang.String str45 = context28.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = null;
        context28.setContextValueFilter(contextValueFilter46);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = null;
        context28.setAfterFilter(afterFilter48);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter50 = null;
        context28.setContextNameFilter(contextNameFilter50);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter10 = context9.getContextValueFilter();
        boolean boolean11 = context9.isDateFormatHasDay();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNull(contextValueFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        jSONWriter35.writeNameRaw(byteArray37);
        jSONWriter35.writeString("hi!");
        jSONWriter35.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47, feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        jSONWriter50.writeBooleanNull();
        jSONWriter50.writeComma();
        jSONWriter35.startArray((java.lang.Object) jSONWriter50, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature56, feature57, feature58, feature59, feature60 };
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray61);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter64 = null;
        context63.setBeforeFilter(beforeFilter64);
        boolean boolean66 = jSONWriter50.removeReference((java.lang.Object) context63);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        context63.config(featureArray73);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = null;
        context63.setLabelFilter(labelFilter78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature83 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature85 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray86 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature81, feature82, feature83, feature84, feature85 };
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray86);
        boolean boolean88 = jSONWriter80.isWriteTypeInfo((java.lang.Object) featureArray86);
        context63.config(featureArray86);
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray86);
        com.alibaba.fastjson2.JSONWriter.Context context91 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray86);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter92 = null;
        context91.setPropertyPreFilter(propertyPreFilter92);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature83.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature85.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSONWriter90);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = null;
        context6.setValueFilter(valueFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = context6.getPropertyFilter();
        boolean boolean14 = context6.isEnabled((long) 0);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(propertyFilter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(propertyFilter15);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        long[] longArray5 = new long[] {};
        jSONWriter2.writeInt64(longArray5);
        long long8 = jSONWriter2.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        long[] longArray15 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter9.writeInt64(longArray15);
        java.nio.charset.Charset charset17 = jSONWriter9.getCharset();
        boolean[] booleanArray18 = new boolean[] {};
        jSONWriter9.writeBool(booleanArray18);
        jSONWriter9.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        char[] charArray23 = null;
        jSONWriter9.writeString(charArray23, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray28 = new double[] {};
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter27.writeDouble(doubleArray28, decimalFormat29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray32 = new double[] {};
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter31.writeDouble(doubleArray32, decimalFormat33);
        jSONWriter27.writeDouble(doubleArray32);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter9.writeDouble(doubleArray32, decimalFormat36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        jSONWriter38.writeNull();
        java.time.LocalDate localDate42 = null;
        jSONWriter38.writeLocalDate(localDate42);
        java.time.LocalTime localTime44 = null;
        jSONWriter38.writeLocalTime(localTime44);
        jSONWriter38.close();
        boolean[] booleanArray53 = new boolean[] { false, false, false, true, false, false };
        jSONWriter38.writeBool(booleanArray53);
        jSONWriter9.writeBool(booleanArray53);
        jSONWriter2.writeBool(booleanArray53);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, false, false, true, false, false]");
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter19.isWriteTypeInfo((java.lang.Object) true, type24);
        jSONWriter10.popPath((java.lang.Object) boolean25);
        jSONWriter10.writeInt8((byte) 10);
        java.math.BigDecimal bigDecimal29 = null;
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter10.writeDecimal(bigDecimal29, (long) ' ', decimalFormat31);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        java.nio.charset.Charset charset41 = jSONWriter40.getCharset();
        java.lang.Class<?> wildcardClass42 = charset41.getClass();
        boolean boolean44 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter10, (java.lang.reflect.Type) wildcardClass42, (long) (short) -1);
        char[] charArray45 = null;
        jSONWriter10.writeString(charArray45, (int) (byte) 10, (int) '4', false);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeDoubleArray((double) 0.0f, (double) 34359804928L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        jSONWriter0.startObject();
        boolean boolean25 = jSONWriter0.isRefDetect();
        jSONWriter0.writeMillis(52L);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(featureArray34);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        com.alibaba.fastjson2.SymbolTable symbolTable38 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context37, symbolTable38);
        boolean boolean41 = jSONWriter39.isEnabled((long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        long[] longArray48 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter42.writeInt64(longArray48);
        boolean boolean51 = jSONWriter42.hasFilter(0L);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter42);
        jSONWriter42.writeInt64((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj56 = null;
        boolean boolean57 = jSONWriter55.removeReference(obj56);
        long[] longArray58 = new long[] {};
        jSONWriter55.writeInt64(longArray58);
        java.util.Map map60 = null;
        jSONWriter55.write(map60);
        java.util.Map map62 = null;
        jSONWriter55.write(map62);
        boolean boolean64 = jSONWriter55.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        long[] longArray71 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter65.writeInt64(longArray71);
        com.alibaba.fastjson2.JSONObject jSONObject73 = null;
        jSONWriter65.write(jSONObject73);
        java.lang.Class class76 = null;
        boolean boolean78 = jSONWriter65.isWriteTypeInfo((java.lang.Object) false, class76, (long) (short) -1);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter65.writeRaw(byteArray85);
        boolean boolean88 = jSONWriter55.isWriteTypeInfo((java.lang.Object) byteArray85, 0L);
        jSONWriter42.writeRaw(byteArray85);
        jSONWriter39.writeStringLatin1(byteArray85);
        jSONWriter0.writeHex(byteArray85);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter21);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray29);
        jSONWriter34.writeInt16((short) 10);
        boolean boolean37 = jSONWriter34.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38 };
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        jSONWriter40.writeFloat((float) (short) 0);
        long[] longArray43 = new long[] {};
        jSONWriter40.writeInt64(longArray43);
        long long46 = jSONWriter40.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter47.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter47.writeEnum((java.lang.Enum) feature49);
        boolean boolean51 = jSONWriter47.hasFilter();
        jSONWriter47.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable54 = jSONWriter47.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable55 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable55);
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57, feature58, feature59, feature60, feature61 };
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray62);
        java.lang.Class class65 = null;
        boolean boolean67 = jSONWriter56.isWriteMapTypeInfo((java.lang.Object) jSONWriter64, class65, 0L);
        java.lang.String[] strArray69 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        jSONWriter56.writeString((java.util.List<java.lang.String>) strList70);
        jSONWriter47.write((java.util.List) strList70);
        jSONWriter40.write((java.util.List) strList70);
        jSONWriter34.write((java.util.List) strList70);
        jSONWriter22.write((java.util.List) strList70);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 52L + "'", long46 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(symbolTable54);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3, feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        java.lang.Class class12 = null;
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) (byte) 0, class12);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter10.writeBigInt(bigInteger14);
        java.lang.reflect.Type type16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, type16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        jSONWriter18.writeNameRaw(byteArray20);
        java.nio.charset.Charset charset22 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter18.config(feature23, true);
        jSONWriter18.writeName("");
        boolean boolean28 = jSONWriter18.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        char[] charArray35 = new char[] { '#', ' ', '#' };
        jSONWriter29.writeString(charArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        boolean boolean41 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter37);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        jSONWriter42.writeNameRaw(byteArray44);
        jSONWriter37.writeBinary(byteArray44);
        boolean boolean48 = jSONWriter18.writeTypeName(byteArray44, (long) (byte) 100);
        jSONWriter0.writeBinary(byteArray44);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50, feature51, feature52, feature53, feature54 };
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        jSONWriter0.config(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter59);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeBool(false);
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter0.writeFloat(1.0f, decimalFormat11);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray16);
        jSONWriter19.writeComma();
        java.util.Map map21 = null;
        jSONWriter19.write(map21);
        boolean boolean23 = jSONWriter19.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter24.write(jSONObject32);
        java.lang.Class class35 = null;
        boolean boolean37 = jSONWriter24.isWriteTypeInfo((java.lang.Object) false, class35, (long) (short) -1);
        jSONWriter24.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        boolean boolean43 = jSONWriter40.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context44 = jSONWriter40.context;
        java.lang.String str45 = context44.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter46 = null;
        context44.setBeforeFilter(beforeFilter46);
        boolean boolean49 = jSONWriter24.isWriteTypeInfo((java.lang.Object) context44, (long) (short) 100);
        int[] intArray52 = new int[] { 1, 'a' };
        jSONWriter24.writeInt32(intArray52);
        jSONWriter19.writeInt32(intArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        boolean boolean62 = context61.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider63 = context61.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(context64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj67 = null;
        boolean boolean68 = jSONWriter66.removeReference(obj67);
        jSONWriter66.writeNull();
        java.math.BigDecimal bigDecimal70 = null;
        jSONWriter66.writeDecimal(bigDecimal70, 1L);
        char[] charArray77 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter66.writeString(charArray77, (int) (byte) 100, (int) (short) 0);
        jSONWriter65.writeString(charArray77, 4, 1, true);
        jSONWriter19.writeString(charArray77, 10, (-1));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(charArray77);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(context44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1, 97]");
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[4,  , a, 4]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        jSONWriter7.writeInt16((short) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        java.lang.String str39 = jSONWriter20.setPath((int) (short) -1, (java.lang.Object) charset38);
        byte[] byteArray40 = jSONWriter19.getBytes(charset38);
        jSONWriter7.writeHex(byteArray40);
        java.time.LocalDate localDate42 = null;
        jSONWriter7.writeLocalDate(localDate42);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        java.lang.Class class38 = null;
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) (byte) 0, class38);
        java.math.BigInteger bigInteger40 = null;
        jSONWriter36.writeBigInt(bigInteger40);
        java.lang.reflect.Type type42 = null;
        boolean boolean43 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter36, type42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        jSONWriter44.writeNameRaw(byteArray46);
        java.nio.charset.Charset charset48 = jSONWriter44.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter44.config(feature49, true);
        jSONWriter44.writeName("");
        boolean boolean54 = jSONWriter44.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj56 = null;
        boolean boolean57 = jSONWriter55.removeReference(obj56);
        char[] charArray61 = new char[] { '#', ' ', '#' };
        jSONWriter55.writeString(charArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj64 = null;
        boolean boolean65 = jSONWriter63.removeReference(obj64);
        jSONWriter63.writeNull();
        boolean boolean67 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        jSONWriter68.writeNameRaw(byteArray70);
        jSONWriter63.writeBinary(byteArray70);
        boolean boolean74 = jSONWriter44.writeTypeName(byteArray70, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray70);
        jSONWriter0.writeNameRaw(byteArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter77.writeBooleanNull();
        boolean boolean80 = jSONWriter77.isEnabled((long) (byte) 0);
        boolean boolean81 = jSONWriter77.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime82 = null;
        jSONWriter77.writeOffsetDateTime(offsetDateTime82);
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature85 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature86 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature87 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature88 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray89 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature84, feature85, feature86, feature87, feature88 };
        com.alibaba.fastjson2.JSONWriter.Context context90 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray89);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray89);
        com.alibaba.fastjson2.JSONWriter jSONWriter93 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context92);
        int[] intArray95 = new int[] { (-1) };
        jSONWriter93.writeInt32(intArray95);
        jSONWriter77.writeInt32(intArray95);
        jSONWriter0.writeInt32(intArray95);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature85.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature86 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature86.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature87 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature87.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature88 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature88.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray89);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = context31.getContextNameFilter();
        java.time.ZoneId zoneId33 = context31.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNull(contextNameFilter32);
        org.junit.Assert.assertNotNull(zoneId33);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context6.getBeforeFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = context6.getPropertyFilter();
        boolean boolean13 = context6.isDateFormatMillis();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertNull(propertyFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        java.math.BigInteger bigInteger25 = null;
        jSONWriter10.writeBigInt(bigInteger25, (long) 0);
        boolean boolean28 = jSONWriter10.isUTF8();
        java.time.ZonedDateTime zonedDateTime29 = null;
        jSONWriter10.writeZonedDateTime(zonedDateTime29);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName;
        boolean boolean32 = jSONWriter10.isWriteTypeInfo((java.lang.Object) feature31);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteThrowableClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        jSONWriter9.writeDateYYYMMDD8((int) (byte) 0, (int) (byte) 1, (int) (short) 10);
        jSONWriter9.writeRaw(' ', 'a');
        jSONWriter9.writeDouble((double) (short) -1);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray3);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = context5.getDateFormatter();
        boolean boolean7 = path0.equals((java.lang.Object) dateTimeFormatter6);
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$");
        com.alibaba.fastjson2.JSONWriter.Path path10 = path0.parent;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = path10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(path10);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.getContext();
        long long7 = jSONWriter0.getFeatures((long) (-1));
        com.alibaba.fastjson2.SymbolTable symbolTable8 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(symbolTable8);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context6.getBeforeFilter();
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter15 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean17 = context6.isEnabled(feature16);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter18 = context6.getPropertyPreFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(afterFilter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(propertyPreFilter18);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        jSONWriter22.startObject();
        java.nio.charset.Charset charset24 = jSONWriter22.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = jSONWriter12.getBytes(charset24);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: not support operator");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        char[] charArray29 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter0.writeString(charArray29, (int) (short) 10, (int) (short) 0, true);
        boolean boolean35 = jSONWriter0.hasFilter(10L);
        jSONWriter0.writeDateTime19((int) (short) 100, 0, (int) '#', (int) (short) -1, (int) (byte) -1, (int) (byte) 1);
        int int43 = jSONWriter0.size();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 15 + "'", int43 == 15);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        java.util.UUID uUID9 = null;
        jSONWriter8.writeUUID(uUID9);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter13 = null;
        context6.setPropertyFilter(propertyFilter13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.of(context6);
        jSONWriter15.writeInt8((byte) -1);
        jSONWriter15.writeChar(' ');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.JSONWriter.Context context1 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context9.provider;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter13 = null;
        context9.setContextValueFilter(contextValueFilter13);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter15 = null;
        context9.setContextValueFilter(contextValueFilter15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        jSONWriter1.writeString("hi!");
        jSONWriter1.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13, feature14 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray15);
        jSONWriter16.writeBooleanNull();
        jSONWriter16.writeComma();
        jSONWriter1.startArray((java.lang.Object) jSONWriter16, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26 };
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray27);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter30 = null;
        context29.setBeforeFilter(beforeFilter30);
        boolean boolean32 = jSONWriter16.removeReference((java.lang.Object) context29);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        context29.config(featureArray39);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        jSONWriter45.writeNameRaw(byteArray47);
        jSONWriter45.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature52, feature53, feature54, feature55, feature56 };
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        boolean boolean59 = context58.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId60 = context58.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter61 = context58.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter62 = context58.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context58.config(feature63, false);
        java.lang.String str66 = jSONWriter45.setPath("", (java.lang.Object) context58);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature67, feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.of(featureArray73);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        context58.config(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider44, featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray73);
        com.alibaba.fastjson2.JSONWriter.Context context81 = new com.alibaba.fastjson2.JSONWriter.Context("", featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneId60);
        org.junit.Assert.assertNull(afterFilter61);
        org.junit.Assert.assertNull(afterFilter62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(jSONWriter80);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter0.writeDecimal(bigDecimal16, 0L, decimalFormat18);
        java.math.BigInteger bigInteger20 = null;
        jSONWriter0.writeBigInt(bigInteger20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        char[] charArray44 = new char[] { '#', ' ', '#' };
        jSONWriter38.writeString(charArray44);
        java.lang.Class class46 = null;
        boolean boolean47 = jSONWriter30.isWriteTypeInfo((java.lang.Object) charArray44, class46);
        jSONWriter29.writeRaw(charArray44, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(charArray44);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        jSONWriter11.writeNameRaw(byteArray13);
        java.nio.charset.Charset charset15 = jSONWriter11.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter11.config(feature16, true);
        jSONWriter11.writeBool(false);
        jSONWriter11.writeName("$");
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter11.writeDecimal(bigDecimal23, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        jSONWriter26.writeNull();
        java.math.BigDecimal bigDecimal30 = null;
        jSONWriter26.writeDecimal(bigDecimal30, 1L);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter26.writeBigInt(bigInteger33);
        jSONWriter26.close();
        jSONWriter26.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter38.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter38.writeEnum((java.lang.Enum) feature40);
        boolean boolean42 = jSONWriter38.hasFilter();
        jSONWriter38.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        java.math.BigDecimal bigDecimal49 = null;
        jSONWriter45.writeDecimal(bigDecimal49, 1L);
        char[] charArray56 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter45.writeString(charArray56, (int) (byte) 100, (int) (short) 0);
        jSONWriter38.writeString(charArray56);
        jSONWriter26.writeString(charArray56);
        jSONWriter11.writeString(charArray56);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(charArray56, (int) (byte) -1, 9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4,  , a, 4]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        boolean boolean14 = jSONWriter0.utf8;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        boolean boolean8 = jSONWriter4.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14 };
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray15);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter18 = null;
        context17.setBeforeFilter(beforeFilter18);
        boolean boolean20 = context17.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray27 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25, feature26 };
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray27);
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray27);
        context17.config(featureArray27);
        jSONWriter4.config(featureArray27);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray27);
        jSONWriter32.writeArrayNull();
        jSONWriter32.writeDouble((double) 52L);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray27);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        int int17 = jSONWriter16.level();
        java.util.Map map18 = null;
        jSONWriter16.write(map18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter30.writeDecimal(bigDecimal34, 1L);
        java.math.BigInteger bigInteger37 = null;
        jSONWriter30.writeBigInt(bigInteger37);
        jSONWriter30.writeInt64((long) 0);
        boolean boolean42 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter30, (long) (byte) 1);
        java.time.LocalDate localDate43 = null;
        jSONWriter30.writeLocalDate(localDate43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSONWriter47.removeReference(obj48);
        long[] longArray53 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter47.writeInt64(longArray53);
        java.nio.charset.Charset charset55 = jSONWriter47.getCharset();
        boolean[] booleanArray56 = new boolean[] {};
        jSONWriter47.writeBool(booleanArray56);
        jSONWriter47.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter47);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        long[] longArray67 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter61.writeInt64(longArray67);
        java.nio.charset.Charset charset69 = jSONWriter61.getCharset();
        boolean[] booleanArray70 = new boolean[] {};
        jSONWriter61.writeBool(booleanArray70);
        jSONWriter61.writeSymbol((int) (byte) 100);
        boolean boolean74 = jSONWriter60.isRefDetect((java.lang.Object) jSONWriter61);
        int int75 = jSONWriter60.level();
        long long77 = jSONWriter60.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass78 = jSONWriter60.getClass();
        boolean boolean80 = jSONWriter30.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass78, (long) '4');
        jSONWriter4.checkAndWriteTypeName((java.lang.Object) jSONWriter16, (java.lang.Class) wildcardClass78);
        java.lang.Object obj82 = null;
        jSONWriter4.popPath(obj82);
        java.util.List list84 = null;
        jSONWriter4.write(list84);
        java.math.BigDecimal bigDecimal86 = null;
        jSONWriter4.writeDecimal(bigDecimal86, (long) 4);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        java.lang.String str30 = jSONWriter14.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray31 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray31);
        java.time.LocalTime localTime33 = null;
        jSONWriter14.writeLocalTime(localTime33);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        jSONWriter0.writeSymbol((int) (byte) -1);
        int int11 = jSONWriter0.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context18.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context18);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = new double[] {};
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter25.writeDouble(doubleArray26, decimalFormat27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray30 = new double[] {};
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter29.writeDouble(doubleArray30, decimalFormat31);
        jSONWriter25.writeDouble(doubleArray30);
        boolean boolean34 = jSONWriter25.isUTF16();
        java.lang.Class<?> wildcardClass35 = jSONWriter25.getClass();
        boolean boolean36 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter24, (java.lang.Class) wildcardClass35);
        byte[] byteArray37 = null;
        jSONWriter0.writeHex(byteArray37);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        short[] shortArray7 = new short[] { (byte) 100, (byte) 0, (short) -1, (short) 1, (short) -1, (byte) 10 };
        jSONWriter0.writeInt16(shortArray7);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateTimeISO8601((int) (short) -1, (int) (byte) -1, (int) (byte) 100, (int) '#', (-1), (int) (byte) 100, (int) (byte) 100, (int) 'a', true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[100, 0, -1, 1, -1, 10]");
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        boolean boolean6 = jSONWriter0.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter4.writeTypeName("$.[100].$\\[0\\]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        java.nio.charset.Charset charset18 = jSONWriter14.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter14.config(feature19, true);
        jSONWriter14.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        jSONWriter24.writeNull();
        java.math.BigDecimal bigDecimal28 = null;
        jSONWriter24.writeDecimal(bigDecimal28, 1L);
        java.math.BigInteger bigInteger31 = null;
        jSONWriter24.writeBigInt(bigInteger31);
        jSONWriter24.writeInt64((long) 0);
        boolean boolean36 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter24, (long) (byte) 1);
        jSONWriter14.writeName("$[0]");
        jSONWriter14.writeReference("");
        boolean boolean41 = jSONWriter1.containsReference((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray46 = new long[] {};
        jSONWriter43.writeInt64(longArray46);
        java.util.Map map48 = null;
        jSONWriter43.write(map48);
        java.util.Map map50 = null;
        jSONWriter43.write(map50);
        boolean boolean52 = jSONWriter43.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        jSONWriter53.writeNameRaw(byteArray55);
        java.nio.charset.Charset charset57 = jSONWriter53.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter53.config(feature58, true);
        jSONWriter53.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        jSONWriter62.writeNull();
        java.lang.reflect.Type type67 = null;
        boolean boolean68 = jSONWriter62.isWriteTypeInfo((java.lang.Object) true, type67);
        jSONWriter53.popPath((java.lang.Object) boolean68);
        jSONWriter53.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        jSONWriter72.writeNameRaw(byteArray74);
        jSONWriter53.writeNameRaw(byteArray74);
        long long78 = jSONWriter53.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter79 = null;
        java.lang.String str81 = jSONWriter53.setPath(fieldWriter79, (java.lang.Object) (-1.0f));
        long long82 = jSONWriter53.getFeatures();
        jSONWriter43.writeAny((java.lang.Object) long82);
        jSONWriter43.writeNull();
        java.lang.String str85 = jSONWriter1.setPath(fieldWriter42, (java.lang.Object) jSONWriter43);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1056L + "'", long78 == 1056L);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1024L + "'", long82 == 1024L);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        long[] longArray5 = new long[] { '#', '4', 1 };
        jSONWriter0.writeInt64(longArray5);
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter0.writeDecimal(bigDecimal7, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter19.isWriteTypeInfo((java.lang.Object) true, type24);
        jSONWriter10.popPath((java.lang.Object) boolean25);
        jSONWriter10.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        jSONWriter29.writeNameRaw(byteArray31);
        jSONWriter10.writeNameRaw(byteArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        long[] longArray40 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter34.writeInt64(longArray40);
        com.alibaba.fastjson2.JSONObject jSONObject42 = null;
        jSONWriter34.write(jSONObject42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        char[] charArray50 = new char[] { '#', ' ', '#' };
        jSONWriter44.writeString(charArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        jSONWriter52.writeNull();
        boolean boolean56 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        jSONWriter57.writeNameRaw(byteArray59);
        jSONWriter52.writeBinary(byteArray59);
        jSONWriter34.writeBinary(byteArray59);
        jSONWriter10.writeBinary(byteArray59);
        jSONWriter0.writeNameRaw(byteArray59);
        java.math.BigDecimal bigDecimal65 = null;
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter0.writeDecimal(bigDecimal65, (long) 6, decimalFormat67);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[35, 52, 1]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        boolean boolean35 = jSONWriter9.hasFilter();
        jSONWriter9.writeChar(' ');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        boolean boolean20 = jSONWriter15.useSingleQuote;
        jSONWriter15.writeDouble((double) (-1.0f));
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter30 = context29.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter31 = null;
        context29.setLabelFilter(labelFilter31);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider33 = context29.provider;
        boolean boolean35 = context29.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(context29);
        long long37 = jSONWriter36.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context38 = jSONWriter36.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean40 = context38.isEnabled(feature39);
        jSONWriter15.writeEnum((java.lang.Enum) feature39);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNull(afterFilter30);
        org.junit.Assert.assertNotNull(objectWriterProvider33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 34359804928L + "'", long37 == 34359804928L);
        org.junit.Assert.assertNotNull(context38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        boolean boolean35 = jSONWriter9.hasFilter();
        jSONWriter9.startObject();
        boolean boolean37 = jSONWriter9.isRefDetect();
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter9.writeDecimal(bigDecimal38, 32L);
        java.math.BigDecimal bigDecimal41 = null;
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter9.writeDecimal(bigDecimal41, (long) (byte) -1, decimalFormat43);
        jSONWriter9.writeDateYYYMMDD8((-1), (int) (short) 100, 0);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter0.writeDecimal(bigDecimal6, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = context15.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter17 = null;
        context15.setLabelFilter(labelFilter17);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider19 = context15.provider;
        boolean boolean21 = context15.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(context15);
        boolean boolean23 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) context15);
        boolean boolean24 = context15.isDateFormatMillis();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNull(afterFilter16);
        org.junit.Assert.assertNotNull(objectWriterProvider19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeDateTime14((int) ' ', (int) (byte) 100, (int) (short) 1, 2, (int) '4', (int) ' ');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter0.writeRaw(byteArray20);
        java.time.LocalTime localTime22 = null;
        jSONWriter0.writeLocalTime(localTime22);
        boolean boolean24 = jSONWriter0.isRefDetect();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        boolean boolean19 = jSONWriter16.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context20 = jSONWriter16.context;
        java.lang.String str21 = context20.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter22 = null;
        context20.setBeforeFilter(beforeFilter22);
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) context20, (long) (short) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context20);
        long long27 = context20.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(context20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        char[] charArray29 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter0.writeString(charArray29, (int) (short) 10, (int) (short) 0, true);
        boolean boolean35 = jSONWriter0.hasFilter(10L);
        byte[] byteArray36 = jSONWriter0.getBytes();
        jSONWriter0.writeDateTime14(0, (int) (short) 10, (int) (byte) 0, (int) (byte) 10, (int) ' ', 10);
        java.math.BigDecimal bigDecimal44 = null;
        jSONWriter0.writeDecimal(bigDecimal44);
        java.time.LocalDateTime localDateTime46 = null;
        jSONWriter0.writeLocalDateTime(localDateTime46);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-105, -1, -1, 10, -108, 73]");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = null;
        context6.setLabelFilter(labelFilter13);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter15 = null;
        context6.setAfterFilter(afterFilter15);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context6.getPropertyFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNull(propertyFilter17);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter4 = context3.getBeforeFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider5 = context3.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature6 };
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider5, featureArray7);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNull(beforeFilter4);
        org.junit.Assert.assertNotNull(objectWriterProvider5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter8);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        boolean boolean8 = jSONWriter7.isUseSingleQuotes();
        java.time.OffsetDateTime offsetDateTime9 = null;
        jSONWriter7.writeOffsetDateTime(offsetDateTime9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = jSONWriter7.flushTo(outputStream11);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: out is nulll");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        java.lang.String str57 = jSONWriter41.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray58 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray58);
        jSONWriter26.writeBool(booleanArray58);
        jSONWriter0.writeBool(booleanArray58);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3, feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        java.lang.Class class12 = null;
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) (byte) 0, class12);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter10.writeBigInt(bigInteger14);
        java.lang.reflect.Type type16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, type16);
        short[] shortArray19 = new short[] { (byte) 0 };
        jSONWriter10.writeInt16(shortArray19);
        jSONWriter10.writeRaw('a');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0]");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        boolean boolean13 = context6.isEnabled(0L);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = null;
        context6.setLabelFilter(labelFilter14);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = context6.getPropertyPreFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable17);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(propertyPreFilter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        boolean boolean11 = jSONWriter0.hasFilter();
        long long13 = jSONWriter0.getFeatures((long) (byte) 0);
        boolean boolean14 = jSONWriter0.utf8;
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter0.writeFloat((float) (short) 1, decimalFormat16);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1024L + "'", long13 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray17 = new long[] {};
        jSONWriter14.writeInt64(longArray17);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter14.config(feature19, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        jSONWriter14.config(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13, featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        java.math.BigInteger bigInteger6 = null;
        jSONWriter0.writeBigInt(bigInteger6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        java.lang.Class class20 = null;
        jSONWriter18.checkAndWriteTypeName((java.lang.Object) (byte) 0, class20);
        java.math.BigInteger bigInteger22 = null;
        jSONWriter18.writeBigInt(bigInteger22);
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter18, type24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean36 = jSONWriter26.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        char[] charArray43 = new char[] { '#', ' ', '#' };
        jSONWriter37.writeString(charArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        boolean boolean49 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        jSONWriter50.writeNameRaw(byteArray52);
        jSONWriter45.writeBinary(byteArray52);
        boolean boolean56 = jSONWriter26.writeTypeName(byteArray52, (long) (byte) 100);
        jSONWriter8.writeBinary(byteArray52);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray63 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature58, feature59, feature60, feature61, feature62 };
        com.alibaba.fastjson2.JSONWriter.Context context64 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray63);
        jSONWriter8.config(featureArray63);
        jSONWriter8.startObject();
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        jSONWriter68.writeNameRaw(byteArray70);
        java.nio.charset.Charset charset72 = jSONWriter68.getCharset();
        boolean boolean73 = jSONWriter8.isRefDetect((java.lang.Object) jSONWriter68);
        boolean boolean75 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8, 10L);
        java.math.BigDecimal bigDecimal76 = null;
        jSONWriter8.writeDecimal(bigDecimal76);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray63);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter19 = null;
        context17.setBeforeFilter(beforeFilter19);
        java.time.ZoneId zoneId21 = context17.getZoneId();
        jSONWriter1.setRootObject((java.lang.Object) zoneId21);
        boolean boolean23 = jSONWriter1.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        float[] floatArray4 = new float[] {};
        jSONWriter0.writeFloat(floatArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        jSONWriter6.writeNameRaw(byteArray8);
        java.nio.charset.Charset charset10 = jSONWriter6.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter6.config(feature11, true);
        jSONWriter6.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        jSONWriter16.writeNull();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter16.writeDecimal(bigDecimal20, 1L);
        java.math.BigInteger bigInteger23 = null;
        jSONWriter16.writeBigInt(bigInteger23);
        jSONWriter16.writeInt64((long) 0);
        boolean boolean28 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter16, (long) (byte) 1);
        jSONWriter16.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        boolean boolean36 = jSONWriter0.containsReference((java.lang.Object) 100);
        boolean boolean38 = jSONWriter0.hasFilter((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        char[] charArray35 = new char[] { '#', ' ', '#' };
        jSONWriter29.writeString(charArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        boolean boolean41 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter37);
        boolean boolean42 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter29);
        jSONWriter29.writeName("$.[100].hi\\![32]");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        java.io.OutputStream outputStream10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        boolean boolean22 = jSONWriter11.removeReference((java.lang.Object) jSONWriter14);
        java.nio.charset.Charset charset23 = jSONWriter11.getCharset();
        int int24 = jSONWriter8.flushTo(outputStream10, charset23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter25.writeEnum((java.lang.Enum) feature27);
        boolean boolean29 = jSONWriter25.hasFilter();
        jSONWriter25.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray35 = new long[] {};
        jSONWriter32.writeInt64(longArray35);
        java.util.Map map37 = null;
        jSONWriter32.write(map37);
        java.util.Map map39 = null;
        jSONWriter32.write(map39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter32.writeDouble(doubleArray42, decimalFormat45);
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter25.writeDouble(doubleArray42, decimalFormat47);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter8.writeDouble(doubleArray42, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray57 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51, feature52, feature53, feature54, feature55, feature56 };
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray57);
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray57);
        boolean boolean60 = context59.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter61 = context59.getPropertyFilter();
        boolean boolean62 = jSONWriter8.isRefDetect((java.lang.Object) context59);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(propertyFilter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        jSONWriter13.writeInt32(4);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter13.writeDouble((double) 100L, decimalFormat35);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature3, feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray9);
        java.lang.Class class12 = null;
        jSONWriter10.checkAndWriteTypeName((java.lang.Object) (byte) 0, class12);
        java.math.BigInteger bigInteger14 = null;
        jSONWriter10.writeBigInt(bigInteger14);
        java.lang.reflect.Type type16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, type16);
        jSONWriter0.writeInt16((short) 100);
        java.math.BigInteger bigInteger20 = null;
        jSONWriter0.writeBigInt(bigInteger20, 1056L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        boolean boolean12 = jSONWriter11.hasFilter();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        long long32 = context31.getFeatures();
        java.time.ZoneId zoneId33 = context31.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter34 = context31.getBeforeFilter();
        java.time.ZoneId zoneId35 = context31.getZoneId();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertNull(beforeFilter34);
        org.junit.Assert.assertNotNull(zoneId35);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8, feature9 };
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context13, symbolTable14);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context13.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        boolean boolean32 = jSONWriter17.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        jSONWriter17.config(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider16, featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray50 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49 };
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray50);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray50);
        java.lang.Class<?> wildcardClass55 = featureArray50.getClass();
        boolean boolean57 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter43, (java.lang.Class) wildcardClass55, (long) (short) -1);
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter43.containsReference(obj58);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter1.writeDecimal(bigDecimal18, 1L);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        jSONWriter22.writeString("hi!");
        jSONWriter22.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray36);
        jSONWriter37.writeBooleanNull();
        jSONWriter37.writeComma();
        jSONWriter22.startArray((java.lang.Object) jSONWriter37, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47 };
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray48);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter51 = null;
        context50.setBeforeFilter(beforeFilter51);
        boolean boolean53 = jSONWriter37.removeReference((java.lang.Object) context50);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        context50.config(featureArray60);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter65 = null;
        context50.setLabelFilter(labelFilter65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        boolean boolean75 = jSONWriter67.isWriteTypeInfo((java.lang.Object) featureArray73);
        context50.config(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        java.lang.String str78 = jSONWriter1.setPath(9, (java.lang.Object) featureArray73);
        jSONWriter1.endArray();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        jSONWriter0.popPath((java.lang.Object) (short) 10);
        java.time.LocalDateTime localDateTime23 = null;
        jSONWriter0.writeLocalDateTime(localDateTime23);
        jSONWriter0.startArray((int) (short) 0);
        jSONWriter0.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeBool(false);
        java.time.LocalTime localTime31 = null;
        jSONWriter0.writeLocalTime(localTime31);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter9.startObject();
        java.nio.charset.Charset charset11 = jSONWriter9.getCharset();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble((double) 10L, decimalFormat13);
        jSONWriter9.writeMillis((long) ' ');
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeName("");
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        java.lang.Class class19 = null;
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) (byte) 0, class19);
        java.math.BigInteger bigInteger21 = null;
        jSONWriter17.writeBigInt(bigInteger21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter23.writeEnum((java.lang.Enum) feature25);
        boolean boolean27 = jSONWriter23.hasFilter();
        jSONWriter23.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter23.writeDouble(doubleArray40, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        jSONWriter47.writeDouble(doubleArray52);
        boolean boolean56 = jSONWriter47.isUTF16();
        java.lang.Class<?> wildcardClass57 = jSONWriter47.getClass();
        boolean boolean58 = jSONWriter17.isWriteTypeInfo((java.lang.Object) doubleArray40, (java.lang.Class) wildcardClass57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        jSONWriter59.writeNameRaw(byteArray61);
        java.nio.charset.Charset charset63 = jSONWriter59.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter59.config(feature64, true);
        jSONWriter59.writeName("");
        boolean boolean69 = jSONWriter59.isWriteNulls();
        java.lang.Class<?> wildcardClass70 = jSONWriter59.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter71 = jSONWriter0.getObjectWriter((java.lang.reflect.Type) wildcardClass57, (java.lang.Class) wildcardClass70);
        boolean boolean73 = jSONWriter0.isEnabled((long) 4);
        jSONWriter0.writeMillis(1L);
        int int76 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(objectWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        long[] longArray43 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter37.writeInt64(longArray43);
        jSONWriter36.writeInt64(longArray43);
        java.math.BigDecimal bigDecimal46 = null;
        jSONWriter36.writeDecimal(bigDecimal46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        long[] longArray54 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter48.writeInt64(longArray54);
        java.nio.charset.Charset charset56 = jSONWriter48.getCharset();
        boolean[] booleanArray57 = new boolean[] {};
        jSONWriter48.writeBool(booleanArray57);
        boolean boolean60 = jSONWriter48.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61, feature62, feature63, feature64, feature65, feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        boolean boolean70 = jSONWriter48.removeReference((java.lang.Object) featureArray67);
        byte[] byteArray71 = jSONWriter48.getBytes();
        jSONWriter36.writeHex(byteArray71);
        boolean boolean74 = jSONWriter13.writeTypeName(byteArray71, (long) '#');
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj78 = null;
        boolean boolean79 = jSONWriter77.removeReference(obj78);
        long[] longArray83 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter77.writeInt64(longArray83);
        jSONWriter76.writeInt64(longArray83);
        jSONWriter13.writeInt64(longArray83);
        jSONWriter13.writeInt8((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[-1, -1, 10]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        com.alibaba.fastjson2.JSONObject jSONObject10 = null;
        jSONWriter9.write(jSONObject10);
        boolean boolean12 = jSONWriter0.removeReference((java.lang.Object) jSONWriter9);
        jSONWriter9.writeRaw((byte) 10);
        boolean boolean15 = jSONWriter9.useSingleQuote;
        char[] charArray17 = new char[] { 'a' };
        jSONWriter9.writeString(charArray17);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatUnixTime();
        boolean boolean14 = context6.isDateFormatHasHour();
        com.alibaba.fastjson2.filter.NameFilter nameFilter15 = null;
        context6.setNameFilter(nameFilter15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj5 = null;
        boolean boolean6 = jSONWriter4.removeReference(obj5);
        jSONWriter4.writeNull();
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 1L);
        jSONWriter4.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter12.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter12.writeEnum((java.lang.Enum) feature14);
        boolean boolean16 = jSONWriter12.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeSymbol("");
        java.math.BigDecimal bigDecimal27 = null;
        jSONWriter17.writeDecimal(bigDecimal27, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        jSONWriter34.writeNameRaw(byteArray36);
        java.nio.charset.Charset charset38 = jSONWriter34.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter34.config(feature39, true);
        jSONWriter34.writeName("");
        boolean boolean44 = jSONWriter34.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        char[] charArray51 = new char[] { '#', ' ', '#' };
        jSONWriter45.writeString(charArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        jSONWriter53.writeNull();
        boolean boolean57 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter53);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        jSONWriter58.writeNameRaw(byteArray60);
        jSONWriter53.writeBinary(byteArray60);
        boolean boolean64 = jSONWriter34.writeTypeName(byteArray60, (long) (byte) 100);
        jSONWriter30.writeRaw(byteArray60);
        jSONWriter17.writeNameRaw(byteArray60, 1024L);
        jSONWriter12.writeNameRaw(byteArray60, (long) 4);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj71 = null;
        boolean boolean72 = jSONWriter70.removeReference(obj71);
        long[] longArray73 = new long[] {};
        jSONWriter70.writeInt64(longArray73);
        java.util.Map map75 = null;
        jSONWriter70.write(map75);
        java.util.Map map77 = null;
        jSONWriter70.write(map77);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray80 = new double[] {};
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter79.writeDouble(doubleArray80, decimalFormat81);
        java.text.DecimalFormat decimalFormat83 = null;
        jSONWriter70.writeDouble(doubleArray80, decimalFormat83);
        boolean boolean85 = jSONWriter70.useSingleQuote;
        java.lang.Class class87 = null;
        boolean boolean88 = jSONWriter70.isWriteTypeInfo((java.lang.Object) false, class87);
        int[] intArray93 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter70.writeInt32(intArray93);
        boolean boolean96 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter70, 1024L);
        byte[] byteArray97 = jSONWriter12.getBytes();
        jSONWriter4.writeNameRaw(byteArray97);
        jSONWriter0.writeBinary(byteArray97);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[]");
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 10, 52, 100]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-81, 18, 100]");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter0.writeDecimal(bigDecimal13);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        char[] charArray16 = new char[] { '#', ' ', '#' };
        jSONWriter10.writeString(charArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter18.writeBinary(byteArray25);
        jSONWriter0.writeBinary(byteArray25);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNull(symbolTable31);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        jSONWriter25.close();
        java.math.BigInteger bigInteger27 = null;
        jSONWriter25.writeBigInt(bigInteger27);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        long[] longArray9 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter3.writeInt64(longArray9);
        java.nio.charset.Charset charset11 = jSONWriter3.getCharset();
        boolean boolean12 = path0.equals((java.lang.Object) charset11);
        com.alibaba.fastjson2.JSONWriter.Path path13 = path0.parent;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray20);
        boolean boolean23 = jSONWriter22.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        java.lang.String str26 = jSONWriter22.setPath((int) (short) 10, (java.lang.Object) feature25);
        boolean boolean27 = path0.equals((java.lang.Object) jSONWriter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter28.writeDouble((double) (byte) -1, decimalFormat42);
        java.lang.Class<?> wildcardClass44 = jSONWriter28.getClass();
        boolean boolean46 = jSONWriter22.isWriteTypeInfo((java.lang.Object) wildcardClass44, (long) 3);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11);
        jSONWriter1.close();
        jSONWriter1.writeBooleanNull();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        long[] longArray5 = new long[] {};
        jSONWriter2.writeInt64(longArray5);
        long long8 = jSONWriter2.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter9.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter9.writeEnum((java.lang.Enum) feature11);
        boolean boolean13 = jSONWriter9.hasFilter();
        jSONWriter9.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable16 = jSONWriter9.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable17);
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23 };
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray24);
        java.lang.Class class27 = null;
        boolean boolean29 = jSONWriter18.isWriteMapTypeInfo((java.lang.Object) jSONWriter26, class27, 0L);
        java.lang.String[] strArray31 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        jSONWriter18.writeString((java.util.List<java.lang.String>) strList32);
        jSONWriter9.write((java.util.List) strList32);
        jSONWriter2.write((java.util.List) strList32);
        boolean boolean37 = jSONWriter2.isUTF8();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(symbolTable16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(context6);
        long long14 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter13.getContext();
        jSONWriter13.writeDateTime14((int) (short) 0, (int) (short) 100, (int) (byte) 0, (int) (byte) 1, (int) (short) -1, (int) '#');
        boolean boolean24 = jSONWriter13.hasFilter((long) (-1));
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.flushTo(writer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter14.config(feature28, true);
        jSONWriter14.writeRaw((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        long[] longArray21 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter15.writeInt64(longArray21);
        java.nio.charset.Charset charset23 = jSONWriter15.getCharset();
        boolean[] booleanArray24 = new boolean[] {};
        jSONWriter15.writeBool(booleanArray24);
        boolean boolean27 = jSONWriter15.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(featureArray34);
        boolean boolean37 = jSONWriter15.removeReference((java.lang.Object) featureArray34);
        byte[] byteArray38 = jSONWriter15.getBytes();
        char[] charArray44 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter15.writeString(charArray44, (int) (short) 10, (int) (short) 0, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter49.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter49.writeEnum((java.lang.Enum) feature51);
        boolean boolean53 = jSONWriter49.hasFilter();
        com.alibaba.fastjson2.JSONObject jSONObject54 = null;
        jSONWriter49.write(jSONObject54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter56.writeBooleanNull();
        byte[] byteArray58 = jSONWriter56.getBytes();
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray60 = new double[] {};
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter59.writeDouble(doubleArray60, decimalFormat61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray64 = new double[] {};
        java.text.DecimalFormat decimalFormat65 = null;
        jSONWriter63.writeDouble(doubleArray64, decimalFormat65);
        jSONWriter59.writeDouble(doubleArray64);
        boolean boolean68 = jSONWriter59.isUTF16();
        java.lang.Class<?> wildcardClass69 = jSONWriter59.getClass();
        boolean boolean70 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter56, (java.lang.Class) wildcardClass69);
        boolean boolean71 = jSONWriter0.isWriteTypeInfo((java.lang.Object) (short) 0, (java.lang.reflect.Type) wildcardClass69);
        boolean boolean72 = jSONWriter0.isWriteNulls();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ ,  , a, #, #]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter0.utf8;
        jSONWriter0.writeSymbol((int) '4');
        java.time.ZonedDateTime zonedDateTime19 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime19);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray3 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2 };
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray3);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = context5.getDateFormatter();
        boolean boolean7 = path0.equals((java.lang.Object) dateTimeFormatter6);
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$");
        java.lang.String str10 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path11 = path0.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray3);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$" + "'", str10, "$");
        org.junit.Assert.assertNull(path11);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        jSONWriter1.close();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        char[] charArray23 = new char[] { '#', ' ', '#' };
        jSONWriter17.writeString(charArray23);
        boolean boolean25 = jSONWriter14.removeReference((java.lang.Object) jSONWriter17);
        java.lang.String str26 = jSONWriter0.setPath((int) '#', (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        jSONWriter36.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray45 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter39.writeInt64(longArray45);
        java.nio.charset.Charset charset47 = jSONWriter39.getCharset();
        jSONWriter39.writeSymbol((int) (byte) -1);
        int int50 = jSONWriter39.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51, feature52, feature53, feature54, feature55 };
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        boolean boolean58 = context57.isFormatyyyyMMddhhmmss19();
        boolean boolean60 = context57.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter61 = null;
        context57.setPropertyPreFilter(propertyPreFilter61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.of(context57);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray65 = new double[] {};
        java.text.DecimalFormat decimalFormat66 = null;
        jSONWriter64.writeDouble(doubleArray65, decimalFormat66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray69 = new double[] {};
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter68.writeDouble(doubleArray69, decimalFormat70);
        jSONWriter64.writeDouble(doubleArray69);
        boolean boolean73 = jSONWriter64.isUTF16();
        java.lang.Class<?> wildcardClass74 = jSONWriter64.getClass();
        boolean boolean75 = jSONWriter39.isWriteTypeInfo((java.lang.Object) jSONWriter63, (java.lang.Class) wildcardClass74);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter76 = jSONWriter36.getObjectWriter((java.lang.Class) wildcardClass74);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter77 = jSONWriter14.getObjectWriter((java.lang.Class) wildcardClass74);
        boolean boolean78 = jSONWriter14.utf16;
        java.math.BigDecimal bigDecimal79 = null;
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter14.writeDecimal(bigDecimal79, (long) 10, decimalFormat81);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectWriter76);
        org.junit.Assert.assertNotNull(objectWriter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj23 = null;
        boolean boolean24 = jSONWriter22.removeReference(obj23);
        jSONWriter22.writeNull();
        boolean boolean26 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        jSONWriter27.writeNameRaw(byteArray29);
        jSONWriter22.writeBinary(byteArray29);
        jSONWriter0.writeBinary(byteArray29);
        byte[] byteArray33 = null;
        jSONWriter0.writeHex(byteArray33);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        boolean boolean28 = jSONWriter13.utf8;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.writeBooleanNull();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        jSONWriter5.writeNameRaw(byteArray7);
        java.nio.charset.Charset charset9 = jSONWriter5.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter5.config(feature10, true);
        jSONWriter5.writeSymbol("");
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter5.writeDecimal(bigDecimal15, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeName("");
        boolean boolean32 = jSONWriter22.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        char[] charArray39 = new char[] { '#', ' ', '#' };
        jSONWriter33.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        jSONWriter41.writeNull();
        boolean boolean45 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter41.writeBinary(byteArray48);
        boolean boolean52 = jSONWriter22.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter18.writeRaw(byteArray48);
        jSONWriter5.writeNameRaw(byteArray48, 1024L);
        jSONWriter0.writeNameRaw(byteArray48, (long) 4);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        long[] longArray61 = new long[] {};
        jSONWriter58.writeInt64(longArray61);
        java.util.Map map63 = null;
        jSONWriter58.write(map63);
        java.util.Map map65 = null;
        jSONWriter58.write(map65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray68 = new double[] {};
        java.text.DecimalFormat decimalFormat69 = null;
        jSONWriter67.writeDouble(doubleArray68, decimalFormat69);
        java.text.DecimalFormat decimalFormat71 = null;
        jSONWriter58.writeDouble(doubleArray68, decimalFormat71);
        boolean boolean73 = jSONWriter58.useSingleQuote;
        java.lang.Class class75 = null;
        boolean boolean76 = jSONWriter58.isWriteTypeInfo((java.lang.Object) false, class75);
        int[] intArray81 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter58.writeInt32(intArray81);
        boolean boolean84 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter58, 1024L);
        com.alibaba.fastjson2.SymbolTable symbolTable85 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeSymbol("$");
        long long89 = jSONWriter0.getFeatures((long) (short) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 10, 52, 100]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(symbolTable85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        jSONWriter35.writeNameRaw(byteArray37);
        jSONWriter35.writeString("hi!");
        jSONWriter35.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47, feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        jSONWriter50.writeBooleanNull();
        jSONWriter50.writeComma();
        jSONWriter35.startArray((java.lang.Object) jSONWriter50, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature56, feature57, feature58, feature59, feature60 };
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray61);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray61);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter64 = null;
        context63.setBeforeFilter(beforeFilter64);
        boolean boolean66 = jSONWriter50.removeReference((java.lang.Object) context63);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        com.alibaba.fastjson2.JSONWriter.Context context75 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        context63.config(featureArray73);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter78 = null;
        context63.setLabelFilter(labelFilter78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature83 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature85 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray86 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature81, feature82, feature83, feature84, feature85 };
        com.alibaba.fastjson2.JSONWriter.Context context87 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray86);
        boolean boolean88 = jSONWriter80.isWriteTypeInfo((java.lang.Object) featureArray86);
        context63.config(featureArray86);
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray86);
        com.alibaba.fastjson2.JSONWriter.Context context91 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray86);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray86);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature83.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature85.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSONWriter90);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        jSONWriter0.writeRaw((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter17.writeBigInt(bigInteger32, (long) (short) -1);
        boolean boolean35 = jSONWriter0.removeReference((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray43);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context45.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(context45);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable49);
        jSONWriter50.writeInt8((byte) 100);
        java.lang.String str53 = jSONWriter0.setPath("$", (java.lang.Object) jSONWriter50);
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter50.isRefDetect(obj54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        jSONWriter56.writeString("hi!");
        com.alibaba.fastjson2.JSONObject jSONObject62 = null;
        jSONWriter56.write(jSONObject62);
        java.util.UUID uUID64 = null;
        jSONWriter56.writeUUID(uUID64);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter66 = null;
        java.lang.Object obj67 = null;
        java.lang.String str68 = jSONWriter56.setPath(fieldWriter66, obj67);
        java.math.BigInteger bigInteger69 = null;
        jSONWriter56.writeBigInt(bigInteger69);
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter71.writeBooleanNull();
        boolean boolean74 = jSONWriter71.isEnabled((long) (byte) 0);
        boolean boolean75 = jSONWriter71.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj77 = null;
        boolean boolean78 = jSONWriter76.removeReference(obj77);
        long[] longArray82 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter76.writeInt64(longArray82);
        java.nio.charset.Charset charset84 = jSONWriter76.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter85.writeBooleanNull();
        byte[] byteArray87 = jSONWriter85.getBytes();
        jSONWriter76.writeRaw(byteArray87);
        jSONWriter71.writeNameRaw(byteArray87, 1L);
        jSONWriter56.writeHex(byteArray87);
        jSONWriter50.writeNameRaw(byteArray87);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-81]");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeComma();
        java.util.Map map6 = null;
        jSONWriter4.write(map6);
        boolean boolean8 = jSONWriter4.jsonb;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        jSONWriter13.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        long[] longArray19 = new long[] {};
        jSONWriter16.writeInt64(longArray19);
        java.util.Map map21 = null;
        jSONWriter16.write(map21);
        java.util.Map map23 = null;
        jSONWriter16.write(map23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray26 = new double[] {};
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter25.writeDouble(doubleArray26, decimalFormat27);
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter16.writeDouble(doubleArray26, decimalFormat29);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter13.writeDouble(doubleArray26, decimalFormat31);
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = jSONWriter13.flushTo(outputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.lang.Class class9 = null;
        jSONWriter7.checkAndWriteTypeName((java.lang.Object) (byte) 0, class9);
        jSONWriter7.writeName("$.[100].$\\[0\\]");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        char[] charArray16 = new char[] { '#', ' ', '#' };
        jSONWriter10.writeString(charArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter18.writeBinary(byteArray25);
        jSONWriter0.writeBinary(byteArray25);
        java.math.BigInteger bigInteger29 = null;
        jSONWriter0.writeBigInt(bigInteger29);
        jSONWriter0.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter9.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        jSONWriter12.writeSymbol((int) (byte) -1);
        int int23 = jSONWriter12.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        boolean boolean31 = context30.isFormatyyyyMMddhhmmss19();
        boolean boolean33 = context30.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = null;
        context30.setPropertyPreFilter(propertyPreFilter34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray38 = new double[] {};
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter37.writeDouble(doubleArray38, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        jSONWriter37.writeDouble(doubleArray42);
        boolean boolean46 = jSONWriter37.isUTF16();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        boolean boolean48 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter36, (java.lang.Class) wildcardClass47);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter49 = jSONWriter9.getObjectWriter((java.lang.Class) wildcardClass47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        java.time.LocalDateTime localDateTime51 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeLocalDateTime(localDateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objectWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context6.setPropertyFilter(propertyFilter8);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter10 = null;
        context6.setLabelFilter(labelFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        java.nio.charset.Charset charset13 = jSONWriter12.getCharset();
        byte[] byteArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeBase64(byteArray14);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        jSONWriter0.config(featureArray14);
        jSONWriter0.writeRaw((byte) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        char[] charArray26 = new char[] { '#', ' ', '#' };
        jSONWriter20.writeString(charArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        jSONWriter28.writeNull();
        boolean boolean32 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter28);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        jSONWriter28.writeBinary(byteArray35);
        jSONWriter0.writeStringLatin1(byteArray35);
        float[] floatArray39 = null;
        jSONWriter0.writeFloat(floatArray39);
        com.alibaba.fastjson2.SymbolTable symbolTable41 = jSONWriter0.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable42 = jSONWriter0.getSymbolTable();
        boolean boolean43 = jSONWriter0.isIgnoreErrorGetter();
        boolean boolean44 = jSONWriter0.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNull(symbolTable41);
        org.junit.Assert.assertNull(symbolTable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = null;
        context8.setAfterFilter(afterFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context8.setPropertyFilter(propertyFilter12);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter14 = context8.getContextNameFilter();
        long long15 = context8.getFeatures();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(contextNameFilter14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 34359804928L + "'", long15 == 34359804928L);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.lang.Class class9 = null;
        jSONWriter7.checkAndWriteTypeName((java.lang.Object) (byte) 0, class9);
        java.math.BigInteger bigInteger11 = null;
        jSONWriter7.writeBigInt(bigInteger11);
        java.math.BigInteger bigInteger13 = null;
        jSONWriter7.writeBigInt(bigInteger13, 34359804928L);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter.Context context29 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        boolean boolean30 = context29.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context29.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context33);
        jSONWriter34.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray38 = new double[] {};
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter37.writeDouble(doubleArray38, decimalFormat39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        jSONWriter37.writeDouble(doubleArray42);
        boolean boolean46 = jSONWriter37.isUTF16();
        java.lang.Class<?> wildcardClass47 = jSONWriter37.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter59 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray61);
        long long64 = jSONWriter62.getFeatures((long) (short) 100);
        boolean boolean65 = jSONWriter62.jsonb;
        java.lang.String str66 = jSONWriter58.setPath(fieldWriter59, (java.lang.Object) jSONWriter62);
        java.lang.Class<?> wildcardClass67 = jSONWriter62.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter68 = jSONWriter34.getObjectWriter((java.lang.reflect.Type) wildcardClass47, (java.lang.Class) wildcardClass67);
        boolean boolean70 = jSONWriter0.isWriteTypeInfo((java.lang.Object) "hi!", (java.lang.reflect.Type) wildcardClass67, (long) (short) 100);
        jSONWriter0.endArray();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(objectWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = null;
        context6.setAfterFilter(afterFilter13);
        boolean boolean15 = context6.isDateFormatISO8601();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter16 = null;
        context6.setPropertyFilter(propertyFilter16);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        jSONWriter5.writeNameRaw(byteArray7);
        java.nio.charset.Charset charset9 = jSONWriter5.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter5.config(feature10, true);
        jSONWriter5.writeSymbol("");
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter5.writeDecimal(bigDecimal15, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeName("");
        boolean boolean32 = jSONWriter22.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        char[] charArray39 = new char[] { '#', ' ', '#' };
        jSONWriter33.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        jSONWriter41.writeNull();
        boolean boolean45 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter41.writeBinary(byteArray48);
        boolean boolean52 = jSONWriter22.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter18.writeRaw(byteArray48);
        jSONWriter5.writeNameRaw(byteArray48, 1024L);
        jSONWriter0.writeNameRaw(byteArray48, (long) 4);
        boolean boolean58 = jSONWriter0.useSingleQuote;
        java.io.Writer writer59 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.flushTo(writer59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean52 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) feature51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        jSONWriter53.writeNameRaw(byteArray55);
        java.nio.charset.Charset charset57 = jSONWriter53.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter53.config(feature58, true);
        jSONWriter53.writeSymbol("");
        jSONWriter53.startObject();
        boolean boolean64 = jSONWriter53.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72, feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray74);
        java.lang.Class class77 = null;
        jSONWriter75.checkAndWriteTypeName((java.lang.Object) (byte) 0, class77);
        java.math.BigInteger bigInteger79 = null;
        jSONWriter75.writeBigInt(bigInteger79);
        java.lang.reflect.Type type81 = null;
        boolean boolean82 = jSONWriter65.isWriteTypeInfo((java.lang.Object) jSONWriter75, type81);
        short[] shortArray84 = new short[] { (byte) 0 };
        jSONWriter75.writeInt16(shortArray84);
        jSONWriter53.writeInt16(shortArray84);
        jSONWriter0.writeInt16(shortArray84);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName(52L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[0]");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        boolean boolean26 = jSONWriter10.hasFilter();
        boolean boolean27 = jSONWriter10.useSingleQuote;
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter28 = null;
        java.lang.String str30 = jSONWriter10.setPath(fieldWriter28, (java.lang.Object) 9);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter32 = null;
        context31.setContextNameFilter(contextNameFilter32);
        com.alibaba.fastjson2.SymbolTable symbolTable34 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context31, symbolTable34);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter35.writeName((long) '#');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj5 = null;
        boolean boolean6 = jSONWriter4.removeReference(obj5);
        jSONWriter4.writeNull();
        java.math.BigDecimal bigDecimal8 = null;
        jSONWriter4.writeDecimal(bigDecimal8, 1L);
        char[] charArray15 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter4.writeString(charArray15, (int) (byte) 100, (int) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        java.nio.charset.Charset charset23 = jSONWriter19.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter19.config(feature24, true);
        jSONWriter19.writeSymbol("");
        boolean boolean29 = jSONWriter19.isWriteNulls();
        boolean boolean30 = jSONWriter4.containsReference((java.lang.Object) boolean29);
        boolean boolean31 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter4);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) 1056L, (double) 1056L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4,  , a, 4]");
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        boolean boolean11 = jSONWriter0.hasFilter(34359804928L);
        com.alibaba.fastjson2.JSONObject jSONObject12 = null;
        jSONWriter0.write(jSONObject12);
        byte[] byteArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        boolean boolean28 = jSONWriter13.utf8;
        jSONWriter13.writeInt8((byte) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter38 = context37.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = null;
        context37.setLabelFilter(labelFilter39);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter41 = null;
        context37.setPropertyPreFilter(propertyPreFilter41);
        boolean boolean44 = context37.isEnabled((long) 4);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context37.config(feature45, true);
        jSONWriter13.writeEnum((java.lang.Enum) feature45);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNull(afterFilter38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        java.time.LocalDate localDate13 = null;
        jSONWriter0.writeLocalDate(localDate13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray31 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter25.writeInt64(longArray31);
        java.nio.charset.Charset charset33 = jSONWriter25.getCharset();
        java.lang.String str34 = jSONWriter15.setPath((int) (short) -1, (java.lang.Object) charset33);
        jSONWriter0.writeAny((java.lang.Object) str34);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(' ', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeNumberNull();
        java.time.OffsetDateTime offsetDateTime30 = null;
        jSONWriter0.writeOffsetDateTime(offsetDateTime30);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        boolean boolean13 = context6.isEnabled(0L);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = null;
        context6.setLabelFilter(labelFilter14);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = null;
        context6.setPropertyPreFilter(propertyPreFilter16);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray19 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter13.writeInt64(longArray19);
        java.nio.charset.Charset charset21 = jSONWriter13.getCharset();
        boolean[] booleanArray22 = new boolean[] {};
        jSONWriter13.writeBool(booleanArray22);
        boolean boolean25 = jSONWriter13.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.of(featureArray32);
        boolean boolean35 = jSONWriter13.removeReference((java.lang.Object) featureArray32);
        byte[] byteArray36 = jSONWriter13.getBytes();
        jSONWriter1.writeHex(byteArray36);
        jSONWriter1.writeBool(false);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString;
        jSONWriter1.config(feature40, true);
        boolean boolean44 = jSONWriter1.isEnabled((long) 6);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteEnumUsingToString));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        jSONWriter9.startObject();
        boolean boolean35 = jSONWriter9.hasFilter();
        jSONWriter9.startObject();
        boolean boolean37 = jSONWriter9.isRefDetect();
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter9.writeDecimal(bigDecimal38, 32L);
        jSONWriter9.writeBool(true);
        jSONWriter9.writeSymbol("$[0].hi\\!.$");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean19 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        jSONWriter29.writeNull();
        java.lang.reflect.Type type34 = null;
        boolean boolean35 = jSONWriter29.isWriteTypeInfo((java.lang.Object) true, type34);
        jSONWriter20.popPath((java.lang.Object) boolean35);
        jSONWriter20.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        jSONWriter39.writeNameRaw(byteArray41);
        jSONWriter20.writeNameRaw(byteArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray50 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter44.writeInt64(longArray50);
        com.alibaba.fastjson2.JSONObject jSONObject52 = null;
        jSONWriter44.write(jSONObject52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        char[] charArray60 = new char[] { '#', ' ', '#' };
        jSONWriter54.writeString(charArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        jSONWriter62.writeNull();
        boolean boolean66 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter62);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        jSONWriter67.writeNameRaw(byteArray69);
        jSONWriter62.writeBinary(byteArray69);
        jSONWriter44.writeBinary(byteArray69);
        jSONWriter20.writeBinary(byteArray69);
        jSONWriter0.writeNameRaw(byteArray69);
        com.alibaba.fastjson2.SymbolTable symbolTable75 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertNull(symbolTable75);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter13.writeBooleanNull();
        boolean boolean16 = jSONWriter13.isEnabled((long) (byte) 0);
        boolean boolean17 = jSONWriter13.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        long[] longArray24 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter18.writeInt64(longArray24);
        java.nio.charset.Charset charset26 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter27.writeBooleanNull();
        byte[] byteArray29 = jSONWriter27.getBytes();
        jSONWriter18.writeRaw(byteArray29);
        jSONWriter13.writeNameRaw(byteArray29, 1L);
        jSONWriter1.writeHex(byteArray29);
        jSONWriter1.writeTypeName("$");
        com.alibaba.fastjson2.SymbolTable symbolTable36 = jSONWriter1.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-81]");
        org.junit.Assert.assertNull(symbolTable36);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context6.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter19 = null;
        context6.setPropertyFilter(propertyFilter19);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(propertyFilter15);
        org.junit.Assert.assertNull(valueFilter18);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        byte[] byteArray2 = jSONWriter0.getBytes();
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        long[] longArray9 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter3.writeInt64(longArray9);
        java.nio.charset.Charset charset11 = jSONWriter3.getCharset();
        boolean[] booleanArray12 = new boolean[] {};
        jSONWriter3.writeBool(booleanArray12);
        boolean boolean15 = jSONWriter3.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(featureArray22);
        boolean boolean25 = jSONWriter3.removeReference((java.lang.Object) featureArray22);
        byte[] byteArray26 = jSONWriter3.getBytes();
        boolean boolean27 = jSONWriter0.isRefDetect((java.lang.Object) jSONWriter3);
        long long28 = jSONWriter0.getFeatures();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateTimeISO8601((int) 'a', (int) 'a', 4, (int) (byte) 0, (int) '#', 1, (int) (byte) 1, (int) (short) 100, false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        boolean boolean9 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeReference("$[0]");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        java.nio.charset.Charset charset17 = jSONWriter13.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        jSONWriter18.writeDouble(doubleArray23);
        boolean boolean27 = jSONWriter18.isUTF16();
        java.lang.Class<?> wildcardClass28 = jSONWriter18.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter29 = jSONWriter13.getObjectWriter((java.lang.Class) wildcardClass28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter30.writeBooleanNull();
        boolean boolean33 = jSONWriter30.isEnabled((long) (byte) 0);
        boolean boolean34 = jSONWriter30.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime35 = null;
        jSONWriter30.writeOffsetDateTime(offsetDateTime35);
        jSONWriter13.writeAny((java.lang.Object) offsetDateTime35);
        com.alibaba.fastjson2.JSONObject jSONObject38 = null;
        jSONWriter13.write(jSONObject38);
        jSONWriter0.popPath((java.lang.Object) jSONWriter13);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        boolean boolean49 = context48.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId50 = context48.getZoneId();
        boolean boolean52 = context48.isEnabled(0L);
        com.alibaba.fastjson2.filter.NameFilter nameFilter53 = null;
        context48.setNameFilter(nameFilter53);
        com.alibaba.fastjson2.JSONWriter.Path path55 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str56 = path55.toString();
        com.alibaba.fastjson2.JSONWriter.Path path58 = new com.alibaba.fastjson2.JSONWriter.Path(path55, "");
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature59, feature60, feature61, feature62, feature63 };
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray64);
        boolean boolean66 = context65.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId67 = context65.getZoneId();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider68 = context65.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature69, feature70, feature71, feature72, feature73, feature74 };
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray75);
        context65.config(featureArray75);
        boolean boolean78 = path55.equals((java.lang.Object) featureArray75);
        context48.config(featureArray75);
        java.lang.String str80 = jSONWriter13.setPath("$.[100].$\\[0\\]", (java.lang.Object) context48);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objectWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(zoneId50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "$" + "'", str56, "$");
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zoneId67);
        org.junit.Assert.assertNotNull(objectWriterProvider68);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context8);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = null;
        context8.setAfterFilter(afterFilter13);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter14.config(feature28, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36 };
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray37);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray37);
        jSONWriter40.writeSymbol("hi!");
        boolean boolean44 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter40, (long) 10);
        jSONWriter40.writeRaw('4', '#');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, "$.[100][4]");
        java.lang.String str12 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path13 = path6.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$.[100].hi\\!" + "'", str12, "$.[100].hi\\!");
        org.junit.Assert.assertNotNull(path13);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeBool(false);
        jSONWriter0.writeName("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter12.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray28 = new long[] {};
        jSONWriter25.writeInt64(longArray28);
        java.util.Map map30 = null;
        jSONWriter25.write(map30);
        java.util.Map map32 = null;
        jSONWriter25.write(map32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray35 = new double[] {};
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter34.writeDouble(doubleArray35, decimalFormat36);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter25.writeDouble(doubleArray35, decimalFormat38);
        boolean boolean40 = jSONWriter25.useSingleQuote;
        java.lang.Class class41 = null;
        boolean boolean43 = jSONWriter12.isWriteMapTypeInfo((java.lang.Object) jSONWriter25, class41, (long) (short) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray50 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter44.writeInt64(longArray50);
        java.nio.charset.Charset charset52 = jSONWriter44.getCharset();
        boolean[] booleanArray53 = new boolean[] {};
        jSONWriter44.writeBool(booleanArray53);
        jSONWriter44.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        long[] longArray60 = new long[] {};
        jSONWriter57.writeInt64(longArray60);
        java.util.Map map62 = null;
        jSONWriter57.write(map62);
        java.util.Map map64 = null;
        jSONWriter57.write(map64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray67 = new double[] {};
        java.text.DecimalFormat decimalFormat68 = null;
        jSONWriter66.writeDouble(doubleArray67, decimalFormat68);
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter57.writeDouble(doubleArray67, decimalFormat70);
        boolean boolean72 = jSONWriter57.useSingleQuote;
        java.lang.Class class73 = null;
        boolean boolean75 = jSONWriter44.isWriteMapTypeInfo((java.lang.Object) jSONWriter57, class73, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject76 = null;
        jSONWriter57.write(jSONObject76);
        float[] floatArray80 = new float[] { '4', '4' };
        jSONWriter57.writeFloat(floatArray80);
        jSONWriter12.writeFloat(floatArray80);
        java.text.DecimalFormat decimalFormat83 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeFloat(floatArray80, decimalFormat83);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[]");
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[52.0, 52.0]");
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        java.nio.charset.Charset charset17 = jSONWriter13.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter13.config(feature18, true);
        jSONWriter13.writeSymbol("");
        jSONWriter13.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray30);
        java.lang.Object obj35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        jSONWriter36.writeNameRaw(byteArray38);
        java.nio.charset.Charset charset40 = jSONWriter36.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter36.config(feature41, true);
        jSONWriter36.writeName("");
        boolean boolean46 = jSONWriter36.isWriteNulls();
        java.lang.Class<?> wildcardClass47 = jSONWriter36.getClass();
        boolean boolean48 = jSONWriter34.isWriteTypeInfo(obj35, (java.lang.Class) wildcardClass47);
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) jSONWriter13, (java.lang.Class) wildcardClass47);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeSymbol(0);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTimeHHMMSS8((int) (short) 10, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter0.writeRaw(byteArray20);
        boolean boolean22 = jSONWriter0.isUTF8();
        com.alibaba.fastjson2.JSONWriter.Context context23 = jSONWriter0.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context23);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter0.writeDecimal(bigDecimal6, (long) '#');
        java.lang.Object obj10 = null;
        java.lang.String str11 = jSONWriter0.setPath((int) 'a', obj10);
        long long13 = jSONWriter0.getFeatures((long) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        java.nio.charset.Charset charset16 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter12.config(feature17, true);
        jSONWriter12.writeName("");
        java.lang.reflect.Type type22 = null;
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) "", type22);
        com.alibaba.fastjson2.JSONObject jSONObject24 = null;
        jSONWriter11.write(jSONObject24);
        int int26 = jSONWriter11.size();
        jSONWriter11.writeChar('a');
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter29.writeBooleanNull();
        jSONWriter29.startArray((-1));
        java.util.UUID uUID33 = null;
        jSONWriter29.writeUUID(uUID33);
        boolean boolean35 = jSONWriter29.hasFilter();
        jSONWriter29.writeFloat((float) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        jSONWriter38.writeNameRaw(byteArray40);
        java.nio.charset.Charset charset42 = jSONWriter38.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter38.config(feature43, true);
        jSONWriter38.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        jSONWriter48.writeNull();
        java.math.BigDecimal bigDecimal52 = null;
        jSONWriter48.writeDecimal(bigDecimal52, 1L);
        java.math.BigInteger bigInteger55 = null;
        jSONWriter48.writeBigInt(bigInteger55);
        jSONWriter48.writeInt64((long) 0);
        boolean boolean60 = jSONWriter38.isWriteTypeInfo((java.lang.Object) jSONWriter48, (long) (byte) 1);
        java.time.LocalDate localDate61 = null;
        jSONWriter48.writeLocalDate(localDate61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter48);
        jSONWriter48.writeTypeName("");
        boolean boolean66 = jSONWriter29.isWriteTypeInfo((java.lang.Object) "");
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray72 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature67, feature68, feature69, feature70, feature71 };
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray72);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter74 = context73.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter75 = null;
        context73.setLabelFilter(labelFilter75);
        boolean boolean77 = context73.isDateFormatHasDay();
        jSONWriter29.setRootObject((java.lang.Object) context73);
        boolean boolean79 = context73.isDateFormatHasDay();
        boolean boolean80 = context73.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.NameFilter nameFilter81 = context73.getNameFilter();
        boolean boolean82 = jSONWriter11.isWriteTypeInfo((java.lang.Object) nameFilter81);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray72);
        org.junit.Assert.assertNull(afterFilter74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(nameFilter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        char[] charArray14 = null;
        jSONWriter0.writeString(charArray14, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        jSONWriter18.writeDouble(doubleArray23);
        java.text.DecimalFormat decimalFormat27 = null;
        jSONWriter0.writeDouble(doubleArray23, decimalFormat27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        jSONWriter29.writeNull();
        java.time.LocalDate localDate33 = null;
        jSONWriter29.writeLocalDate(localDate33);
        java.time.LocalTime localTime35 = null;
        jSONWriter29.writeLocalTime(localTime35);
        jSONWriter29.close();
        boolean[] booleanArray44 = new boolean[] { false, false, false, true, false, false };
        jSONWriter29.writeBool(booleanArray44);
        jSONWriter0.writeBool(booleanArray44);
        boolean boolean47 = jSONWriter0.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        float[] floatArray4 = new float[] {};
        jSONWriter0.writeFloat(floatArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        jSONWriter6.writeNameRaw(byteArray8);
        java.nio.charset.Charset charset10 = jSONWriter6.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter6.config(feature11, true);
        jSONWriter6.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        jSONWriter16.writeNull();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter16.writeDecimal(bigDecimal20, 1L);
        java.math.BigInteger bigInteger23 = null;
        jSONWriter16.writeBigInt(bigInteger23);
        jSONWriter16.writeInt64((long) 0);
        boolean boolean28 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter16, (long) (byte) 1);
        jSONWriter16.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        boolean boolean36 = jSONWriter0.containsReference((java.lang.Object) 100);
        boolean boolean38 = jSONWriter0.hasFilter((long) (byte) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        jSONWriter39.writeNameRaw(byteArray41);
        jSONWriter39.writeString("hi!");
        jSONWriter39.writeRaw((byte) 100);
        jSONWriter39.writeDateTime14(1, (int) (short) 10, (int) (short) 1, (int) (short) -1, 100, (int) '4');
        boolean boolean54 = jSONWriter39.hasFilter();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameAny((java.lang.Object) boolean54);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.writeNameAny(obj14);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray38 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter32.writeInt64(longArray38);
        java.nio.charset.Charset charset40 = jSONWriter32.getCharset();
        boolean[] booleanArray41 = new boolean[] {};
        jSONWriter32.writeBool(booleanArray41);
        jSONWriter32.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray48 = new long[] {};
        jSONWriter45.writeInt64(longArray48);
        java.util.Map map50 = null;
        jSONWriter45.write(map50);
        java.util.Map map52 = null;
        jSONWriter45.write(map52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray55 = new double[] {};
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter54.writeDouble(doubleArray55, decimalFormat56);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter45.writeDouble(doubleArray55, decimalFormat58);
        boolean boolean60 = jSONWriter45.useSingleQuote;
        java.lang.Class class61 = null;
        boolean boolean63 = jSONWriter32.isWriteMapTypeInfo((java.lang.Object) jSONWriter45, class61, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject64 = null;
        jSONWriter45.write(jSONObject64);
        float[] floatArray68 = new float[] { '4', '4' };
        jSONWriter45.writeFloat(floatArray68);
        jSONWriter0.writeFloat(floatArray68);
        jSONWriter0.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[52.0, 52.0]");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        char[] charArray29 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter0.writeString(charArray29, (int) (short) 10, (int) (short) 0, true);
        boolean boolean35 = jSONWriter0.hasFilter(10L);
        java.nio.charset.Charset charset36 = jSONWriter0.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charset36);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean19 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        jSONWriter29.writeNull();
        java.lang.reflect.Type type34 = null;
        boolean boolean35 = jSONWriter29.isWriteTypeInfo((java.lang.Object) true, type34);
        jSONWriter20.popPath((java.lang.Object) boolean35);
        jSONWriter20.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        jSONWriter39.writeNameRaw(byteArray41);
        jSONWriter20.writeNameRaw(byteArray41);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray50 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter44.writeInt64(longArray50);
        com.alibaba.fastjson2.JSONObject jSONObject52 = null;
        jSONWriter44.write(jSONObject52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        char[] charArray60 = new char[] { '#', ' ', '#' };
        jSONWriter54.writeString(charArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        jSONWriter62.writeNull();
        boolean boolean66 = jSONWriter54.isWriteTypeInfo((java.lang.Object) jSONWriter62);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        jSONWriter67.writeNameRaw(byteArray69);
        jSONWriter62.writeBinary(byteArray69);
        jSONWriter44.writeBinary(byteArray69);
        jSONWriter20.writeBinary(byteArray69);
        jSONWriter0.writeNameRaw(byteArray69);
        java.math.BigDecimal bigDecimal75 = null;
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter0.writeDecimal(bigDecimal75, (long) (short) 1, decimalFormat77);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter9 = null;
        context6.setPropertyFilter(propertyFilter9);
        boolean boolean12 = context6.isEnabled((long) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter20 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter21 = null;
        context19.setLabelFilter(labelFilter21);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider23 = context19.provider;
        boolean boolean25 = context19.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.of(context19);
        long long27 = jSONWriter26.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context28 = jSONWriter26.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean30 = context28.isEnabled(feature29);
        boolean boolean31 = context6.isEnabled(feature29);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = context6.getBeforeFilter();
        boolean boolean33 = context6.isDateFormatHasHour();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNull(afterFilter20);
        org.junit.Assert.assertNotNull(objectWriterProvider23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 34359804928L + "'", long27 == 34359804928L);
        org.junit.Assert.assertNotNull(context28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(beforeFilter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.JSONWriter.Context context29 = jSONWriter28.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        boolean boolean45 = jSONWriter30.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        long[] longArray60 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter54.writeInt64(longArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        char[] charArray68 = new char[] { '#', ' ', '#' };
        jSONWriter62.writeString(charArray68);
        java.lang.Class class70 = null;
        boolean boolean71 = jSONWriter54.isWriteTypeInfo((java.lang.Object) charArray68, class70);
        jSONWriter53.writeRaw(charArray68, (int) (byte) 0, (int) (byte) 0);
        jSONWriter30.writeString(charArray68);
        jSONWriter28.writeString(charArray68);
        jSONWriter28.writeFloat((float) 6);
        jSONWriter28.writeReference("");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(context29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray7);
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context11.getProvider();
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = jSONWriter13.isWriteTypeInfo((java.lang.Object) featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12, featureArray19);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context("$[0]", featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        int int61 = jSONWriter10.level();
        jSONWriter10.startObject();
        java.math.BigDecimal bigDecimal63 = null;
        jSONWriter10.writeDecimal(bigDecimal63, 34359804928L);
        boolean boolean66 = jSONWriter10.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        jSONWriter67.writeNameRaw(byteArray69);
        java.nio.charset.Charset charset71 = jSONWriter67.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter67.config(feature72, true);
        jSONWriter67.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable77 = jSONWriter67.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue;
        jSONWriter67.writeEnum((java.lang.Enum) feature78);
        jSONWriter10.writeEnum((java.lang.Enum) feature78);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNull(symbolTable77);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteMapNullValue));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = null;
        context8.setContextValueFilter(contextValueFilter14);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray23);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter26 = null;
        context25.setBeforeFilter(beforeFilter26);
        boolean boolean28 = context25.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        context25.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider16, featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        boolean boolean42 = jSONWriter41.isIgnoreErrorGetter();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider43 = context28.getProvider();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter44 = null;
        context28.setPropertyPreFilter(propertyPreFilter44);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = context28.getContextValueFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(objectWriterProvider43);
        org.junit.Assert.assertNull(contextValueFilter46);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = jSONWriter1.context;
        jSONWriter1.writeInt8((byte) 1);
        jSONWriter1.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        jSONWriter8.writeNameRaw(byteArray10);
        java.nio.charset.Charset charset12 = jSONWriter8.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter8.config(feature13, true);
        jSONWriter8.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        jSONWriter17.writeNull();
        java.lang.reflect.Type type22 = null;
        boolean boolean23 = jSONWriter17.isWriteTypeInfo((java.lang.Object) true, type22);
        jSONWriter8.popPath((java.lang.Object) boolean23);
        jSONWriter8.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        com.alibaba.fastjson2.JSONObject jSONObject35 = null;
        jSONWriter27.write(jSONObject35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        char[] charArray43 = new char[] { '#', ' ', '#' };
        jSONWriter37.writeString(charArray43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        jSONWriter45.writeNull();
        boolean boolean49 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter45);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        jSONWriter50.writeNameRaw(byteArray52);
        jSONWriter45.writeBinary(byteArray52);
        jSONWriter27.writeBinary(byteArray52);
        jSONWriter8.writeHex(byteArray52);
        jSONWriter1.writeRaw(byteArray52);
        com.alibaba.fastjson2.SymbolTable symbolTable58 = jSONWriter1.symbolTable;
        jSONWriter1.writeFloat((float) ' ');
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(context4);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNull(symbolTable58);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        boolean boolean23 = jSONWriter7.isUTF8();
        java.io.OutputStream outputStream24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        jSONWriter25.writeNameRaw(byteArray27);
        java.nio.charset.Charset charset29 = jSONWriter25.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter25.config(feature30, true);
        jSONWriter25.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger35 = null;
        jSONWriter25.writeBigInt(bigInteger35, (long) (short) 0);
        java.nio.charset.Charset charset38 = jSONWriter25.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = jSONWriter7.flushTo(outputStream24, charset38);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(charset38);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        java.time.LocalTime localTime11 = null;
        jSONWriter0.writeLocalTime(localTime11);
        jSONWriter0.writeDateYYYMMDD8(0, (int) '#', (int) (short) 100);
        boolean boolean17 = jSONWriter0.isUseSingleQuotes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context6.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        char[] charArray25 = new char[] { '#', ' ', '#' };
        jSONWriter19.writeString(charArray25);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter18.writeNameRaw(charArray25);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(propertyFilter15);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#,  , #]");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter10 = null;
        context6.setNameFilter(nameFilter10);
        com.alibaba.fastjson2.filter.NameFilter nameFilter12 = context6.getNameFilter();
        java.time.ZoneId zoneId13 = context6.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        jSONWriter14.writeString("hi!");
        jSONWriter14.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        jSONWriter29.writeBooleanNull();
        jSONWriter29.writeComma();
        jSONWriter14.startArray((java.lang.Object) jSONWriter29, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context42 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray40);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter43 = null;
        context42.setBeforeFilter(beforeFilter43);
        boolean boolean45 = jSONWriter29.removeReference((java.lang.Object) context42);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        context42.config(featureArray52);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter57 = null;
        context42.setLabelFilter(labelFilter57);
        boolean boolean59 = context42.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj61 = null;
        boolean boolean62 = jSONWriter60.removeReference(obj61);
        long[] longArray63 = new long[] {};
        jSONWriter60.writeInt64(longArray63);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter60.config(feature65, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray74 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72, feature73 };
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray74);
        jSONWriter60.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.of(featureArray74);
        context42.config(featureArray74);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray74);
        context6.config(featureArray74);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(nameFilter12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[]");
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(jSONWriter78);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = null;
        context6.setValueFilter(valueFilter10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = context6.getLabelFilter();
        long long13 = context6.getFeatures();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 34359804928L + "'", long13 == 34359804928L);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter8 = null;
        context6.setBeforeFilter(beforeFilter8);
        java.time.ZoneId zoneId10 = context6.getZoneId();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = null;
        context6.setBeforeFilter(beforeFilter11);
        java.lang.String str13 = context6.getDateFormat();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context6.config(feature14, true);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter17 = null;
        context6.setLabelFilter(labelFilter17);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        jSONWriter4.writeDateTime14((int) '#', (int) (byte) 0, 1, (-1), (int) '4', (int) (byte) 1);
        java.math.BigInteger bigInteger12 = null;
        jSONWriter4.writeBigInt(bigInteger12);
        boolean boolean14 = jSONWriter4.isUTF8();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        com.alibaba.fastjson2.JSONWriter.Path path0 = null;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "$.[100]");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = context6.getLabelFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNull(labelFilter12);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean19 = jSONWriter0.isIgnoreNoneSerializable();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter0.writeDecimal(bigDecimal20, (long) 'a');
        boolean boolean23 = jSONWriter0.useSingleQuote;
        boolean boolean24 = jSONWriter0.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25, feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        java.lang.Class class34 = null;
        jSONWriter32.checkAndWriteTypeName((java.lang.Object) (byte) 0, class34);
        java.math.BigInteger bigInteger36 = null;
        jSONWriter32.writeBigInt(bigInteger36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter38.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter38.writeEnum((java.lang.Enum) feature40);
        boolean boolean42 = jSONWriter38.hasFilter();
        jSONWriter38.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray48 = new long[] {};
        jSONWriter45.writeInt64(longArray48);
        java.util.Map map50 = null;
        jSONWriter45.write(map50);
        java.util.Map map52 = null;
        jSONWriter45.write(map52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray55 = new double[] {};
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter54.writeDouble(doubleArray55, decimalFormat56);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter45.writeDouble(doubleArray55, decimalFormat58);
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter38.writeDouble(doubleArray55, decimalFormat60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray63 = new double[] {};
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter62.writeDouble(doubleArray63, decimalFormat64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray67 = new double[] {};
        java.text.DecimalFormat decimalFormat68 = null;
        jSONWriter66.writeDouble(doubleArray67, decimalFormat68);
        jSONWriter62.writeDouble(doubleArray67);
        boolean boolean71 = jSONWriter62.isUTF16();
        java.lang.Class<?> wildcardClass72 = jSONWriter62.getClass();
        boolean boolean73 = jSONWriter32.isWriteTypeInfo((java.lang.Object) doubleArray55, (java.lang.Class) wildcardClass72);
        java.text.DecimalFormat decimalFormat74 = null;
        jSONWriter0.writeDouble(doubleArray55, decimalFormat74);
        com.alibaba.fastjson2.SymbolTable symbolTable76 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(symbolTable76);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        float[] floatArray4 = new float[] {};
        jSONWriter0.writeFloat(floatArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        jSONWriter6.writeNameRaw(byteArray8);
        java.nio.charset.Charset charset10 = jSONWriter6.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter6.config(feature11, true);
        jSONWriter6.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        jSONWriter16.writeNull();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter16.writeDecimal(bigDecimal20, 1L);
        java.math.BigInteger bigInteger23 = null;
        jSONWriter16.writeBigInt(bigInteger23);
        jSONWriter16.writeInt64((long) 0);
        boolean boolean28 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter16, (long) (byte) 1);
        jSONWriter16.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        boolean boolean36 = jSONWriter0.containsReference((java.lang.Object) 100);
        jSONWriter0.writeInt8((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        float[] floatArray4 = new float[] {};
        jSONWriter0.writeFloat(floatArray4);
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        jSONWriter6.writeNameRaw(byteArray8);
        java.nio.charset.Charset charset10 = jSONWriter6.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter6.config(feature11, true);
        jSONWriter6.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        jSONWriter16.writeNull();
        java.math.BigDecimal bigDecimal20 = null;
        jSONWriter16.writeDecimal(bigDecimal20, 1L);
        java.math.BigInteger bigInteger23 = null;
        jSONWriter16.writeBigInt(bigInteger23);
        jSONWriter16.writeInt64((long) 0);
        boolean boolean28 = jSONWriter6.isWriteTypeInfo((java.lang.Object) jSONWriter16, (long) (byte) 1);
        jSONWriter16.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        boolean boolean36 = jSONWriter0.containsReference((java.lang.Object) 100);
        java.text.DecimalFormat decimalFormat38 = null;
        jSONWriter0.writeFloat((float) (short) -1, decimalFormat38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        long[] longArray46 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter40.writeInt64(longArray46);
        java.nio.charset.Charset charset48 = jSONWriter40.getCharset();
        boolean[] booleanArray49 = new boolean[] {};
        jSONWriter40.writeBool(booleanArray49);
        jSONWriter40.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter40);
        char[] charArray54 = null;
        jSONWriter40.writeString(charArray54, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray59 = new double[] {};
        java.text.DecimalFormat decimalFormat60 = null;
        jSONWriter58.writeDouble(doubleArray59, decimalFormat60);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray63 = new double[] {};
        java.text.DecimalFormat decimalFormat64 = null;
        jSONWriter62.writeDouble(doubleArray63, decimalFormat64);
        jSONWriter58.writeDouble(doubleArray63);
        java.text.DecimalFormat decimalFormat67 = null;
        jSONWriter40.writeDouble(doubleArray63, decimalFormat67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj70 = null;
        boolean boolean71 = jSONWriter69.removeReference(obj70);
        jSONWriter69.writeNull();
        java.time.LocalDate localDate73 = null;
        jSONWriter69.writeLocalDate(localDate73);
        java.time.LocalTime localTime75 = null;
        jSONWriter69.writeLocalTime(localTime75);
        jSONWriter69.close();
        boolean[] booleanArray84 = new boolean[] { false, false, false, true, false, false };
        jSONWriter69.writeBool(booleanArray84);
        jSONWriter40.writeBool(booleanArray84);
        jSONWriter0.startArray((java.lang.Object) jSONWriter40, (int) (byte) 100);
        java.math.BigDecimal bigDecimal89 = null;
        jSONWriter40.writeDecimal(bigDecimal89);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[false, false, false, true, false, false]");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.nio.charset.Charset charset12 = jSONWriter0.getCharset();
        boolean boolean13 = jSONWriter0.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter.Context context14 = jSONWriter0.getContext();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(context14);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        char[] charArray38 = new char[] { '#', ' ', '#' };
        jSONWriter32.writeString(charArray38);
        java.lang.Class class40 = null;
        boolean boolean41 = jSONWriter24.isWriteTypeInfo((java.lang.Object) charArray38, class40);
        jSONWriter23.writeRaw(charArray38, (int) (byte) 0, (int) (byte) 0);
        jSONWriter0.writeString(charArray38);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.startArray();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context6.setPropertyFilter(propertyFilter12);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = context6.getLabelFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter15 = context6.getValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter14);
        org.junit.Assert.assertNull(valueFilter15);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.startObject();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter0.writeDecimal(bigDecimal15, (long) 100);
        com.alibaba.fastjson2.JSONWriter.Context context18 = jSONWriter0.context;
        boolean boolean19 = jSONWriter0.isRefDetect();
        jSONWriter0.writeChar('#');
        jSONWriter0.writeTypeName("$.[100]");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(context18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter24.writeEnum((java.lang.Enum) feature26);
        boolean boolean28 = jSONWriter24.hasFilter();
        jSONWriter24.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = jSONWriter24.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable32 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter33.isWriteMapTypeInfo((java.lang.Object) jSONWriter41, class42, 0L);
        java.lang.String[] strArray46 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        jSONWriter33.writeString((java.util.List<java.lang.String>) strList47);
        jSONWriter24.write((java.util.List) strList47);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList47);
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter0.writeFloat((float) 100L, decimalFormat53);
        jSONWriter0.writeSymbol("$[0]");
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57, feature58, feature59, feature60, feature61 };
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray62);
        boolean boolean64 = context63.isFormatyyyyMMddhhmmss19();
        boolean boolean66 = context63.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter67 = context63.getValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter68 = context63.getBeforeFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter69 = context63.getPropertyFilter();
        jSONWriter0.popPath((java.lang.Object) context63);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(symbolTable31);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(valueFilter67);
        org.junit.Assert.assertNull(beforeFilter68);
        org.junit.Assert.assertNull(propertyFilter69);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = null;
        context6.setPropertyFilter(propertyFilter10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context18.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21, symbolTable24);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean;
        context21.config(feature27, true);
        boolean boolean30 = context6.isEnabled(feature27);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter31 = null;
        context6.setPropertyFilter(propertyFilter31);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        long[] longArray22 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter16.writeInt64(longArray22);
        java.nio.charset.Charset charset24 = jSONWriter16.getCharset();
        boolean[] booleanArray25 = new boolean[] {};
        jSONWriter16.writeBool(booleanArray25);
        jSONWriter16.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray32 = new long[] {};
        jSONWriter29.writeInt64(longArray32);
        java.util.Map map34 = null;
        jSONWriter29.write(map34);
        java.util.Map map36 = null;
        jSONWriter29.write(map36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray39 = new double[] {};
        java.text.DecimalFormat decimalFormat40 = null;
        jSONWriter38.writeDouble(doubleArray39, decimalFormat40);
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter29.writeDouble(doubleArray39, decimalFormat42);
        boolean boolean44 = jSONWriter29.useSingleQuote;
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter16.isWriteMapTypeInfo((java.lang.Object) jSONWriter29, class45, (long) (short) -1);
        java.lang.String str48 = jSONWriter0.setPath("$.[100][4]", (java.lang.Object) (short) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray54);
        jSONWriter0.config(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(jSONWriter57);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        char[] charArray29 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter0.writeString(charArray29, (int) (short) 10, (int) (short) 0, true);
        boolean boolean35 = jSONWriter0.hasFilter(10L);
        byte[] byteArray36 = jSONWriter0.getBytes();
        jSONWriter0.writeMillis((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray45 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter39.writeInt64(longArray45);
        boolean boolean48 = jSONWriter39.hasFilter(0L);
        jSONWriter39.writeFloat((float) 1);
        boolean boolean51 = jSONWriter0.containsReference((java.lang.Object) 1);
        java.time.Instant instant52 = null;
        jSONWriter0.writeInstant(instant52);
        jSONWriter0.writeSymbol(6);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-105, -1, -1, 10, -108, 73]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter14);
        byte[] byteArray29 = jSONWriter14.getBytes();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-105, -1, -1, 10, -108, 127, 56, 100]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        int int13 = jSONWriter1.level();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        java.nio.charset.Charset charset18 = jSONWriter14.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter14.config(feature19, true);
        jSONWriter14.writeNull();
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter14.writeFloat((float) '#', decimalFormat24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        java.nio.charset.Charset charset34 = jSONWriter26.getCharset();
        boolean[] booleanArray35 = new boolean[] {};
        jSONWriter26.writeBool(booleanArray35);
        jSONWriter26.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray42 = new long[] {};
        jSONWriter39.writeInt64(longArray42);
        java.util.Map map44 = null;
        jSONWriter39.write(map44);
        java.util.Map map46 = null;
        jSONWriter39.write(map46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray49 = new double[] {};
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter48.writeDouble(doubleArray49, decimalFormat50);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter39.writeDouble(doubleArray49, decimalFormat52);
        boolean boolean54 = jSONWriter39.useSingleQuote;
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter26.isWriteMapTypeInfo((java.lang.Object) jSONWriter39, class55, (long) (short) -1);
        jSONWriter26.endObject();
        jSONWriter26.writeBooleanNull();
        jSONWriter26.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter62.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter62.writeEnum((java.lang.Enum) feature64);
        boolean boolean66 = jSONWriter62.hasFilter();
        jSONWriter62.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = jSONWriter62.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature72, feature73, feature74, feature75, feature76 };
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray77);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        java.lang.Class class80 = null;
        boolean boolean82 = jSONWriter71.isWriteMapTypeInfo((java.lang.Object) jSONWriter79, class80, 0L);
        java.lang.String[] strArray84 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        jSONWriter71.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter62.write((java.util.List) strList85);
        jSONWriter26.write((java.util.List) strList85);
        jSONWriter14.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList85);
        java.math.BigInteger bigInteger92 = null;
        jSONWriter1.writeBigInt(bigInteger92, 100L);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(symbolTable69);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        jSONWriter0.config(featureArray59);
        boolean boolean63 = jSONWriter0.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.time.LocalDate localDate4 = null;
        jSONWriter0.writeLocalDate(localDate4);
        jSONWriter0.writeInt64((long) 10);
        jSONWriter0.writeTypeName("$.[100][4]");
        long long10 = jSONWriter0.getFeatures();
        byte[] byteArray11 = jSONWriter0.getBytes();
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        jSONWriter13.writeInt64(longArray20);
        jSONWriter13.writeTypeName("");
        int int25 = jSONWriter13.level();
        java.util.UUID uUID26 = null;
        jSONWriter13.writeUUID(uUID26);
        jSONWriter13.writeInt16((short) (byte) 10);
        com.alibaba.fastjson2.SymbolTable symbolTable30 = jSONWriter13.getSymbolTable();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter31.writeBooleanNull();
        long[] longArray36 = new long[] { '#', '4', 1 };
        jSONWriter31.writeInt64(longArray36);
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter31.writeDecimal(bigDecimal38, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        java.nio.charset.Charset charset45 = jSONWriter41.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter41.config(feature46, true);
        jSONWriter41.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj51 = null;
        boolean boolean52 = jSONWriter50.removeReference(obj51);
        jSONWriter50.writeNull();
        java.lang.reflect.Type type55 = null;
        boolean boolean56 = jSONWriter50.isWriteTypeInfo((java.lang.Object) true, type55);
        jSONWriter41.popPath((java.lang.Object) boolean56);
        jSONWriter41.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        jSONWriter60.writeNameRaw(byteArray62);
        jSONWriter41.writeNameRaw(byteArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        long[] longArray71 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter65.writeInt64(longArray71);
        com.alibaba.fastjson2.JSONObject jSONObject73 = null;
        jSONWriter65.write(jSONObject73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj76 = null;
        boolean boolean77 = jSONWriter75.removeReference(obj76);
        char[] charArray81 = new char[] { '#', ' ', '#' };
        jSONWriter75.writeString(charArray81);
        com.alibaba.fastjson2.JSONWriter jSONWriter83 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj84 = null;
        boolean boolean85 = jSONWriter83.removeReference(obj84);
        jSONWriter83.writeNull();
        boolean boolean87 = jSONWriter75.isWriteTypeInfo((java.lang.Object) jSONWriter83);
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        jSONWriter88.writeNameRaw(byteArray90);
        jSONWriter83.writeBinary(byteArray90);
        jSONWriter65.writeBinary(byteArray90);
        jSONWriter41.writeBinary(byteArray90);
        jSONWriter31.writeNameRaw(byteArray90);
        jSONWriter13.writeRaw(byteArray90);
        boolean boolean98 = jSONWriter0.writeTypeName(byteArray90, (long) 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81, -81, -22, -110, 83, 36, 46, 91, 49, 48, 48, 93, 91, 52, 93, 0]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(symbolTable30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[35, 52, 1]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[100]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path10 = path9.parent;
        com.alibaba.fastjson2.JSONWriter.Path path11 = path10.parent;
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
        org.junit.Assert.assertNotNull(path10);
        org.junit.Assert.assertNotNull(path11);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        jSONWriter0.writeRaw((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter17.writeBigInt(bigInteger32, (long) (short) -1);
        boolean boolean35 = jSONWriter0.removeReference((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray43);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context45.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(context45);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable49);
        jSONWriter50.writeInt8((byte) 100);
        java.lang.String str53 = jSONWriter0.setPath("$", (java.lang.Object) jSONWriter50);
        boolean boolean54 = jSONWriter0.isBeanToArray();
        java.nio.charset.Charset charset55 = jSONWriter0.getCharset();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(charset55);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        jSONWriter0.endArray();
        jSONWriter0.writeMillis((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) (byte) 0, (double) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter16 = null;
        context6.setValueFilter(valueFilter16);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter18 = context6.getPropertyPreFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(propertyFilter15);
        org.junit.Assert.assertNull(propertyPreFilter18);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        jSONWriter13.writeNameRaw(byteArray15);
        jSONWriter1.writeNameRaw(byteArray15);
        java.util.Map map18 = null;
        jSONWriter1.write(map18);
        boolean boolean20 = jSONWriter1.isIgnoreErrorGetter();
        java.lang.Class class21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.writer.ObjectWriter objectWriter22 = jSONWriter1.getObjectWriter(class21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        char[] charArray14 = new char[] { '#', ' ', '#' };
        jSONWriter8.writeString(charArray14);
        java.lang.Class class16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) charArray14, class16);
        boolean boolean18 = jSONWriter0.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        boolean boolean33 = context31.isEnabled((long) '4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter13 = context8.getPropertyFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(propertyFilter13);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context28.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.NameFilter nameFilter34 = null;
        context28.setNameFilter(nameFilter34);
        boolean boolean37 = context28.isEnabled((long) (byte) 0);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context28.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43, feature44 };
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.of(featureArray45);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context48.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider50 = context48.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51, feature52, feature53, feature54, feature55 };
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter58 = context57.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context57.setLabelFilter(labelFilter59);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider61 = context57.provider;
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider61);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray64 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature63 };
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray64);
        com.alibaba.fastjson2.JSONWriter.Context context66 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray64);
        jSONWriter67.writeComma();
        java.util.Map map69 = null;
        jSONWriter67.write(map69);
        boolean boolean71 = jSONWriter67.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray78 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature73, feature74, feature75, feature76, feature77 };
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray78);
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray78);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter81 = null;
        context80.setBeforeFilter(beforeFilter81);
        boolean boolean83 = context80.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature84 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature85 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature86 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature87 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature88 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature89 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray90 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature84, feature85, feature86, feature87, feature88, feature89 };
        com.alibaba.fastjson2.JSONWriter jSONWriter91 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context92 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray90);
        context80.config(featureArray90);
        jSONWriter67.config(featureArray90);
        context62.config(featureArray90);
        com.alibaba.fastjson2.JSONWriter.Context context96 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider50, featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter97 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter98 = com.alibaba.fastjson2.JSONWriter.of(featureArray90);
        com.alibaba.fastjson2.JSONWriter jSONWriter99 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider38, featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertNotNull(objectWriterProvider50);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNull(afterFilter58);
        org.junit.Assert.assertNotNull(objectWriterProvider61);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature84.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature85.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature86 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature86.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature87 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature87.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature88 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature88.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature89 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature89.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray90);
        org.junit.Assert.assertNotNull(jSONWriter91);
        org.junit.Assert.assertNotNull(jSONWriter97);
        org.junit.Assert.assertNotNull(jSONWriter98);
        org.junit.Assert.assertNotNull(jSONWriter99);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context8);
        boolean boolean13 = jSONWriter12.isRefDetect();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        char[] charArray38 = new char[] { '#', ' ', '#' };
        jSONWriter32.writeString(charArray38);
        java.lang.Class class40 = null;
        boolean boolean41 = jSONWriter24.isWriteTypeInfo((java.lang.Object) charArray38, class40);
        jSONWriter23.writeRaw(charArray38, (int) (byte) 0, (int) (byte) 0);
        jSONWriter0.writeString(charArray38);
        boolean boolean46 = jSONWriter0.utf16;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.lang.Class class9 = null;
        jSONWriter7.checkAndWriteTypeName((java.lang.Object) (byte) 0, class9);
        jSONWriter7.writeColon();
        jSONWriter7.writeName((int) (byte) 100);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter7.symbolTable;
        com.alibaba.fastjson2.SymbolTable symbolTable15 = jSONWriter7.symbolTable;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.startArray((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(symbolTable14);
        org.junit.Assert.assertNull(symbolTable15);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        jSONWriter0.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter9.writeBooleanNull();
        jSONWriter9.startArray((-1));
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter23 = null;
        context19.setNameFilter(nameFilter23);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = null;
        context19.setAfterFilter(afterFilter25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii;
        boolean boolean28 = context19.isEnabled(feature27);
        boolean boolean29 = jSONWriter9.isEnabled(feature27);
        jSONWriter9.writeSymbol("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter9);
        java.lang.String str33 = jSONWriter0.setPath(9, (java.lang.Object) jSONWriter9);
        jSONWriter9.startArray(15);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.EscapeNoneAscii));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context36.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context36.setLabelFilter(labelFilter38);
        boolean boolean41 = context36.isEnabled(1L);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter42 = null;
        context36.setAfterFilter(afterFilter42);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter44 = context36.getContextNameFilter();
        java.lang.Class<?> wildcardClass45 = context36.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter46 = jSONWriter10.getObjectWriter((java.lang.Class) wildcardClass45);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeRaw("$");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(contextNameFilter44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(objectWriter46);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray26 = new long[] {};
        jSONWriter23.writeInt64(longArray26);
        java.util.Map map28 = null;
        jSONWriter23.write(map28);
        java.util.Map map30 = null;
        jSONWriter23.write(map30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray33 = new double[] {};
        java.text.DecimalFormat decimalFormat34 = null;
        jSONWriter32.writeDouble(doubleArray33, decimalFormat34);
        java.text.DecimalFormat decimalFormat36 = null;
        jSONWriter23.writeDouble(doubleArray33, decimalFormat36);
        boolean boolean38 = jSONWriter23.useSingleQuote;
        jSONWriter23.writeNumberNull();
        java.lang.Class class40 = null;
        boolean boolean42 = jSONWriter7.isWriteMapTypeInfo((java.lang.Object) jSONWriter23, class40, (long) 'a');
        java.time.LocalDateTime localDateTime43 = null;
        jSONWriter23.writeLocalDateTime(localDateTime43);
        boolean boolean45 = jSONWriter23.isUseSingleQuotes();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeBool(true);
        jSONWriter0.writeArrayNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        jSONWriter12.writeColon();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray15 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14 };
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray15);
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray15);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray15);
        jSONWriter18.writeComma();
        java.util.Map map20 = null;
        jSONWriter18.write(map20);
        boolean boolean22 = jSONWriter18.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        long[] longArray29 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter23.writeInt64(longArray29);
        com.alibaba.fastjson2.JSONObject jSONObject31 = null;
        jSONWriter23.write(jSONObject31);
        java.lang.Class class34 = null;
        boolean boolean36 = jSONWriter23.isWriteTypeInfo((java.lang.Object) false, class34, (long) (short) -1);
        jSONWriter23.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        boolean boolean42 = jSONWriter39.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context43 = jSONWriter39.context;
        java.lang.String str44 = context43.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context43.setBeforeFilter(beforeFilter45);
        boolean boolean48 = jSONWriter23.isWriteTypeInfo((java.lang.Object) context43, (long) (short) 100);
        int[] intArray51 = new int[] { 1, 'a' };
        jSONWriter23.writeInt32(intArray51);
        jSONWriter18.writeInt32(intArray51);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        boolean boolean61 = context60.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider62 = context60.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.of(context63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        jSONWriter65.writeNull();
        java.math.BigDecimal bigDecimal69 = null;
        jSONWriter65.writeDecimal(bigDecimal69, 1L);
        char[] charArray76 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter65.writeString(charArray76, (int) (byte) 100, (int) (short) 0);
        jSONWriter64.writeString(charArray76, 4, 1, true);
        jSONWriter18.writeString(charArray76, 10, (-1));
        jSONWriter12.writeString(charArray76);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeRaw((byte) -1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(context43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 97]");
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider62);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[4,  , a, 4]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray9 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature4, feature5, feature6, feature7, feature8 };
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray9);
        boolean boolean11 = context10.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId12 = context10.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter13 = context10.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter14 = context10.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context10.config(feature15, false);
        java.lang.String str18 = context10.getDateFormat();
        java.lang.Class class19 = null;
        jSONWriter0.checkAndWriteTypeName((java.lang.Object) context10, class19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context10);
        jSONWriter21.writeInt16((short) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNull(afterFilter13);
        org.junit.Assert.assertNull(afterFilter14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        boolean boolean9 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        boolean boolean12 = jSONWriter0.isEnabled((long) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        char[] charArray14 = null;
        jSONWriter0.writeString(charArray14, (int) (short) 1, (int) '#');
        boolean boolean18 = jSONWriter0.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        boolean boolean28 = context27.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter29 = context27.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider30 = context27.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider31 = context27.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider31);
        boolean boolean33 = jSONWriter0.removeReference((java.lang.Object) context32);
        jSONWriter0.endObject();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(propertyFilter29);
        org.junit.Assert.assertNotNull(objectWriterProvider30);
        org.junit.Assert.assertNotNull(objectWriterProvider31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        int int8 = jSONWriter7.size();
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter7.flushTo(writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        char[] charArray23 = new char[] { '#', ' ', '#' };
        jSONWriter17.writeString(charArray23);
        boolean boolean25 = jSONWriter14.removeReference((java.lang.Object) jSONWriter17);
        java.lang.String str26 = jSONWriter0.setPath((int) '#', (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = jSONWriter14.getSymbolTable();
        boolean boolean28 = jSONWriter14.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(symbolTable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = null;
        context6.setValueFilter(valueFilter10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId20 = context18.getZoneId();
        context6.setZoneId(zoneId20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context6.setNameFilter(nameFilter22);
        boolean boolean24 = context6.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter25 = context6.getBeforeFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(beforeFilter25);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        java.lang.Class class24 = null;
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) afterFilter23, class24);
        jSONWriter0.writeDouble((double) (byte) 10);
        jSONWriter0.writeTypeName("hi!");
        jSONWriter0.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        jSONWriter0.startObject();
        boolean boolean11 = jSONWriter0.hasFilter();
        java.math.BigInteger bigInteger12 = null;
        jSONWriter0.writeBigInt(bigInteger12, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean22 = context21.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context21.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter25 = context21.getAfterFilter();
        boolean boolean26 = context21.isDateFormatHasDay();
        context21.setDateFormat("$");
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray35);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context37.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        context37.config(featureArray46);
        context21.config(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        jSONWriter54.writeNull();
        java.time.LocalDate localDate58 = null;
        jSONWriter54.writeLocalDate(localDate58);
        jSONWriter54.writeInt64((long) 10);
        jSONWriter54.writeTypeName("$.[100][4]");
        jSONWriter54.writeDateTime19((int) 'a', 6, 10, (int) (short) -1, (int) ' ', (int) (byte) 1);
        jSONWriter54.writeChar(' ');
        char[] charArray78 = new char[] { '#', ' ', 'a', 'a', 'a' };
        jSONWriter54.writeString(charArray78, (int) (short) 100, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter52.writeNameRaw(charArray78);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertNull(afterFilter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "# aaa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "# aaa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#,  , a, a, a]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean10 = context8.isEnabled(0L);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context18.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = context18.getLabelFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter25 = null;
        context18.setNameFilter(nameFilter25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.of(context18);
        com.alibaba.fastjson2.JSONWriter.Path path28 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean30 = path28.equals((java.lang.Object) feature29);
        com.alibaba.fastjson2.JSONWriter.Path path31 = path28.parent;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.SymbolTable symbolTable42 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context41, symbolTable42);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context41.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray48 = new long[] {};
        jSONWriter45.writeInt64(longArray48);
        java.util.Map map50 = null;
        jSONWriter45.write(map50);
        java.util.Map map52 = null;
        jSONWriter45.write(map52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray55 = new double[] {};
        java.text.DecimalFormat decimalFormat56 = null;
        jSONWriter54.writeDouble(doubleArray55, decimalFormat56);
        java.text.DecimalFormat decimalFormat58 = null;
        jSONWriter45.writeDouble(doubleArray55, decimalFormat58);
        boolean boolean60 = jSONWriter45.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray66 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61, feature62, feature63, feature64, feature65 };
        com.alibaba.fastjson2.JSONWriter.Context context67 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray66);
        jSONWriter45.config(featureArray66);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider44, featureArray66);
        boolean boolean71 = path28.equals((java.lang.Object) featureArray66);
        jSONWriter27.config(featureArray66);
        com.alibaba.fastjson2.JSONWriter.Context context73 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11, featureArray66);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter74 = context73.getBeforeFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(labelFilter24);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(path28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(path31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray66);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(beforeFilter74);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        jSONWriter0.config(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter64 = null;
        context63.setLabelFilter(labelFilter64);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter61);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter9 = context8.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context8.setPropertyPreFilter(propertyPreFilter10);
        context8.setDateFormat("$.[100]");
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNull(contextValueFilter9);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        java.math.BigInteger bigInteger3 = null;
        jSONWriter0.writeBigInt(bigInteger3);
        java.time.Instant instant5 = null;
        jSONWriter0.writeInstant(instant5);
        long long7 = jSONWriter0.getFeatures();
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        jSONWriter8.writeNameRaw(byteArray10);
        java.nio.charset.Charset charset12 = jSONWriter8.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter8.config(feature13, true);
        jSONWriter8.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        java.math.BigDecimal bigDecimal22 = null;
        jSONWriter18.writeDecimal(bigDecimal22, 1L);
        java.math.BigInteger bigInteger25 = null;
        jSONWriter18.writeBigInt(bigInteger25);
        jSONWriter18.writeInt64((long) 0);
        boolean boolean30 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter18, (long) (byte) 1);
        jSONWriter18.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter18.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context39 = jSONWriter18.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(context39);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray46);
        com.alibaba.fastjson2.JSONObject jSONObject49 = null;
        jSONWriter48.write(jSONObject49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        long[] longArray57 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter51.writeInt64(longArray57);
        java.nio.charset.Charset charset59 = jSONWriter51.getCharset();
        boolean[] booleanArray60 = new boolean[] {};
        jSONWriter51.writeBool(booleanArray60);
        jSONWriter51.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj65 = null;
        boolean boolean66 = jSONWriter64.removeReference(obj65);
        long[] longArray67 = new long[] {};
        jSONWriter64.writeInt64(longArray67);
        java.util.Map map69 = null;
        jSONWriter64.write(map69);
        java.util.Map map71 = null;
        jSONWriter64.write(map71);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray74 = new double[] {};
        java.text.DecimalFormat decimalFormat75 = null;
        jSONWriter73.writeDouble(doubleArray74, decimalFormat75);
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter64.writeDouble(doubleArray74, decimalFormat77);
        boolean boolean79 = jSONWriter64.useSingleQuote;
        java.lang.Class class80 = null;
        boolean boolean82 = jSONWriter51.isWriteMapTypeInfo((java.lang.Object) jSONWriter64, class80, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject83 = null;
        jSONWriter64.write(jSONObject83);
        float[] floatArray87 = new float[] { '4', '4' };
        jSONWriter64.writeFloat(floatArray87);
        jSONWriter48.writeFloat(floatArray87);
        jSONWriter40.writeFloat(floatArray87);
        jSONWriter0.writeFloat(floatArray87);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[52.0, 52.0]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean14 = jSONWriter1.hasFilter((long) (short) -1);
        boolean boolean15 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat(0.0f, decimalFormat17);
        java.nio.charset.Charset charset19 = jSONWriter1.getCharset();
        jSONWriter1.writeMillis((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context8.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context8.getProvider();
        long long13 = context8.getFeatures();
        boolean boolean15 = context8.isEnabled((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 34359804928L + "'", long13 == 34359804928L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter7.writeString("");
        boolean boolean11 = jSONWriter7.isEnabled((long) 'a');
        boolean boolean12 = jSONWriter7.utf8;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter0.writeRaw(byteArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj23 = null;
        boolean boolean24 = jSONWriter22.removeReference(obj23);
        long[] longArray28 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter22.writeInt64(longArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        char[] charArray36 = new char[] { '#', ' ', '#' };
        jSONWriter30.writeString(charArray36);
        java.lang.Class class38 = null;
        boolean boolean39 = jSONWriter22.isWriteTypeInfo((java.lang.Object) charArray36, class38);
        jSONWriter0.writeString(charArray36, (int) (byte) 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        int int61 = jSONWriter10.level();
        com.alibaba.fastjson2.SymbolTable symbolTable62 = jSONWriter10.symbolTable;
        jSONWriter10.writeTypeName("hi!");
        boolean boolean65 = jSONWriter10.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(symbolTable62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter13.writeBooleanNull();
        boolean boolean16 = jSONWriter13.isEnabled((long) (byte) 0);
        boolean boolean17 = jSONWriter13.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        long[] longArray24 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter18.writeInt64(longArray24);
        java.nio.charset.Charset charset26 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter27.writeBooleanNull();
        byte[] byteArray29 = jSONWriter27.getBytes();
        jSONWriter18.writeRaw(byteArray29);
        jSONWriter13.writeNameRaw(byteArray29, 1L);
        jSONWriter1.writeHex(byteArray29);
        jSONWriter1.writeTypeName("$");
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-81]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        jSONWriter0.writeFloat((float) 1);
        jSONWriter0.writeRaw((byte) 0);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        char[] charArray21 = new char[] { '#', ' ', '#' };
        jSONWriter15.writeString(charArray21);
        jSONWriter15.writeMillis(1056L);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse;
        jSONWriter15.config(feature25, false);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28 };
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray29);
        jSONWriter30.writeFloat((float) (short) 0);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        long long36 = jSONWriter30.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter37.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter37.writeEnum((java.lang.Enum) feature39);
        boolean boolean41 = jSONWriter37.hasFilter();
        jSONWriter37.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = jSONWriter37.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable45 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable45);
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter46.isWriteMapTypeInfo((java.lang.Object) jSONWriter54, class55, 0L);
        java.lang.String[] strArray59 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        jSONWriter46.writeString((java.util.List<java.lang.String>) strList60);
        jSONWriter37.write((java.util.List) strList60);
        jSONWriter30.write((java.util.List) strList60);
        jSONWriter15.write((java.util.List) strList60);
        jSONWriter0.writeString((java.util.List<java.lang.String>) strList60);
        boolean boolean67 = jSONWriter0.utf8;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(symbolTable44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        double[] doubleArray12 = new double[] { 34359804928L, 1.0f, 1.0d };
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray12, decimalFormat13);
        long long16 = jSONWriter0.getFeatures(32L);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        jSONWriter17.writeNull();
        java.lang.reflect.Type type22 = null;
        boolean boolean23 = jSONWriter17.isWriteTypeInfo((java.lang.Object) true, type22);
        boolean boolean24 = jSONWriter0.removeReference((java.lang.Object) type22);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeName((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[3.4359804928E10, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32L + "'", long16 == 32L);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        jSONWriter11.writeInt64((long) 100);
        jSONWriter11.writeRaw("hi!");
        jSONWriter11.writeTimeHHMMSS8((int) '4', 3, (int) '#');
        boolean boolean20 = jSONWriter11.jsonb;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeRaw((byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        long[] longArray14 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter8.writeInt64(longArray14);
        java.nio.charset.Charset charset16 = jSONWriter8.getCharset();
        boolean[] booleanArray17 = new boolean[] {};
        jSONWriter8.writeBool(booleanArray17);
        jSONWriter8.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter8);
        char[] charArray22 = null;
        jSONWriter8.writeString(charArray22, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray31 = new double[] {};
        java.text.DecimalFormat decimalFormat32 = null;
        jSONWriter30.writeDouble(doubleArray31, decimalFormat32);
        jSONWriter26.writeDouble(doubleArray31);
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter8.writeDouble(doubleArray31, decimalFormat35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        java.time.LocalDate localDate41 = null;
        jSONWriter37.writeLocalDate(localDate41);
        java.time.LocalTime localTime43 = null;
        jSONWriter37.writeLocalTime(localTime43);
        jSONWriter37.close();
        boolean[] booleanArray52 = new boolean[] { false, false, false, true, false, false };
        jSONWriter37.writeBool(booleanArray52);
        jSONWriter8.writeBool(booleanArray52);
        java.time.ZonedDateTime zonedDateTime55 = null;
        jSONWriter8.writeZonedDateTime(zonedDateTime55);
        jSONWriter0.startArray((java.lang.Object) zonedDateTime55, 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter59.removeReference(obj60);
        long[] longArray62 = new long[] {};
        jSONWriter59.writeInt64(longArray62);
        java.util.Map map64 = null;
        jSONWriter59.write(map64);
        java.util.Map map66 = null;
        jSONWriter59.write(map66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray69 = new double[] {};
        java.text.DecimalFormat decimalFormat70 = null;
        jSONWriter68.writeDouble(doubleArray69, decimalFormat70);
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter59.writeDouble(doubleArray69, decimalFormat72);
        boolean boolean74 = jSONWriter59.useSingleQuote;
        jSONWriter59.writeNumberNull();
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter59);
        java.math.BigDecimal bigDecimal77 = null;
        jSONWriter59.writeDecimal(bigDecimal77);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, true, false, false]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[]");
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        jSONWriter0.writeNumberNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) 6, (double) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter13 = context6.getContextNameFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter14 = context6.getValueFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable15 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable15);
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter16.writeString(reader17);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNull(contextNameFilter13);
        org.junit.Assert.assertNull(valueFilter14);
        org.junit.Assert.assertNotNull(jSONWriter16);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        java.lang.Object obj11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        java.nio.charset.Charset charset16 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter12.config(feature17, true);
        jSONWriter12.writeName("");
        boolean boolean22 = jSONWriter12.isWriteNulls();
        java.lang.Class<?> wildcardClass23 = jSONWriter12.getClass();
        boolean boolean24 = jSONWriter10.isWriteTypeInfo(obj11, (java.lang.Class) wildcardClass23);
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray30);
        boolean boolean32 = context31.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId33 = context31.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = null;
        context31.setPropertyFilter(propertyFilter34);
        boolean boolean37 = context31.isEnabled((long) 100);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter45 = context44.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context44.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider48 = context44.provider;
        boolean boolean50 = context44.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(context44);
        long long52 = jSONWriter51.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context53 = jSONWriter51.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean55 = context53.isEnabled(feature54);
        boolean boolean56 = context31.isEnabled(feature54);
        boolean boolean58 = jSONWriter10.isWriteTypeInfo((java.lang.Object) feature54, (long) 100);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNull(afterFilter45);
        org.junit.Assert.assertNotNull(objectWriterProvider48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 34359804928L + "'", long52 == 34359804928L);
        org.junit.Assert.assertNotNull(context53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse;
        jSONWriter0.config(feature10, false);
        java.lang.Object obj14 = null;
        java.lang.String str15 = jSONWriter0.setPath((int) (short) 10, obj14);
        jSONWriter0.startObject();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse));
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startObject();
        java.math.BigInteger bigInteger15 = null;
        jSONWriter0.writeBigInt(bigInteger15);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        boolean boolean9 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        byte[] byteArray11 = null;
        jSONWriter0.writeStringLatin1(byteArray11);
        jSONWriter0.writeStringNull();
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        jSONWriter16.writeString("hi!");
        jSONWriter16.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter31.writeBooleanNull();
        jSONWriter31.writeComma();
        jSONWriter16.startArray((java.lang.Object) jSONWriter31, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37, feature38, feature39, feature40, feature41 };
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray42);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context44.setBeforeFilter(beforeFilter45);
        boolean boolean47 = jSONWriter31.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        context44.config(featureArray54);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context44.setLabelFilter(labelFilter59);
        boolean boolean61 = context44.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        long[] longArray65 = new long[] {};
        jSONWriter62.writeInt64(longArray65);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter62.config(feature67, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74, feature75 };
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        jSONWriter62.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.of(featureArray76);
        context44.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj83 = null;
        boolean boolean84 = jSONWriter82.removeReference(obj83);
        boolean boolean85 = jSONWriter82.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context86 = jSONWriter82.context;
        java.lang.String str87 = context86.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter88 = null;
        context86.setBeforeFilter(beforeFilter88);
        com.alibaba.fastjson2.JSONWriter.Feature feature90 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean91 = context86.isEnabled(feature90);
        context44.config(feature90, true);
        jSONWriter0.config(feature90, true);
        jSONWriter0.writeTypeName("$.[100].hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(context86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + feature90 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature90.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        java.io.OutputStream outputStream10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        boolean boolean22 = jSONWriter11.removeReference((java.lang.Object) jSONWriter14);
        java.nio.charset.Charset charset23 = jSONWriter11.getCharset();
        int int24 = jSONWriter8.flushTo(outputStream10, charset23);
        boolean boolean26 = jSONWriter8.isEnabled((long) '4');
        jSONWriter8.writeDateTimeISO8601((int) (short) 100, (int) (byte) 100, (int) (short) 1, (int) 'a', 100, 3, (int) 'a', (-1), true);
        jSONWriter8.writeMillis((long) (short) -1);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray17);
        jSONWriter21.writeBool(true);
        boolean boolean24 = jSONWriter21.isUseSingleQuotes();
        jSONWriter21.writeNumberNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startArray((int) (byte) 0);
        jSONWriter0.endObject();
        jSONWriter0.writeSymbol(0);
        jSONWriter0.writeInt8((byte) 1);
        boolean boolean22 = jSONWriter0.hasFilter((long) 6);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        context8.setDateFormat("$");
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable14);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter16 = context8.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNull(contextNameFilter16);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        jSONWriter5.writeNameRaw(byteArray7);
        java.nio.charset.Charset charset9 = jSONWriter5.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter5.config(feature10, true);
        jSONWriter5.writeSymbol("");
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter5.writeDecimal(bigDecimal15, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        java.nio.charset.Charset charset26 = jSONWriter22.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter22.config(feature27, true);
        jSONWriter22.writeName("");
        boolean boolean32 = jSONWriter22.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        char[] charArray39 = new char[] { '#', ' ', '#' };
        jSONWriter33.writeString(charArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        jSONWriter41.writeNull();
        boolean boolean45 = jSONWriter33.isWriteTypeInfo((java.lang.Object) jSONWriter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter41.writeBinary(byteArray48);
        boolean boolean52 = jSONWriter22.writeTypeName(byteArray48, (long) (byte) 100);
        jSONWriter18.writeRaw(byteArray48);
        jSONWriter5.writeNameRaw(byteArray48, 1024L);
        jSONWriter0.writeNameRaw(byteArray48, (long) 4);
        boolean boolean58 = jSONWriter0.isIgnoreNoneSerializable();
        jSONWriter0.writeDateTime19((int) (short) -1, 0, (-1), (int) (short) -1, (int) ' ', (int) (byte) 0);
        java.io.Writer writer66 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.flushTo(writer66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        long[] longArray43 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter37.writeInt64(longArray43);
        jSONWriter36.writeInt64(longArray43);
        java.math.BigDecimal bigDecimal46 = null;
        jSONWriter36.writeDecimal(bigDecimal46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        long[] longArray54 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter48.writeInt64(longArray54);
        java.nio.charset.Charset charset56 = jSONWriter48.getCharset();
        boolean[] booleanArray57 = new boolean[] {};
        jSONWriter48.writeBool(booleanArray57);
        boolean boolean60 = jSONWriter48.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61, feature62, feature63, feature64, feature65, feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        boolean boolean70 = jSONWriter48.removeReference((java.lang.Object) featureArray67);
        byte[] byteArray71 = jSONWriter48.getBytes();
        jSONWriter36.writeHex(byteArray71);
        boolean boolean74 = jSONWriter13.writeTypeName(byteArray71, (long) '#');
        jSONWriter13.writeDouble((double) 1056L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startArray((int) (byte) 0);
        jSONWriter0.endObject();
        jSONWriter0.writeSymbol(0);
        jSONWriter0.writeInt8((byte) 1);
        com.alibaba.fastjson2.JSONWriter.Context context21 = jSONWriter0.context;
        java.time.format.DateTimeFormatter dateTimeFormatter22 = context21.getDateFormatter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(context21);
        org.junit.Assert.assertNull(dateTimeFormatter22);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        java.lang.Class class24 = null;
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) afterFilter23, class24);
        jSONWriter0.writeDouble((double) (byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        long[] longArray34 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter28.writeInt64(longArray34);
        com.alibaba.fastjson2.JSONObject jSONObject36 = null;
        jSONWriter28.write(jSONObject36);
        java.lang.Class class39 = null;
        boolean boolean41 = jSONWriter28.isWriteTypeInfo((java.lang.Object) false, class39, (long) (short) -1);
        jSONWriter28.startObject();
        java.math.BigDecimal bigDecimal43 = null;
        jSONWriter28.writeDecimal(bigDecimal43, (long) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        jSONWriter46.writeNull();
        java.math.BigDecimal bigDecimal50 = null;
        jSONWriter46.writeDecimal(bigDecimal50, 1L);
        char[] charArray57 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter46.writeString(charArray57, (int) (byte) 100, (int) (short) 0);
        jSONWriter28.writeString(charArray57, (int) 'a', (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(charArray57, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[4,  , a, 4]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.of(context8);
        com.alibaba.fastjson2.SymbolTable symbolTable12 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable12);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = null;
        context8.setContextValueFilter(contextValueFilter14);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context8.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray23);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter26 = null;
        context25.setBeforeFilter(beforeFilter26);
        boolean boolean28 = context25.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        context25.config(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider16, featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        jSONWriter0.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter25.writeBooleanNull();
        boolean boolean28 = jSONWriter25.isEnabled((long) (byte) 0);
        boolean boolean29 = jSONWriter25.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter39.writeBooleanNull();
        byte[] byteArray41 = jSONWriter39.getBytes();
        jSONWriter30.writeRaw(byteArray41);
        jSONWriter25.writeNameRaw(byteArray41, 1L);
        jSONWriter25.writeInt64(0L);
        jSONWriter0.popPath((java.lang.Object) 0L);
        java.math.BigInteger bigInteger48 = null;
        jSONWriter0.writeBigInt(bigInteger48);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-81]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter24.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj35 = null;
        boolean boolean36 = jSONWriter34.removeReference(obj35);
        char[] charArray40 = new char[] { '#', ' ', '#' };
        jSONWriter34.writeString(charArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        jSONWriter42.writeNull();
        boolean boolean46 = jSONWriter34.isWriteTypeInfo((java.lang.Object) jSONWriter42);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        jSONWriter47.writeNameRaw(byteArray49);
        jSONWriter42.writeBinary(byteArray49);
        jSONWriter24.writeBinary(byteArray49);
        jSONWriter0.writeBinary(byteArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        short[] shortArray61 = new short[] { (byte) 100, (byte) 0, (short) -1, (short) 1, (short) -1, (byte) 10 };
        jSONWriter54.writeInt16(shortArray61);
        jSONWriter0.writeInt16(shortArray61);
        java.lang.Class<?> wildcardClass64 = shortArray61.getClass();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[100, 0, -1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray6 = new double[] {};
        java.text.DecimalFormat decimalFormat7 = null;
        jSONWriter5.writeDouble(doubleArray6, decimalFormat7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        jSONWriter5.writeDouble(doubleArray10);
        boolean boolean14 = jSONWriter5.isUTF16();
        java.lang.Class<?> wildcardClass15 = jSONWriter5.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter16 = jSONWriter0.getObjectWriter((java.lang.Class) wildcardClass15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter17.writeBooleanNull();
        boolean boolean20 = jSONWriter17.isEnabled((long) (byte) 0);
        boolean boolean21 = jSONWriter17.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime22 = null;
        jSONWriter17.writeOffsetDateTime(offsetDateTime22);
        jSONWriter0.writeAny((java.lang.Object) offsetDateTime22);
        com.alibaba.fastjson2.JSONObject jSONObject25 = null;
        jSONWriter0.write(jSONObject25);
        jSONWriter0.writeFloat((java.lang.Float) 100.0f);
        byte[] byteArray29 = jSONWriter0.getBytes();
        jSONWriter0.writeSymbol("hi!");
        java.lang.reflect.Type type32 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray39);
        jSONWriter42.writeSymbol("hi!");
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj46 = null;
        boolean boolean47 = jSONWriter45.removeReference(obj46);
        long[] longArray51 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter45.writeInt64(longArray51);
        java.nio.charset.Charset charset53 = jSONWriter45.getCharset();
        jSONWriter45.writeSymbol((int) (byte) -1);
        int int56 = jSONWriter45.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray62 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature57, feature58, feature59, feature60, feature61 };
        com.alibaba.fastjson2.JSONWriter.Context context63 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray62);
        boolean boolean64 = context63.isFormatyyyyMMddhhmmss19();
        boolean boolean66 = context63.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter67 = null;
        context63.setPropertyPreFilter(propertyPreFilter67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(context63);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray71 = new double[] {};
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter70.writeDouble(doubleArray71, decimalFormat72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray75 = new double[] {};
        java.text.DecimalFormat decimalFormat76 = null;
        jSONWriter74.writeDouble(doubleArray75, decimalFormat76);
        jSONWriter70.writeDouble(doubleArray75);
        boolean boolean79 = jSONWriter70.isUTF16();
        java.lang.Class<?> wildcardClass80 = jSONWriter70.getClass();
        boolean boolean81 = jSONWriter45.isWriteTypeInfo((java.lang.Object) jSONWriter69, (java.lang.Class) wildcardClass80);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter82 = jSONWriter42.getObjectWriter((java.lang.Class) wildcardClass80);
        // The following exception was thrown during execution in test generation
        try {
            com.alibaba.fastjson2.writer.ObjectWriter objectWriter83 = jSONWriter0.getObjectWriter(type32, (java.lang.Class) wildcardClass80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(objectWriter16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, -81, -81, -76, -48, 100]");
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectWriter82);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11);
        jSONWriter1.close();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeDateTimeISO8601((int) (byte) 10, (int) (short) 10, 9, (int) ' ', (-1), (int) ' ', 2, 100, true);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter9 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter10 = context8.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNull(propertyFilter9);
        org.junit.Assert.assertNull(contextNameFilter10);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider13);
        context15.setDateFormat("hi!");
        com.alibaba.fastjson2.SymbolTable symbolTable18 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context15, symbolTable18);
        boolean boolean21 = context15.isEnabled((long) 3);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        int int28 = jSONWriter0.level();
        jSONWriter0.writeFloat((float) 34359804928L);
        jSONWriter0.writeReference("");
        java.math.BigInteger bigInteger33 = null;
        jSONWriter0.writeBigInt(bigInteger33, (long) 3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter19.isWriteTypeInfo((java.lang.Object) true, type24);
        jSONWriter10.popPath((java.lang.Object) boolean25);
        jSONWriter10.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        jSONWriter29.writeNameRaw(byteArray31);
        jSONWriter10.writeNameRaw(byteArray31);
        long long35 = jSONWriter10.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        java.lang.String str38 = jSONWriter10.setPath(fieldWriter36, (java.lang.Object) (-1.0f));
        long long39 = jSONWriter10.getFeatures();
        jSONWriter0.writeAny((java.lang.Object) long39);
        jSONWriter0.writeNull();
        boolean boolean42 = jSONWriter0.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44, feature45, feature46, feature47, feature48 };
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray49);
        jSONWriter53.writeArrayNull();
        jSONWriter53.endArray();
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1056L + "'", long35 == 1056L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1024L + "'", long39 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(jSONWriter53);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        java.math.BigInteger bigInteger25 = null;
        jSONWriter10.writeBigInt(bigInteger25, (long) 0);
        boolean boolean28 = jSONWriter10.isUTF8();
        java.time.ZonedDateTime zonedDateTime29 = null;
        jSONWriter10.writeZonedDateTime(zonedDateTime29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeTimeHHMMSS8(6, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        boolean boolean28 = jSONWriter19.hasFilter(0L);
        jSONWriter19.writeSymbol(1);
        java.lang.String str31 = jSONWriter1.setPath((int) (short) 0, (java.lang.Object) 1);
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter1.writeFloat((float) 1L, decimalFormat33);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        jSONWriter0.writeNumberNull();
        boolean boolean18 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray25);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter28 = null;
        context27.setLabelFilter(labelFilter28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(context27);
        com.alibaba.fastjson2.SymbolTable symbolTable31 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context27, symbolTable31);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter33 = null;
        context27.setContextValueFilter(contextValueFilter33);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider35 = context27.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37, feature38, feature39, feature40, feature41 };
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray42);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context44.setBeforeFilter(beforeFilter45);
        boolean boolean47 = context44.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        context44.config(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider35, featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray54);
        jSONWriter0.config(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(objectWriterProvider35);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter60);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        char[] charArray14 = new char[] { '#', ' ', '#' };
        jSONWriter8.writeString(charArray14);
        java.lang.Class class16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) charArray14, class16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        java.lang.Class class31 = null;
        jSONWriter29.checkAndWriteTypeName((java.lang.Object) (byte) 0, class31);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter29.writeBigInt(bigInteger33);
        java.lang.reflect.Type type35 = null;
        boolean boolean36 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter29, type35);
        jSONWriter18.writeAny((java.lang.Object) boolean36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        jSONWriter38.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        jSONWriter42.writeNameRaw(byteArray44);
        java.nio.charset.Charset charset46 = jSONWriter42.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter42.config(feature47, true);
        jSONWriter42.writeName("");
        boolean boolean52 = jSONWriter42.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        char[] charArray59 = new char[] { '#', ' ', '#' };
        jSONWriter53.writeString(charArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        jSONWriter61.writeNull();
        boolean boolean65 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter61);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        jSONWriter66.writeNameRaw(byteArray68);
        jSONWriter61.writeBinary(byteArray68);
        boolean boolean72 = jSONWriter42.writeTypeName(byteArray68, (long) (byte) 100);
        jSONWriter38.writeRaw(byteArray68);
        jSONWriter18.writeStringLatin1(byteArray68);
        boolean boolean75 = jSONWriter0.isRefDetect((java.lang.Object) byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray((double) (short) 10, (double) ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        boolean boolean13 = context6.isEnabled(0L);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = null;
        context6.setLabelFilter(labelFilter14);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter16 = null;
        context6.setContextNameFilter(contextNameFilter16);
        com.alibaba.fastjson2.filter.NameFilter nameFilter18 = null;
        context6.setNameFilter(nameFilter18);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter0.level();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22, feature23 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        boolean boolean26 = jSONWriter25.isUseSingleQuotes();
        java.time.OffsetDateTime offsetDateTime27 = null;
        jSONWriter25.writeOffsetDateTime(offsetDateTime27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        boolean boolean36 = context35.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context35.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context39);
        jSONWriter40.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray44 = new double[] {};
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter43.writeDouble(doubleArray44, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        jSONWriter43.writeDouble(doubleArray48);
        boolean boolean52 = jSONWriter43.isUTF16();
        java.lang.Class<?> wildcardClass53 = jSONWriter43.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray60);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter65 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        long long70 = jSONWriter68.getFeatures((long) (short) 100);
        boolean boolean71 = jSONWriter68.jsonb;
        java.lang.String str72 = jSONWriter64.setPath(fieldWriter65, (java.lang.Object) jSONWriter68);
        java.lang.Class<?> wildcardClass73 = jSONWriter68.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter74 = jSONWriter40.getObjectWriter((java.lang.reflect.Type) wildcardClass53, (java.lang.Class) wildcardClass73);
        boolean boolean76 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter25, (java.lang.Class) wildcardClass73, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject77 = null;
        jSONWriter0.write(jSONObject77);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateYYYMMDD10(0, (int) (short) 10, 3);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(objectWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path3, 100);
        com.alibaba.fastjson2.JSONWriter.Path path7 = new com.alibaba.fastjson2.JSONWriter.Path(path5, "$");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        char[] charArray14 = null;
        jSONWriter0.writeString(charArray14, (int) (short) 1, (int) '#');
        jSONWriter0.writeDateTime19((int) '4', 6, (int) '4', (int) (byte) 100, (int) (byte) 100, (int) (byte) 100);
        java.io.Reader reader25 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(reader25);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter13.writeBooleanNull();
        boolean boolean16 = jSONWriter13.isEnabled((long) (byte) 0);
        boolean boolean17 = jSONWriter13.isIgnoreErrorGetter();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        long[] longArray24 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter18.writeInt64(longArray24);
        java.nio.charset.Charset charset26 = jSONWriter18.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter27.writeBooleanNull();
        byte[] byteArray29 = jSONWriter27.getBytes();
        jSONWriter18.writeRaw(byteArray29);
        jSONWriter13.writeNameRaw(byteArray29, 1L);
        jSONWriter1.writeHex(byteArray29);
        java.io.Reader reader34 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader34);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-81]");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray59);
        jSONWriter0.config(featureArray59);
        jSONWriter0.writeDateTime19((int) (short) -1, 10, 100, 0, (int) (byte) 0, 6);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter61);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context8.getBeforeFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = null;
        context8.setNameFilter(nameFilter14);
        boolean boolean16 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter17 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter18 = null;
        context8.setLabelFilter(labelFilter18);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(propertyFilter17);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context3 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray10 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature5, feature6, feature7, feature8, feature9 };
        com.alibaba.fastjson2.JSONWriter.Context context11 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray10);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        boolean boolean24 = context19.isDateFormatHasDay();
        java.lang.reflect.Type type25 = null;
        boolean boolean27 = jSONWriter12.isWriteTypeInfo((java.lang.Object) boolean24, type25, (long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        long[] longArray31 = new long[] {};
        jSONWriter28.writeInt64(longArray31);
        java.util.Map map33 = null;
        jSONWriter28.write(map33);
        java.util.Map map35 = null;
        jSONWriter28.write(map35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray38 = new double[] {};
        java.text.DecimalFormat decimalFormat39 = null;
        jSONWriter37.writeDouble(doubleArray38, decimalFormat39);
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter28.writeDouble(doubleArray38, decimalFormat41);
        boolean boolean43 = jSONWriter28.useSingleQuote;
        jSONWriter28.writeNumberNull();
        java.lang.Class class45 = null;
        boolean boolean47 = jSONWriter12.isWriteMapTypeInfo((java.lang.Object) jSONWriter28, class45, (long) 'a');
        com.alibaba.fastjson2.SymbolTable symbolTable48 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable48);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50, feature51, feature52, feature53, feature54 };
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        java.lang.Class class58 = null;
        boolean boolean60 = jSONWriter49.isWriteMapTypeInfo((java.lang.Object) jSONWriter57, class58, 0L);
        boolean boolean61 = jSONWriter49.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter62.writeBooleanNull();
        byte[] byteArray64 = jSONWriter62.getBytes();
        jSONWriter49.writeNameRaw(byteArray64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray67 = new double[] {};
        java.text.DecimalFormat decimalFormat68 = null;
        jSONWriter66.writeDouble(doubleArray67, decimalFormat68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray71 = new double[] {};
        java.text.DecimalFormat decimalFormat72 = null;
        jSONWriter70.writeDouble(doubleArray71, decimalFormat72);
        jSONWriter66.writeDouble(doubleArray71);
        boolean boolean75 = jSONWriter66.isUTF16();
        java.lang.Class<?> wildcardClass76 = jSONWriter66.getClass();
        boolean boolean78 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter49, (java.lang.Class) wildcardClass76, (long) (short) 1);
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter79 = jSONWriter4.getObjectWriter((java.lang.Class) wildcardClass76);
        java.math.BigInteger bigInteger80 = null;
        jSONWriter4.writeBigInt(bigInteger80, (long) '4');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectWriter79);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = null;
        context6.setPropertyFilter(propertyFilter10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider20 = context18.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider20);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter22 = context21.getContextValueFilter();
        java.time.ZoneId zoneId23 = context21.getZoneId();
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context21, symbolTable24);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter26 = context21.getPropertyPreFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean;
        context21.config(feature27, true);
        boolean boolean30 = context6.isEnabled(feature27);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter31 = context6.getContextNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider20);
        org.junit.Assert.assertNull(contextValueFilter22);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNull(propertyPreFilter26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.WritePairAsJavaBean));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(contextNameFilter31);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12 };
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray13);
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray13);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider10, featureArray13);
        jSONWriter17.writeChar('#');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter17);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable;
        java.lang.String str12 = jSONWriter8.setPath((int) (short) 10, (java.lang.Object) feature11);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray14);
        java.time.OffsetDateTime offsetDateTime16 = null;
        jSONWriter15.writeOffsetDateTime(offsetDateTime16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        jSONWriter18.writeNameRaw(byteArray20);
        jSONWriter18.writeString("hi!");
        jSONWriter18.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray32);
        jSONWriter33.writeBooleanNull();
        jSONWriter33.writeComma();
        jSONWriter18.startArray((java.lang.Object) jSONWriter33, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray44);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter47 = null;
        context46.setBeforeFilter(beforeFilter47);
        boolean boolean49 = jSONWriter33.removeReference((java.lang.Object) context46);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray56 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51, feature52, feature53, feature54, feature55 };
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray56);
        com.alibaba.fastjson2.JSONWriter.Context context58 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray56);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray56);
        context46.config(featureArray56);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter61 = null;
        context46.setLabelFilter(labelFilter61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj64 = null;
        boolean boolean65 = jSONWriter63.removeReference(obj64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj67 = null;
        boolean boolean68 = jSONWriter66.removeReference(obj67);
        char[] charArray72 = new char[] { '#', ' ', '#' };
        jSONWriter66.writeString(charArray72);
        boolean boolean74 = jSONWriter63.removeReference((java.lang.Object) jSONWriter66);
        boolean boolean75 = jSONWriter66.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter66.writeEnum((java.lang.Enum) feature76);
        boolean boolean78 = context46.isEnabled(feature76);
        jSONWriter15.config(feature76, false);
        boolean boolean82 = jSONWriter8.isWriteTypeInfo((java.lang.Object) jSONWriter15, (long) 3);
        java.lang.Class<?> wildcardClass83 = jSONWriter15.getClass();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreNoneSerializable));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray56);
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = null;
        context8.setAfterFilter(afterFilter10);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter12 = context8.getContextValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(contextValueFilter12);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        boolean boolean12 = jSONWriter3.jsonb;
        long long13 = jSONWriter3.getFeatures();
        jSONWriter3.writeInt32(4);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeName("");
        boolean boolean10 = jSONWriter0.isWriteNulls();
        java.math.BigDecimal bigDecimal11 = null;
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDecimal(bigDecimal11, (long) ' ', decimalFormat13);
        jSONWriter0.writeRaw((byte) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        jSONWriter10.writeDateTime14((int) (short) 10, (int) (short) 10, (int) '#', 4, (int) ' ', (int) '#');
        java.math.BigDecimal bigDecimal33 = null;
        jSONWriter10.writeDecimal(bigDecimal33, (long) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        jSONWriter0.writeFloat((java.lang.Float) (-1.0f));
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context17.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context17.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context17.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider21, featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray28);
        jSONWriter32.writeBool(true);
        boolean boolean35 = jSONWriter32.isUseSingleQuotes();
        boolean boolean36 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) boolean35);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        jSONWriter0.writeFloat((java.lang.Float) (-1.0f));
        java.io.Reader reader11 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(reader11);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray16);
        jSONWriter20.writeArrayNull();
        boolean boolean22 = jSONWriter20.utf8;
        boolean boolean23 = jSONWriter20.isBeanToArray();
        jSONWriter20.endObject();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        jSONWriter25.writeNameRaw(byteArray27);
        java.nio.charset.Charset charset29 = jSONWriter25.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter25.config(feature30, true);
        jSONWriter25.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj36 = null;
        boolean boolean37 = jSONWriter35.removeReference(obj36);
        jSONWriter35.writeNull();
        java.math.BigDecimal bigDecimal39 = null;
        jSONWriter35.writeDecimal(bigDecimal39, 1L);
        java.math.BigInteger bigInteger42 = null;
        jSONWriter35.writeBigInt(bigInteger42);
        jSONWriter35.writeInt64((long) 0);
        boolean boolean47 = jSONWriter25.isWriteTypeInfo((java.lang.Object) jSONWriter35, (long) (byte) 1);
        java.math.BigInteger bigInteger48 = null;
        jSONWriter35.writeBigInt(bigInteger48);
        com.alibaba.fastjson2.JSONWriter.Path path50 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path52 = new com.alibaba.fastjson2.JSONWriter.Path(path50, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        long[] longArray59 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter53.writeInt64(longArray59);
        java.nio.charset.Charset charset61 = jSONWriter53.getCharset();
        boolean boolean62 = path50.equals((java.lang.Object) charset61);
        com.alibaba.fastjson2.JSONWriter.Path path64 = new com.alibaba.fastjson2.JSONWriter.Path(path50, (int) '#');
        com.alibaba.fastjson2.JSONWriter.Path path66 = new com.alibaba.fastjson2.JSONWriter.Path(path50, "$");
        java.lang.String str67 = path50.toString();
        com.alibaba.fastjson2.JSONWriter.Path path69 = new com.alibaba.fastjson2.JSONWriter.Path(path50, "$");
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        jSONWriter70.writeNameRaw(byteArray72);
        java.nio.charset.Charset charset74 = jSONWriter70.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray76 = new double[] {};
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter75.writeDouble(doubleArray76, decimalFormat77);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray80 = new double[] {};
        java.text.DecimalFormat decimalFormat81 = null;
        jSONWriter79.writeDouble(doubleArray80, decimalFormat81);
        jSONWriter75.writeDouble(doubleArray80);
        boolean boolean84 = jSONWriter75.isUTF16();
        java.lang.Class<?> wildcardClass85 = jSONWriter75.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter86 = jSONWriter70.getObjectWriter((java.lang.Class) wildcardClass85);
        boolean boolean88 = jSONWriter35.isWriteMapTypeInfo((java.lang.Object) path50, (java.lang.Class) wildcardClass85, (long) (byte) 0);
        boolean boolean90 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter20, (java.lang.reflect.Type) wildcardClass85, (long) ' ');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(path50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "$" + "'", str67, "$");
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(objectWriter86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean8 = jSONWriter0.isWriteTypeInfo((java.lang.Object) featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        java.lang.Class class19 = null;
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) (byte) 0, class19);
        java.math.BigInteger bigInteger21 = null;
        jSONWriter17.writeBigInt(bigInteger21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter23.writeEnum((java.lang.Enum) feature25);
        boolean boolean27 = jSONWriter23.hasFilter();
        jSONWriter23.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter23.writeDouble(doubleArray40, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        jSONWriter47.writeDouble(doubleArray52);
        boolean boolean56 = jSONWriter47.isUTF16();
        java.lang.Class<?> wildcardClass57 = jSONWriter47.getClass();
        boolean boolean58 = jSONWriter17.isWriteTypeInfo((java.lang.Object) doubleArray40, (java.lang.Class) wildcardClass57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter9.writeDouble(doubleArray40, decimalFormat59);
        boolean boolean61 = jSONWriter9.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        java.nio.charset.Charset charset13 = jSONWriter9.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter9.config(feature14, true);
        jSONWriter9.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter19.writeDecimal(bigDecimal23, 1L);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter19.writeBigInt(bigInteger26);
        jSONWriter19.writeInt64((long) 0);
        boolean boolean31 = jSONWriter9.isWriteTypeInfo((java.lang.Object) jSONWriter19, (long) (byte) 1);
        java.time.LocalDate localDate32 = null;
        jSONWriter19.writeLocalDate(localDate32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter19);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        long[] longArray42 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter36.writeInt64(longArray42);
        java.nio.charset.Charset charset44 = jSONWriter36.getCharset();
        boolean[] booleanArray45 = new boolean[] {};
        jSONWriter36.writeBool(booleanArray45);
        jSONWriter36.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj51 = null;
        boolean boolean52 = jSONWriter50.removeReference(obj51);
        long[] longArray56 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter50.writeInt64(longArray56);
        java.nio.charset.Charset charset58 = jSONWriter50.getCharset();
        boolean[] booleanArray59 = new boolean[] {};
        jSONWriter50.writeBool(booleanArray59);
        jSONWriter50.writeSymbol((int) (byte) 100);
        boolean boolean63 = jSONWriter49.isRefDetect((java.lang.Object) jSONWriter50);
        int int64 = jSONWriter49.level();
        long long66 = jSONWriter49.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass67 = jSONWriter49.getClass();
        boolean boolean69 = jSONWriter19.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass67, (long) '4');
        boolean boolean71 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) feature8, (java.lang.Class) wildcardClass67, (long) 6);
        boolean boolean72 = jSONWriter0.isUTF8();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullStringAsEmpty));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        boolean boolean12 = context9.isDateFormatUnixTime();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        context28.config(featureArray38);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = null;
        context28.setLabelFilter(labelFilter43);
        java.lang.String str45 = context28.getDateFormat();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter46 = context28.getContextValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter47 = null;
        context28.setBeforeFilter(beforeFilter47);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNull(contextValueFilter46);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        char[] charArray37 = new char[] { '#', ' ', '#' };
        jSONWriter31.writeString(charArray37);
        jSONWriter31.writeMillis(1056L);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse;
        jSONWriter31.config(feature41, false);
        jSONWriter10.writeEnum((java.lang.Enum) feature41);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullBooleanAsFalse));
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.JSONWriter.Context context13 = jSONWriter12.context;
        boolean boolean14 = jSONWriter12.isRefDetect();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        jSONWriter25.writeNull();
        java.math.BigDecimal bigDecimal29 = null;
        jSONWriter25.writeDecimal(bigDecimal29, 1L);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter25.writeBigInt(bigInteger32);
        jSONWriter25.writeInt64((long) 0);
        boolean boolean37 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter25, (long) (byte) 1);
        jSONWriter25.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context46 = jSONWriter25.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter47 = context46.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter48 = null;
        context46.setLabelFilter(labelFilter48);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.startArray((java.lang.Object) labelFilter48, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(context13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context46);
        org.junit.Assert.assertNull(valueFilter47);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter9.startObject();
        java.nio.charset.Charset charset11 = jSONWriter9.getCharset();
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter9.writeDouble((double) 10L, decimalFormat13);
        java.time.LocalTime localTime15 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeLocalTime(localTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter.Context context15 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray14);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = null;
        context16.setBeforeFilter(beforeFilter17);
        boolean boolean19 = context16.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        context16.config(featureArray26);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        boolean boolean38 = context37.isFormatyyyyMMddhhmmss19();
        boolean boolean40 = context37.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter41 = null;
        context37.setPropertyPreFilter(propertyPreFilter41);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter43 = context37.getLabelFilter();
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter44 = null;
        context37.setContextNameFilter(contextNameFilter44);
        boolean boolean46 = jSONWriter30.isRefDetect((java.lang.Object) context37);
        jSONWriter30.startObject();
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter30);
        jSONWriter0.writeDouble((double) 0.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        long[] longArray57 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter51.writeInt64(longArray57);
        java.nio.charset.Charset charset59 = jSONWriter51.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter60.writeBooleanNull();
        byte[] byteArray62 = jSONWriter60.getBytes();
        jSONWriter51.writeRaw(byteArray62);
        jSONWriter0.writeHex(byteArray62);
        long long65 = jSONWriter0.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(labelFilter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-81]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1024L + "'", long65 == 1024L);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        int int13 = jSONWriter1.level();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        java.nio.charset.Charset charset18 = jSONWriter14.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter14.config(feature19, true);
        jSONWriter14.writeNull();
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter14.writeFloat((float) '#', decimalFormat24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        long[] longArray32 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter26.writeInt64(longArray32);
        java.nio.charset.Charset charset34 = jSONWriter26.getCharset();
        boolean[] booleanArray35 = new boolean[] {};
        jSONWriter26.writeBool(booleanArray35);
        jSONWriter26.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj40 = null;
        boolean boolean41 = jSONWriter39.removeReference(obj40);
        long[] longArray42 = new long[] {};
        jSONWriter39.writeInt64(longArray42);
        java.util.Map map44 = null;
        jSONWriter39.write(map44);
        java.util.Map map46 = null;
        jSONWriter39.write(map46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray49 = new double[] {};
        java.text.DecimalFormat decimalFormat50 = null;
        jSONWriter48.writeDouble(doubleArray49, decimalFormat50);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter39.writeDouble(doubleArray49, decimalFormat52);
        boolean boolean54 = jSONWriter39.useSingleQuote;
        java.lang.Class class55 = null;
        boolean boolean57 = jSONWriter26.isWriteMapTypeInfo((java.lang.Object) jSONWriter39, class55, (long) (short) -1);
        jSONWriter26.endObject();
        jSONWriter26.writeBooleanNull();
        jSONWriter26.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter62.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter62.writeEnum((java.lang.Enum) feature64);
        boolean boolean66 = jSONWriter62.hasFilter();
        jSONWriter62.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable69 = jSONWriter62.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable70 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable70);
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature72, feature73, feature74, feature75, feature76 };
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray77);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        java.lang.Class class80 = null;
        boolean boolean82 = jSONWriter71.isWriteMapTypeInfo((java.lang.Object) jSONWriter79, class80, 0L);
        java.lang.String[] strArray84 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        jSONWriter71.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter62.write((java.util.List) strList85);
        jSONWriter26.write((java.util.List) strList85);
        jSONWriter14.writeString((java.util.List<java.lang.String>) strList85);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList85);
        java.math.BigInteger bigInteger92 = null;
        jSONWriter1.writeBigInt(bigInteger92);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(symbolTable69);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        java.lang.Class class17 = null;
        boolean boolean18 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        java.nio.charset.Charset charset27 = jSONWriter19.getCharset();
        boolean[] booleanArray28 = new boolean[] {};
        jSONWriter19.writeBool(booleanArray28);
        boolean boolean31 = jSONWriter19.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray38);
        boolean boolean41 = jSONWriter19.removeReference((java.lang.Object) featureArray38);
        byte[] byteArray42 = jSONWriter19.getBytes();
        char[] charArray48 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter19.writeString(charArray48, (int) (short) 10, (int) (short) 0, true);
        jSONWriter0.writeString(charArray48);
        java.time.OffsetDateTime offsetDateTime54 = null;
        jSONWriter0.writeOffsetDateTime(offsetDateTime54);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ ,  , a, #, #]");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter10 = context9.getContextValueFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = null;
        context9.setBeforeFilter(beforeFilter11);
        java.time.format.DateTimeFormatter dateTimeFormatter13 = context9.getDateFormatter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNull(contextValueFilter10);
        org.junit.Assert.assertNull(dateTimeFormatter13);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        char[] charArray16 = new char[] { '#', ' ', '#' };
        jSONWriter10.writeString(charArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        jSONWriter18.writeNull();
        boolean boolean22 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        jSONWriter23.writeNameRaw(byteArray25);
        jSONWriter18.writeBinary(byteArray25);
        jSONWriter0.writeBinary(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDoubleArray(0.0d, (double) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature feature7 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray12 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature7, feature8, feature9, feature10, feature11 };
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray12);
        boolean boolean14 = context13.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId15 = context13.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = context13.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context13.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context13.config(feature18, false);
        java.lang.String str21 = jSONWriter0.setPath("", (java.lang.Object) context13);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.of(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context31 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        context13.config(featureArray28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = null;
        context13.setAfterFilter(afterFilter34);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature7 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature7.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNull(afterFilter16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(jSONWriter32);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter10 = null;
        context6.setNameFilter(nameFilter10);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter12 = null;
        context6.setAfterFilter(afterFilter12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNotNull(jSONWriter14);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        jSONWriter0.endArray();
        boolean boolean7 = jSONWriter0.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(context6);
        long long14 = jSONWriter13.getFeatures();
        jSONWriter13.endArray();
        jSONWriter13.writeNumberNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = new double[] {};
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter11.writeDouble(doubleArray12, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = new double[] {};
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter15.writeDouble(doubleArray16, decimalFormat17);
        jSONWriter11.writeDouble(doubleArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        jSONWriter20.writeString("hi!");
        jSONWriter20.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray34);
        jSONWriter35.writeBooleanNull();
        jSONWriter35.writeComma();
        jSONWriter20.startArray((java.lang.Object) jSONWriter35, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray46);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter49 = null;
        context48.setBeforeFilter(beforeFilter49);
        boolean boolean51 = jSONWriter35.removeReference((java.lang.Object) context48);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53, feature54, feature55, feature56, feature57 };
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray58);
        context48.config(featureArray58);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter63 = null;
        context48.setLabelFilter(labelFilter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        char[] charArray74 = new char[] { '#', ' ', '#' };
        jSONWriter68.writeString(charArray74);
        boolean boolean76 = jSONWriter65.removeReference((java.lang.Object) jSONWriter68);
        boolean boolean77 = jSONWriter68.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter68.writeEnum((java.lang.Enum) feature78);
        boolean boolean80 = context48.isEnabled(feature78);
        jSONWriter11.writeEnum((java.lang.Enum) feature78);
        context6.config(feature78, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.of(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSONWriter84);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter10 = context9.getContextValueFilter();
        java.time.ZoneId zoneId11 = context9.getZoneId();
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        java.nio.charset.Charset charset16 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter12.config(feature17, true);
        jSONWriter12.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        long[] longArray27 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter21.writeInt64(longArray27);
        java.nio.charset.Charset charset29 = jSONWriter21.getCharset();
        boolean[] booleanArray30 = new boolean[] {};
        jSONWriter21.writeBool(booleanArray30);
        boolean boolean33 = jSONWriter21.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray40);
        boolean boolean43 = jSONWriter21.removeReference((java.lang.Object) featureArray40);
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter45.isWriteMapTypeInfo((java.lang.Object) jSONWriter53, class54, 0L);
        boolean boolean57 = jSONWriter45.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter58.writeBooleanNull();
        byte[] byteArray60 = jSONWriter58.getBytes();
        jSONWriter45.writeNameRaw(byteArray60);
        jSONWriter21.writeRaw(byteArray60);
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible;
        boolean boolean64 = jSONWriter21.isEnabled(feature63);
        jSONWriter12.config(feature63, false);
        boolean boolean67 = context9.isEnabled(feature63);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNull(contextValueFilter10);
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-81]");
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserCompatible));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        java.time.format.DateTimeFormatter dateTimeFormatter9 = context6.getDateFormatter();
        context6.setDateFormat("$[0]");
        java.time.ZoneId zoneId12 = context6.getZoneId();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter13 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter14 = null;
        context6.setPropertyPreFilter(propertyPreFilter14);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNull(valueFilter13);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        java.nio.charset.Charset charset20 = jSONWriter16.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter16.config(feature21, true);
        jSONWriter16.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        jSONWriter25.writeNull();
        java.lang.reflect.Type type30 = null;
        boolean boolean31 = jSONWriter25.isWriteTypeInfo((java.lang.Object) true, type30);
        jSONWriter16.popPath((java.lang.Object) boolean31);
        jSONWriter16.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        jSONWriter35.writeNameRaw(byteArray37);
        jSONWriter16.writeNameRaw(byteArray37);
        long long41 = jSONWriter16.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray51);
        java.lang.Class class54 = null;
        jSONWriter52.checkAndWriteTypeName((java.lang.Object) (byte) 0, class54);
        java.math.BigInteger bigInteger56 = null;
        jSONWriter52.writeBigInt(bigInteger56);
        java.lang.reflect.Type type58 = null;
        boolean boolean59 = jSONWriter42.isWriteTypeInfo((java.lang.Object) jSONWriter52, type58);
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        jSONWriter60.writeNameRaw(byteArray62);
        java.nio.charset.Charset charset64 = jSONWriter60.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter60.config(feature65, true);
        jSONWriter60.writeName("");
        boolean boolean70 = jSONWriter60.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj72 = null;
        boolean boolean73 = jSONWriter71.removeReference(obj72);
        char[] charArray77 = new char[] { '#', ' ', '#' };
        jSONWriter71.writeString(charArray77);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj80 = null;
        boolean boolean81 = jSONWriter79.removeReference(obj80);
        jSONWriter79.writeNull();
        boolean boolean83 = jSONWriter71.isWriteTypeInfo((java.lang.Object) jSONWriter79);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        jSONWriter84.writeNameRaw(byteArray86);
        jSONWriter79.writeBinary(byteArray86);
        boolean boolean90 = jSONWriter60.writeTypeName(byteArray86, (long) (byte) 100);
        jSONWriter42.writeBinary(byteArray86);
        jSONWriter16.writeNameRaw(byteArray86);
        jSONWriter0.writeNameRaw(byteArray86);
        com.alibaba.fastjson2.SymbolTable symbolTable94 = jSONWriter0.getSymbolTable();
        jSONWriter0.writeInt32(0);
        java.time.LocalTime localTime97 = null;
        jSONWriter0.writeLocalTime(localTime97);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1056L + "'", long41 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[100]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(symbolTable94);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context8.getBeforeFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = null;
        context8.setNameFilter(nameFilter14);
        boolean boolean16 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter17 = null;
        context8.setContextValueFilter(contextValueFilter17);
        boolean boolean19 = context8.isDateFormatHasHour();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        jSONWriter0.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.of(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        java.nio.charset.Charset charset27 = jSONWriter19.getCharset();
        boolean[] booleanArray28 = new boolean[] {};
        jSONWriter19.writeBool(booleanArray28);
        boolean boolean31 = jSONWriter19.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray38);
        boolean boolean41 = jSONWriter19.removeReference((java.lang.Object) featureArray38);
        byte[] byteArray42 = jSONWriter19.getBytes();
        jSONWriter18.writeBase64(byteArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        jSONWriter44.writeNameRaw(byteArray46);
        java.nio.charset.Charset charset48 = jSONWriter44.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter44.config(feature49, true);
        jSONWriter44.writeBool(false);
        jSONWriter44.writeName("$");
        java.math.BigDecimal bigDecimal56 = null;
        jSONWriter44.writeDecimal(bigDecimal56, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter59.removeReference(obj60);
        jSONWriter59.writeNull();
        java.math.BigDecimal bigDecimal63 = null;
        jSONWriter59.writeDecimal(bigDecimal63, 1L);
        java.math.BigInteger bigInteger66 = null;
        jSONWriter59.writeBigInt(bigInteger66);
        jSONWriter59.close();
        jSONWriter59.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter71.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter71.writeEnum((java.lang.Enum) feature73);
        boolean boolean75 = jSONWriter71.hasFilter();
        jSONWriter71.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj79 = null;
        boolean boolean80 = jSONWriter78.removeReference(obj79);
        jSONWriter78.writeNull();
        java.math.BigDecimal bigDecimal82 = null;
        jSONWriter78.writeDecimal(bigDecimal82, 1L);
        char[] charArray89 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter78.writeString(charArray89, (int) (byte) 100, (int) (short) 0);
        jSONWriter71.writeString(charArray89);
        jSONWriter59.writeString(charArray89);
        jSONWriter44.writeString(charArray89);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter18.writeString(charArray89, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[4,  , a, 4]");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        jSONWriter0.startObject();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        context8.config(featureArray18);
        com.alibaba.fastjson2.SymbolTable symbolTable22 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        boolean boolean31 = context30.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId32 = context30.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter33 = context30.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter34 = context30.getAfterFilter();
        boolean boolean35 = context30.isDateFormatHasDay();
        context30.setDateFormat("$");
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray44);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter47 = null;
        context46.setLabelFilter(labelFilter47);
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray55 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature50, feature51, feature52, feature53, feature54 };
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray55);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray55);
        context46.config(featureArray55);
        context30.config(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray55);
        jSONWriter23.config(featureArray55);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray55);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNull(afterFilter33);
        org.junit.Assert.assertNull(afterFilter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter63);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        java.lang.Object obj14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        long[] longArray21 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter15.writeInt64(longArray21);
        java.nio.charset.Charset charset23 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter24.writeBooleanNull();
        byte[] byteArray26 = jSONWriter24.getBytes();
        jSONWriter15.writeRaw(byteArray26);
        jSONWriter15.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        jSONWriter30.writeSymbol((int) (byte) -1);
        int int41 = jSONWriter30.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        boolean boolean49 = context48.isFormatyyyyMMddhhmmss19();
        boolean boolean51 = context48.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter52 = null;
        context48.setPropertyPreFilter(propertyPreFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(context48);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray56 = new double[] {};
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter55.writeDouble(doubleArray56, decimalFormat57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray60 = new double[] {};
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter59.writeDouble(doubleArray60, decimalFormat61);
        jSONWriter55.writeDouble(doubleArray60);
        boolean boolean64 = jSONWriter55.isUTF16();
        java.lang.Class<?> wildcardClass65 = jSONWriter55.getClass();
        boolean boolean66 = jSONWriter30.isWriteTypeInfo((java.lang.Object) jSONWriter54, (java.lang.Class) wildcardClass65);
        boolean boolean68 = jSONWriter15.isWriteTypeInfo((java.lang.Object) feature29, (java.lang.Class) wildcardClass65, (long) (short) -1);
        boolean boolean70 = jSONWriter0.isWriteTypeInfo(obj14, (java.lang.Class) wildcardClass65, (long) (short) 100);
        jSONWriter0.startArray(3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-81]");
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter14 = context6.getBeforeFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter15 = null;
        context6.setPropertyPreFilter(propertyPreFilter15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context6);
        boolean boolean18 = context6.isFormatyyyyMMddhhmmss19();
        context6.setDateFormat("$[0].hi\\!.$");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(beforeFilter14);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj27 = null;
        boolean boolean28 = jSONWriter26.removeReference(obj27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        java.lang.Class class38 = null;
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) (byte) 0, class38);
        java.math.BigInteger bigInteger40 = null;
        jSONWriter36.writeBigInt(bigInteger40);
        java.lang.reflect.Type type42 = null;
        boolean boolean43 = jSONWriter26.isWriteTypeInfo((java.lang.Object) jSONWriter36, type42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        jSONWriter44.writeNameRaw(byteArray46);
        java.nio.charset.Charset charset48 = jSONWriter44.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter44.config(feature49, true);
        jSONWriter44.writeName("");
        boolean boolean54 = jSONWriter44.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj56 = null;
        boolean boolean57 = jSONWriter55.removeReference(obj56);
        char[] charArray61 = new char[] { '#', ' ', '#' };
        jSONWriter55.writeString(charArray61);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj64 = null;
        boolean boolean65 = jSONWriter63.removeReference(obj64);
        jSONWriter63.writeNull();
        boolean boolean67 = jSONWriter55.isWriteTypeInfo((java.lang.Object) jSONWriter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        jSONWriter68.writeNameRaw(byteArray70);
        jSONWriter63.writeBinary(byteArray70);
        boolean boolean74 = jSONWriter44.writeTypeName(byteArray70, (long) (byte) 100);
        jSONWriter26.writeBinary(byteArray70);
        jSONWriter0.writeNameRaw(byteArray70);
        jSONWriter0.writeDateTime19(10, 6, (-1), (int) '#', (int) (byte) 10, (int) (byte) 0);
        jSONWriter0.writeSymbol(3);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[100]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter9.writeBooleanNull();
        byte[] byteArray11 = jSONWriter9.getBytes();
        jSONWriter0.writeRaw(byteArray11);
        jSONWriter0.writeArrayNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        long[] longArray21 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter15.writeInt64(longArray21);
        java.nio.charset.Charset charset23 = jSONWriter15.getCharset();
        jSONWriter15.writeSymbol((int) (byte) -1);
        int int26 = jSONWriter15.size();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        boolean boolean34 = context33.isFormatyyyyMMddhhmmss19();
        boolean boolean36 = context33.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter37 = null;
        context33.setPropertyPreFilter(propertyPreFilter37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.of(context33);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray41 = new double[] {};
        java.text.DecimalFormat decimalFormat42 = null;
        jSONWriter40.writeDouble(doubleArray41, decimalFormat42);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray45 = new double[] {};
        java.text.DecimalFormat decimalFormat46 = null;
        jSONWriter44.writeDouble(doubleArray45, decimalFormat46);
        jSONWriter40.writeDouble(doubleArray45);
        boolean boolean49 = jSONWriter40.isUTF16();
        java.lang.Class<?> wildcardClass50 = jSONWriter40.getClass();
        boolean boolean51 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter39, (java.lang.Class) wildcardClass50);
        boolean boolean53 = jSONWriter0.isWriteTypeInfo((java.lang.Object) feature14, (java.lang.Class) wildcardClass50, (long) (short) -1);
        java.math.BigDecimal bigDecimal54 = null;
        jSONWriter0.writeDecimal(bigDecimal54, (long) (short) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        jSONWriter58.writeNameRaw(byteArray60);
        java.nio.charset.Charset charset62 = jSONWriter58.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter58.config(feature63, true);
        jSONWriter58.writeSymbol("");
        java.math.BigDecimal bigDecimal68 = null;
        jSONWriter58.writeDecimal(bigDecimal68, (long) ' ');
        jSONWriter58.writeStringNull();
        jSONWriter58.writeDateTime14(100, (int) (byte) -1, (int) '#', 10, 3, 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        jSONWriter79.writeNameRaw(byteArray81);
        java.nio.charset.Charset charset83 = jSONWriter79.getCharset();
        boolean boolean84 = jSONWriter58.isWriteTypeInfo((java.lang.Object) charset83);
        java.lang.String str85 = jSONWriter0.setPath(3, (java.lang.Object) charset83);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81]");
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteEmptyArray));
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[100]");
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        char[] charArray14 = new char[] { '#', ' ', '#' };
        jSONWriter8.writeString(charArray14);
        java.lang.Class class16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) charArray14, class16);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter0.writeBigInt(bigInteger18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        java.nio.charset.Charset charset24 = jSONWriter20.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter20.config(feature25, true);
        jSONWriter20.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter30.writeDecimal(bigDecimal34, 1L);
        java.math.BigInteger bigInteger37 = null;
        jSONWriter30.writeBigInt(bigInteger37);
        jSONWriter30.writeInt64((long) 0);
        boolean boolean42 = jSONWriter20.isWriteTypeInfo((java.lang.Object) jSONWriter30, (long) (byte) 1);
        jSONWriter30.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter30.writeBooleanNull();
        java.util.Map map51 = null;
        jSONWriter30.write(map51);
        jSONWriter30.writeDouble((double) 'a');
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj56 = null;
        boolean boolean57 = jSONWriter55.removeReference(obj56);
        long[] longArray58 = new long[] {};
        jSONWriter55.writeInt64(longArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = jSONWriter55.getContext();
        long long62 = jSONWriter55.getFeatures((long) (-1));
        byte[] byteArray63 = jSONWriter55.getBytes();
        jSONWriter30.writeHex(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(byteArray63, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[]");
        org.junit.Assert.assertNotNull(context60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-108]");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.getContext();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw("$[0]");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(context5);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        boolean boolean3 = jSONWriter0.isEnabled((long) (byte) 0);
        boolean boolean4 = jSONWriter0.isIgnoreErrorGetter();
        long long5 = jSONWriter0.getFeatures();
        boolean boolean7 = jSONWriter0.isEnabled((long) 10);
        boolean boolean8 = jSONWriter0.hasFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol;
        boolean boolean12 = jSONWriter10.removeReference((java.lang.Object) feature11);
        jSONWriter10.writeFloat((java.lang.Float) 0.0f);
        jSONWriter10.writeName("$[0]");
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj19 = null;
        boolean boolean20 = jSONWriter18.removeReference(obj19);
        long[] longArray24 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter18.writeInt64(longArray24);
        com.alibaba.fastjson2.JSONObject jSONObject26 = null;
        jSONWriter18.write(jSONObject26);
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter18.isWriteTypeInfo((java.lang.Object) false, class29, (long) (short) -1);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter18.writeRaw(byteArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        long[] longArray46 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter40.writeInt64(longArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        char[] charArray54 = new char[] { '#', ' ', '#' };
        jSONWriter48.writeString(charArray54);
        java.lang.Class class56 = null;
        boolean boolean57 = jSONWriter40.isWriteTypeInfo((java.lang.Object) charArray54, class56);
        jSONWriter18.writeString(charArray54, (int) (byte) 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeRaw(charArray54, 9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNameAsSymbol));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter0.writeRaw(byteArray20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray23);
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray23);
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray34);
        java.lang.Class class37 = null;
        boolean boolean39 = jSONWriter28.isWriteMapTypeInfo((java.lang.Object) jSONWriter36, class37, 0L);
        java.lang.String[] strArray41 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        jSONWriter28.writeString((java.util.List<java.lang.String>) strList42);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = new double[] {};
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter45.writeDouble(doubleArray46, decimalFormat47);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter28.writeDouble(doubleArray46, decimalFormat49);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter26.writeDouble(doubleArray46, decimalFormat51);
        jSONWriter0.writeDouble(doubleArray46);
        java.time.OffsetDateTime offsetDateTime54 = null;
        jSONWriter0.writeOffsetDateTime(offsetDateTime54);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter8 = null;
        context6.setBeforeFilter(beforeFilter8);
        java.time.ZoneId zoneId10 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = context6.getPropertyFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter13 = context6.getContextNameFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = context6.getContextValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNull(propertyFilter11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNull(contextNameFilter13);
        org.junit.Assert.assertNull(contextValueFilter14);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable11 = jSONWriter10.symbolTable;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        boolean[] booleanArray21 = new boolean[] {};
        jSONWriter12.writeBool(booleanArray21);
        jSONWriter10.writeBool(booleanArray21);
        jSONWriter10.writeDateTime14((int) '#', 9, (int) (short) -1, (int) (byte) 10, (int) (byte) 10, 15);
        java.nio.charset.Charset charset31 = jSONWriter10.getCharset();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNull(symbolTable11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertNotNull(charset31);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        jSONWriter0.writeFloat((float) 1);
        jSONWriter0.writeRaw((byte) 0);
        jSONWriter0.writeNull();
        boolean boolean15 = jSONWriter0.useSingleQuote;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        jSONWriter9.writeString("hi!");
        jSONWriter9.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter24.writeBooleanNull();
        jSONWriter24.writeComma();
        jSONWriter9.startArray((java.lang.Object) jSONWriter24, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray35);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context37.setBeforeFilter(beforeFilter38);
        boolean boolean40 = jSONWriter24.removeReference((java.lang.Object) context37);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        context37.config(featureArray47);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter52 = null;
        context37.setLabelFilter(labelFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        char[] charArray63 = new char[] { '#', ' ', '#' };
        jSONWriter57.writeString(charArray63);
        boolean boolean65 = jSONWriter54.removeReference((java.lang.Object) jSONWriter57);
        boolean boolean66 = jSONWriter57.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter57.writeEnum((java.lang.Enum) feature67);
        boolean boolean69 = context37.isEnabled(feature67);
        jSONWriter0.writeEnum((java.lang.Enum) feature67);
        jSONWriter0.writeTypeName("$[0]");
        boolean boolean74 = jSONWriter0.isEnabled((long) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Context context75 = jSONWriter0.getContext();
        byte[] byteArray76 = null;
        jSONWriter0.writeHex(byteArray76);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(context75);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        long long15 = context6.getFeatures();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 34359804928L + "'", long15 == 34359804928L);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        int int61 = jSONWriter10.level();
        com.alibaba.fastjson2.SymbolTable symbolTable62 = jSONWriter10.symbolTable;
        com.alibaba.fastjson2.JSONObject jSONObject63 = null;
        jSONWriter10.write(jSONObject63);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(symbolTable62);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.SymbolTable symbolTable8 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable8);
        jSONWriter9.writeDouble((double) 1024L);
        boolean boolean13 = jSONWriter7.isWriteTypeInfo((java.lang.Object) jSONWriter9, (long) 10);
        jSONWriter7.writeNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        jSONWriter0.writeDateTime19((int) ' ', (int) (byte) 1, 0, (int) ' ', (int) (short) 10, (-1));
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        java.lang.Object obj37 = null;
        java.lang.String str38 = jSONWriter0.setPath(fieldWriter36, obj37);
        java.util.Map map39 = null;
        jSONWriter0.write(map39);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        jSONWriter15.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj22 = null;
        boolean boolean23 = jSONWriter21.removeReference(obj22);
        long[] longArray27 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter21.writeInt64(longArray27);
        java.nio.charset.Charset charset29 = jSONWriter21.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter30.writeBooleanNull();
        byte[] byteArray32 = jSONWriter30.getBytes();
        jSONWriter21.writeRaw(byteArray32);
        jSONWriter15.writeStringLatin1(byteArray32);
        boolean boolean35 = jSONWriter15.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-81]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        java.lang.Class class17 = null;
        boolean boolean18 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class17);
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20, feature21, feature22, feature23, feature24 };
        com.alibaba.fastjson2.JSONWriter.Context context26 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        boolean boolean27 = context26.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId28 = context26.getZoneId();
        boolean boolean30 = context26.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray36);
        boolean boolean38 = context37.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId39 = context37.getZoneId();
        context26.setZoneId(zoneId39);
        java.lang.String str41 = jSONWriter0.setPath((int) (byte) 1, (java.lang.Object) zoneId39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(jSONWriter42);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context6.getBeforeFilter();
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter15 = context6.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        boolean boolean17 = context6.isEnabled(feature16);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter18 = null;
        context6.setBeforeFilter(beforeFilter18);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(afterFilter15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSONWriter20);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context9.provider;
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter13 = null;
        context9.setContextValueFilter(contextValueFilter13);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter15 = null;
        context9.setLabelFilter(labelFilter15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(featureArray19);
        boolean boolean22 = jSONWriter0.removeReference((java.lang.Object) featureArray19);
        byte[] byteArray23 = jSONWriter0.getBytes();
        char[] charArray29 = new char[] { ' ', ' ', 'a', '#', '#' };
        jSONWriter0.writeString(charArray29, (int) (short) 10, (int) (short) 0, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = context40.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter42 = null;
        context40.setLabelFilter(labelFilter42);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider44 = context40.provider;
        boolean boolean46 = context40.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.of(context40);
        long long48 = jSONWriter47.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context49 = jSONWriter47.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean51 = context49.isEnabled(feature50);
        boolean boolean52 = jSONWriter0.isEnabled(feature50);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53, feature54, feature55, feature56, feature57 };
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        boolean boolean60 = context59.isFormatyyyyMMddhhmmss19();
        boolean boolean62 = context59.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter63 = null;
        context59.setPropertyPreFilter(propertyPreFilter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.of(context59);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter66.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter66.writeEnum((java.lang.Enum) feature68);
        boolean boolean70 = jSONWriter66.hasFilter();
        jSONWriter66.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj74 = null;
        boolean boolean75 = jSONWriter73.removeReference(obj74);
        jSONWriter73.writeNull();
        java.math.BigDecimal bigDecimal77 = null;
        jSONWriter73.writeDecimal(bigDecimal77, 1L);
        char[] charArray84 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter73.writeString(charArray84, (int) (byte) 100, (int) (short) 0);
        jSONWriter66.writeString(charArray84);
        jSONWriter65.writeString(charArray84, (int) '4', (int) (byte) -1, true);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameRaw(charArray84);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "  a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertNull(afterFilter41);
        org.junit.Assert.assertNotNull(objectWriterProvider44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 34359804928L + "'", long48 == 34359804928L);
        org.junit.Assert.assertNotNull(context49);
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[4,  , a, 4]");
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        java.util.Map map11 = null;
        jSONWriter0.write(map11);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNull(symbolTable10);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        jSONWriter7.writeNull();
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter7.writeDecimal(bigDecimal11, 1L);
        char[] charArray18 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter7.writeString(charArray18, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeString(charArray18);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeTimeHHMMSS8(1, (int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , a, 4]");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = new double[] {};
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter11.writeDouble(doubleArray12, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = new double[] {};
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter15.writeDouble(doubleArray16, decimalFormat17);
        jSONWriter11.writeDouble(doubleArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        jSONWriter20.writeString("hi!");
        jSONWriter20.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray34);
        jSONWriter35.writeBooleanNull();
        jSONWriter35.writeComma();
        jSONWriter20.startArray((java.lang.Object) jSONWriter35, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray46);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter49 = null;
        context48.setBeforeFilter(beforeFilter49);
        boolean boolean51 = jSONWriter35.removeReference((java.lang.Object) context48);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53, feature54, feature55, feature56, feature57 };
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray58);
        context48.config(featureArray58);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter63 = null;
        context48.setLabelFilter(labelFilter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        char[] charArray74 = new char[] { '#', ' ', '#' };
        jSONWriter68.writeString(charArray74);
        boolean boolean76 = jSONWriter65.removeReference((java.lang.Object) jSONWriter68);
        boolean boolean77 = jSONWriter68.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter68.writeEnum((java.lang.Enum) feature78);
        boolean boolean80 = context48.isEnabled(feature78);
        jSONWriter11.writeEnum((java.lang.Enum) feature78);
        context6.config(feature78, true);
        com.alibaba.fastjson2.filter.NameFilter nameFilter84 = context6.getNameFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter85 = null;
        context6.setLabelFilter(labelFilter85);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(nameFilter84);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        context8.setDateFormat("$");
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8, symbolTable14);
        jSONWriter15.writeReference("$");
        java.math.BigInteger bigInteger18 = null;
        jSONWriter15.writeBigInt(bigInteger18, (long) '4');
        jSONWriter15.writeDateTime19((int) (byte) 10, 6, (int) (short) 1, 1, 4, 0);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertNotNull(jSONWriter15);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        boolean boolean19 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray21);
        boolean boolean23 = jSONWriter22.utf16;
        jSONWriter22.writeNull();
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        boolean boolean26 = jSONWriter22.isIgnoreErrorGetter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter9);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes;
        jSONWriter14.config(feature28, true);
        jSONWriter14.writeStringNull();
        boolean boolean32 = jSONWriter14.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        long[] longArray39 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter33.writeInt64(longArray39);
        java.nio.charset.Charset charset41 = jSONWriter33.getCharset();
        boolean[] booleanArray42 = new boolean[] {};
        jSONWriter33.writeBool(booleanArray42);
        jSONWriter33.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter33);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSONWriter47.removeReference(obj48);
        long[] longArray53 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter47.writeInt64(longArray53);
        java.nio.charset.Charset charset55 = jSONWriter47.getCharset();
        boolean[] booleanArray56 = new boolean[] {};
        jSONWriter47.writeBool(booleanArray56);
        jSONWriter47.writeSymbol((int) (byte) 100);
        boolean boolean60 = jSONWriter46.isRefDetect((java.lang.Object) jSONWriter47);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter46);
        com.alibaba.fastjson2.JSONWriter.Context context62 = jSONWriter61.getContext();
        jSONWriter61.writeMillis((long) (short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray70 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature65, feature66, feature67, feature68, feature69 };
        com.alibaba.fastjson2.JSONWriter.Context context71 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray70);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter72 = context71.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter73 = null;
        context71.setLabelFilter(labelFilter73);
        boolean boolean76 = context71.isEnabled(1L);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter77 = null;
        context71.setAfterFilter(afterFilter77);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter79 = context71.getContextNameFilter();
        java.lang.Class<?> wildcardClass80 = context71.getClass();
        boolean boolean82 = jSONWriter14.isWriteMapTypeInfo((java.lang.Object) (short) 1, (java.lang.Class) wildcardClass80, 0L);
        java.math.BigInteger bigInteger83 = null;
        jSONWriter14.writeBigInt(bigInteger83);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.UseSingleQuotes));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[]");
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(context62);
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray70);
        org.junit.Assert.assertNull(afterFilter72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(contextNameFilter79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        boolean boolean9 = jSONWriter0.isUTF16();
        com.alibaba.fastjson2.SymbolTable symbolTable10 = jSONWriter0.getSymbolTable();
        byte[] byteArray11 = null;
        jSONWriter0.writeStringLatin1(byteArray11);
        jSONWriter0.writeStringNull();
        java.time.ZonedDateTime zonedDateTime14 = null;
        jSONWriter0.writeZonedDateTime(zonedDateTime14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        jSONWriter16.writeString("hi!");
        jSONWriter16.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter31.writeBooleanNull();
        jSONWriter31.writeComma();
        jSONWriter16.startArray((java.lang.Object) jSONWriter31, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37, feature38, feature39, feature40, feature41 };
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray42);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context44.setBeforeFilter(beforeFilter45);
        boolean boolean47 = jSONWriter31.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray54 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature49, feature50, feature51, feature52, feature53 };
        com.alibaba.fastjson2.JSONWriter.Context context55 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray54);
        com.alibaba.fastjson2.JSONWriter.Context context56 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray54);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray54);
        context44.config(featureArray54);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter59 = null;
        context44.setLabelFilter(labelFilter59);
        boolean boolean61 = context44.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        long[] longArray65 = new long[] {};
        jSONWriter62.writeInt64(longArray65);
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter62.config(feature67, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray76 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74, feature75 };
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray76);
        com.alibaba.fastjson2.JSONWriter.Context context78 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray76);
        jSONWriter62.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.of(featureArray76);
        context44.config(featureArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter82 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj83 = null;
        boolean boolean84 = jSONWriter82.removeReference(obj83);
        boolean boolean85 = jSONWriter82.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context86 = jSONWriter82.context;
        java.lang.String str87 = context86.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter88 = null;
        context86.setBeforeFilter(beforeFilter88);
        com.alibaba.fastjson2.JSONWriter.Feature feature90 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean91 = context86.isEnabled(feature90);
        context44.config(feature90, true);
        jSONWriter0.config(feature90, true);
        boolean boolean96 = jSONWriter0.isIgnoreNoneSerializable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(symbolTable10);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray54);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertNotNull(jSONWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(context86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + feature90 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature90.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        long long4 = jSONWriter2.getFeatures((long) (short) 100);
        java.lang.Object obj5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        jSONWriter6.writeNameRaw(byteArray8);
        java.nio.charset.Charset charset10 = jSONWriter6.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter6.config(feature11, true);
        jSONWriter6.writeName("");
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        java.lang.Class class25 = null;
        jSONWriter23.checkAndWriteTypeName((java.lang.Object) (byte) 0, class25);
        java.math.BigInteger bigInteger27 = null;
        jSONWriter23.writeBigInt(bigInteger27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter29.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter29.writeEnum((java.lang.Enum) feature31);
        boolean boolean33 = jSONWriter29.hasFilter();
        jSONWriter29.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        long[] longArray39 = new long[] {};
        jSONWriter36.writeInt64(longArray39);
        java.util.Map map41 = null;
        jSONWriter36.write(map41);
        java.util.Map map43 = null;
        jSONWriter36.write(map43);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray46 = new double[] {};
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter45.writeDouble(doubleArray46, decimalFormat47);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter36.writeDouble(doubleArray46, decimalFormat49);
        java.text.DecimalFormat decimalFormat51 = null;
        jSONWriter29.writeDouble(doubleArray46, decimalFormat51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray54 = new double[] {};
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter53.writeDouble(doubleArray54, decimalFormat55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray58 = new double[] {};
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter57.writeDouble(doubleArray58, decimalFormat59);
        jSONWriter53.writeDouble(doubleArray58);
        boolean boolean62 = jSONWriter53.isUTF16();
        java.lang.Class<?> wildcardClass63 = jSONWriter53.getClass();
        boolean boolean64 = jSONWriter23.isWriteTypeInfo((java.lang.Object) doubleArray46, (java.lang.Class) wildcardClass63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        jSONWriter65.writeNameRaw(byteArray67);
        java.nio.charset.Charset charset69 = jSONWriter65.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter65.config(feature70, true);
        jSONWriter65.writeName("");
        boolean boolean75 = jSONWriter65.isWriteNulls();
        java.lang.Class<?> wildcardClass76 = jSONWriter65.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter77 = jSONWriter6.getObjectWriter((java.lang.reflect.Type) wildcardClass63, (java.lang.Class) wildcardClass76);
        boolean boolean79 = jSONWriter2.isWriteTypeInfo(obj5, (java.lang.Class) wildcardClass63, (long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter2.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(objectWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context28.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.NameFilter nameFilter34 = null;
        context28.setNameFilter(nameFilter34);
        java.time.ZoneId zoneId36 = context28.getZoneId();
        boolean boolean37 = context28.isDateFormatMillis();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider38 = context28.provider;
        com.alibaba.fastjson2.filter.LabelFilter labelFilter39 = context28.getLabelFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter40 = null;
        context28.setAfterFilter(afterFilter40);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(zoneId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider38);
        org.junit.Assert.assertNull(labelFilter39);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeFloat((java.lang.Float) 1.0f);
        int int17 = jSONWriter0.level();
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22, feature23 };
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray24);
        boolean boolean26 = jSONWriter25.isUseSingleQuotes();
        java.time.OffsetDateTime offsetDateTime27 = null;
        jSONWriter25.writeOffsetDateTime(offsetDateTime27);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter.Context context35 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray34);
        boolean boolean36 = context35.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context35.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37);
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context39);
        jSONWriter40.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray44 = new double[] {};
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter43.writeDouble(doubleArray44, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        jSONWriter43.writeDouble(doubleArray48);
        boolean boolean52 = jSONWriter43.isUTF16();
        java.lang.Class<?> wildcardClass53 = jSONWriter43.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray60);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter65 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        long long70 = jSONWriter68.getFeatures((long) (short) 100);
        boolean boolean71 = jSONWriter68.jsonb;
        java.lang.String str72 = jSONWriter64.setPath(fieldWriter65, (java.lang.Object) jSONWriter68);
        java.lang.Class<?> wildcardClass73 = jSONWriter68.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter74 = jSONWriter40.getObjectWriter((java.lang.reflect.Type) wildcardClass53, (java.lang.Class) wildcardClass73);
        boolean boolean76 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter25, (java.lang.Class) wildcardClass73, (long) (short) -1);
        jSONWriter0.writeRaw((byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(objectWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        boolean boolean10 = context9.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        java.lang.Class class24 = null;
        jSONWriter22.checkAndWriteTypeName((java.lang.Object) (byte) 0, class24);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter22.writeBigInt(bigInteger26);
        java.lang.reflect.Type type28 = null;
        boolean boolean29 = jSONWriter12.isWriteTypeInfo((java.lang.Object) jSONWriter22, type28);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        jSONWriter30.writeNameRaw(byteArray32);
        java.nio.charset.Charset charset34 = jSONWriter30.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter30.config(feature35, true);
        jSONWriter30.writeName("");
        boolean boolean40 = jSONWriter30.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        char[] charArray47 = new char[] { '#', ' ', '#' };
        jSONWriter41.writeString(charArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj50 = null;
        boolean boolean51 = jSONWriter49.removeReference(obj50);
        jSONWriter49.writeNull();
        boolean boolean53 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter49);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        jSONWriter54.writeNameRaw(byteArray56);
        jSONWriter49.writeBinary(byteArray56);
        boolean boolean60 = jSONWriter30.writeTypeName(byteArray56, (long) (byte) 100);
        jSONWriter12.writeBinary(byteArray56);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature62, feature63, feature64, feature65, feature66 };
        com.alibaba.fastjson2.JSONWriter.Context context68 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray67);
        jSONWriter12.config(featureArray67);
        jSONWriter12.writeInt64(10L);
        boolean boolean73 = jSONWriter11.isRefDetect((java.lang.Object) 10L);
        jSONWriter11.close();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.endArray();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        java.lang.Class class24 = null;
        jSONWriter22.checkAndWriteTypeName((java.lang.Object) (byte) 0, class24);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter22.writeBigInt(bigInteger26);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        boolean boolean31 = jSONWriter28.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context32 = jSONWriter28.context;
        java.lang.String str33 = context32.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter34 = null;
        context32.setBeforeFilter(beforeFilter34);
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean37 = context32.isEnabled(feature36);
        boolean boolean38 = jSONWriter22.containsReference((java.lang.Object) feature36);
        boolean boolean39 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(context32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        com.alibaba.fastjson2.JSONWriter.Context context16 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray14);
        jSONWriter0.config(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.of(featureArray14);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        java.nio.charset.Charset charset27 = jSONWriter19.getCharset();
        boolean[] booleanArray28 = new boolean[] {};
        jSONWriter19.writeBool(booleanArray28);
        boolean boolean31 = jSONWriter19.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.of(featureArray38);
        boolean boolean41 = jSONWriter19.removeReference((java.lang.Object) featureArray38);
        byte[] byteArray42 = jSONWriter19.getBytes();
        jSONWriter18.writeBase64(byteArray42);
        jSONWriter18.writeChar('a');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-105, -1, -1, 10, -108]");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        boolean boolean11 = jSONWriter10.isUTF16();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        char[] charArray9 = new char[] { '#', ' ', '#' };
        jSONWriter3.writeString(charArray9);
        boolean boolean11 = jSONWriter0.removeReference((java.lang.Object) jSONWriter3);
        java.time.LocalDate localDate12 = null;
        jSONWriter0.writeLocalDate(localDate12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj23 = null;
        boolean boolean24 = jSONWriter22.removeReference(obj23);
        jSONWriter22.writeNull();
        boolean boolean26 = jSONWriter14.isWriteTypeInfo((java.lang.Object) jSONWriter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        jSONWriter27.writeNameRaw(byteArray29);
        jSONWriter22.writeBinary(byteArray29);
        jSONWriter0.writeBinary(byteArray29);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        java.nio.charset.Charset charset37 = jSONWriter33.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter33.config(feature38, true);
        jSONWriter33.writeName("");
        boolean boolean43 = jSONWriter33.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        char[] charArray50 = new char[] { '#', ' ', '#' };
        jSONWriter44.writeString(charArray50);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        jSONWriter52.writeNull();
        boolean boolean56 = jSONWriter44.isWriteTypeInfo((java.lang.Object) jSONWriter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        jSONWriter57.writeNameRaw(byteArray59);
        jSONWriter52.writeBinary(byteArray59);
        boolean boolean63 = jSONWriter33.writeTypeName(byteArray59, (long) (byte) 100);
        java.math.BigInteger bigInteger64 = null;
        jSONWriter33.writeBigInt(bigInteger64);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        jSONWriter66.writeNameRaw(byteArray68);
        java.nio.charset.Charset charset70 = jSONWriter66.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray72 = new double[] {};
        java.text.DecimalFormat decimalFormat73 = null;
        jSONWriter71.writeDouble(doubleArray72, decimalFormat73);
        com.alibaba.fastjson2.JSONWriter jSONWriter75 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray76 = new double[] {};
        java.text.DecimalFormat decimalFormat77 = null;
        jSONWriter75.writeDouble(doubleArray76, decimalFormat77);
        jSONWriter71.writeDouble(doubleArray76);
        boolean boolean80 = jSONWriter71.isUTF16();
        java.lang.Class<?> wildcardClass81 = jSONWriter71.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter82 = jSONWriter66.getObjectWriter((java.lang.Class) wildcardClass81);
        boolean boolean84 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter33, (java.lang.Class) wildcardClass81, (long) (short) 10);
        int int85 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(jSONWriter75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(objectWriter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        com.alibaba.fastjson2.SymbolTable symbolTable11 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context6, symbolTable11);
        jSONWriter12.close();
        boolean boolean14 = jSONWriter12.isBeanToArray();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        int int28 = jSONWriter0.level();
        jSONWriter0.writeFloat((float) 34359804928L);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        long[] longArray37 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter31.writeInt64(longArray37);
        com.alibaba.fastjson2.JSONObject jSONObject39 = null;
        jSONWriter31.write(jSONObject39);
        java.lang.Class class42 = null;
        boolean boolean44 = jSONWriter31.isWriteTypeInfo((java.lang.Object) false, class42, (long) (short) -1);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter31.writeRaw(byteArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        long[] longArray59 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter53.writeInt64(longArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        char[] charArray67 = new char[] { '#', ' ', '#' };
        jSONWriter61.writeString(charArray67);
        java.lang.Class class69 = null;
        boolean boolean70 = jSONWriter53.isWriteTypeInfo((java.lang.Object) charArray67, class69);
        jSONWriter31.writeString(charArray67, (int) (byte) 0, (int) '4');
        jSONWriter0.writeRaw(charArray67);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        int int61 = jSONWriter10.level();
        jSONWriter10.startObject();
        jSONWriter10.writeBool(false);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeRaw('a', 'a');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context9.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter13 = null;
        context9.setNameFilter(nameFilter13);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider15 = context9.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context22.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter24 = null;
        context22.setLabelFilter(labelFilter24);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context22.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray33 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31, feature32 };
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider26, featureArray33);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(featureArray33);
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider15, featureArray33);
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray44 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature39, feature40, feature41, feature42, feature43 };
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray44);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter46 = context45.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter47 = null;
        context45.setLabelFilter(labelFilter47);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider49 = context45.provider;
        boolean boolean51 = context45.isEnabled(1024L);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter52 = context45.getPropertyFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray59);
        context45.config(featureArray59);
        com.alibaba.fastjson2.JSONWriter.Context context65 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider15, featureArray59);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter66 = null;
        context65.setContextValueFilter(contextValueFilter66);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertNotNull(objectWriterProvider15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray33);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray44);
        org.junit.Assert.assertNull(afterFilter46);
        org.junit.Assert.assertNotNull(objectWriterProvider49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(propertyFilter52);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertNotNull(jSONWriter63);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray13 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12 };
        com.alibaba.fastjson2.JSONWriter.Context context14 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray13);
        boolean boolean15 = context14.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId16 = context14.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter17 = context14.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context14.getAfterFilter();
        boolean boolean19 = context14.isDateFormatHasDay();
        java.lang.reflect.Type type20 = null;
        boolean boolean22 = jSONWriter7.isWriteTypeInfo((java.lang.Object) boolean19, type20, (long) (-1));
        jSONWriter7.writeBool(false);
        jSONWriter7.writeMillis((long) 4);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        jSONWriter27.writeNameRaw(byteArray29);
        java.nio.charset.Charset charset31 = jSONWriter27.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter27.config(feature32, true);
        jSONWriter27.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        java.lang.reflect.Type type41 = null;
        boolean boolean42 = jSONWriter36.isWriteTypeInfo((java.lang.Object) true, type41);
        jSONWriter27.popPath((java.lang.Object) boolean42);
        jSONWriter27.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        jSONWriter46.writeNameRaw(byteArray48);
        jSONWriter27.writeNameRaw(byteArray48);
        jSONWriter7.writeBinary(byteArray48);
        jSONWriter7.writeName("$.[100][4]");
        jSONWriter7.writeReference("$.[100][4]");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNull(afterFilter17);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeBool(true);
        boolean boolean7 = jSONWriter0.isIgnoreErrorGetter();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(reader8);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        java.io.OutputStream outputStream10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        char[] charArray20 = new char[] { '#', ' ', '#' };
        jSONWriter14.writeString(charArray20);
        boolean boolean22 = jSONWriter11.removeReference((java.lang.Object) jSONWriter14);
        java.nio.charset.Charset charset23 = jSONWriter11.getCharset();
        int int24 = jSONWriter8.flushTo(outputStream10, charset23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter25.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter25.writeEnum((java.lang.Enum) feature27);
        boolean boolean29 = jSONWriter25.hasFilter();
        jSONWriter25.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj33 = null;
        boolean boolean34 = jSONWriter32.removeReference(obj33);
        long[] longArray35 = new long[] {};
        jSONWriter32.writeInt64(longArray35);
        java.util.Map map37 = null;
        jSONWriter32.write(map37);
        java.util.Map map39 = null;
        jSONWriter32.write(map39);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray42 = new double[] {};
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter41.writeDouble(doubleArray42, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter32.writeDouble(doubleArray42, decimalFormat45);
        java.text.DecimalFormat decimalFormat47 = null;
        jSONWriter25.writeDouble(doubleArray42, decimalFormat47);
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter8.writeDouble(doubleArray42, decimalFormat49);
        boolean boolean51 = jSONWriter8.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj53 = null;
        boolean boolean54 = jSONWriter52.removeReference(obj53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray61 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59, feature60 };
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray61);
        java.lang.Class class64 = null;
        jSONWriter62.checkAndWriteTypeName((java.lang.Object) (byte) 0, class64);
        java.math.BigInteger bigInteger66 = null;
        jSONWriter62.writeBigInt(bigInteger66);
        java.lang.reflect.Type type68 = null;
        boolean boolean69 = jSONWriter52.isWriteTypeInfo((java.lang.Object) jSONWriter62, type68);
        short[] shortArray71 = new short[] { (byte) 0 };
        jSONWriter62.writeInt16(shortArray71);
        jSONWriter8.writeInt16(shortArray71);
        jSONWriter8.endArray();
        java.math.BigInteger bigInteger75 = null;
        jSONWriter8.writeBigInt(bigInteger75, (long) 'a');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray61);
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[0]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        boolean boolean15 = jSONWriter0.isUTF8();
        jSONWriter0.writeDateTime14((int) (byte) -1, 0, (int) '4', 6, (int) ' ', 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        char[] charArray14 = new char[] { '#', ' ', '#' };
        jSONWriter8.writeString(charArray14);
        java.lang.Class class16 = null;
        boolean boolean17 = jSONWriter0.isWriteTypeInfo((java.lang.Object) charArray14, class16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        java.lang.Class class31 = null;
        jSONWriter29.checkAndWriteTypeName((java.lang.Object) (byte) 0, class31);
        java.math.BigInteger bigInteger33 = null;
        jSONWriter29.writeBigInt(bigInteger33);
        java.lang.reflect.Type type35 = null;
        boolean boolean36 = jSONWriter19.isWriteTypeInfo((java.lang.Object) jSONWriter29, type35);
        jSONWriter18.writeAny((java.lang.Object) boolean36);
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        jSONWriter38.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        jSONWriter42.writeNameRaw(byteArray44);
        java.nio.charset.Charset charset46 = jSONWriter42.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter42.config(feature47, true);
        jSONWriter42.writeName("");
        boolean boolean52 = jSONWriter42.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj54 = null;
        boolean boolean55 = jSONWriter53.removeReference(obj54);
        char[] charArray59 = new char[] { '#', ' ', '#' };
        jSONWriter53.writeString(charArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj62 = null;
        boolean boolean63 = jSONWriter61.removeReference(obj62);
        jSONWriter61.writeNull();
        boolean boolean65 = jSONWriter53.isWriteTypeInfo((java.lang.Object) jSONWriter61);
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        jSONWriter66.writeNameRaw(byteArray68);
        jSONWriter61.writeBinary(byteArray68);
        boolean boolean72 = jSONWriter42.writeTypeName(byteArray68, (long) (byte) 100);
        jSONWriter38.writeRaw(byteArray68);
        jSONWriter18.writeStringLatin1(byteArray68);
        boolean boolean75 = jSONWriter0.isRefDetect((java.lang.Object) byteArray68);
        boolean boolean77 = jSONWriter0.hasFilter(1024L);
        java.time.LocalTime localTime78 = null;
        jSONWriter0.writeLocalTime(localTime78);
        jSONWriter0.writeFloat((float) (short) 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        long long4 = jSONWriter2.getFeatures((long) (short) 100);
        boolean boolean5 = jSONWriter2.jsonb;
        java.math.BigDecimal bigDecimal6 = null;
        jSONWriter2.writeDecimal(bigDecimal6, (long) (byte) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter9.writeDecimal(bigDecimal13, 1L);
        char[] charArray20 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter9.writeString(charArray20, (int) (byte) 100, (int) (short) 0);
        jSONWriter9.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray31 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter25.writeInt64(longArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj34 = null;
        boolean boolean35 = jSONWriter33.removeReference(obj34);
        char[] charArray39 = new char[] { '#', ' ', '#' };
        jSONWriter33.writeString(charArray39);
        java.lang.Class class41 = null;
        boolean boolean42 = jSONWriter25.isWriteTypeInfo((java.lang.Object) charArray39, class41);
        jSONWriter9.writeString(charArray39);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter2.writeRaw(charArray39, 3, 0);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4,  , a, 4]");
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context10);
        jSONWriter11.writeName((-1L));
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray15 = new double[] {};
        java.text.DecimalFormat decimalFormat16 = null;
        jSONWriter14.writeDouble(doubleArray15, decimalFormat16);
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray19 = new double[] {};
        java.text.DecimalFormat decimalFormat20 = null;
        jSONWriter18.writeDouble(doubleArray19, decimalFormat20);
        jSONWriter14.writeDouble(doubleArray19);
        boolean boolean23 = jSONWriter14.isUTF16();
        java.lang.Class<?> wildcardClass24 = jSONWriter14.getClass();
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray31);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37 };
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray38);
        long long41 = jSONWriter39.getFeatures((long) (short) 100);
        boolean boolean42 = jSONWriter39.jsonb;
        java.lang.String str43 = jSONWriter35.setPath(fieldWriter36, (java.lang.Object) jSONWriter39);
        java.lang.Class<?> wildcardClass44 = jSONWriter39.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter45 = jSONWriter11.getObjectWriter((java.lang.reflect.Type) wildcardClass24, (java.lang.Class) wildcardClass44);
        java.time.OffsetDateTime offsetDateTime46 = null;
        jSONWriter11.writeOffsetDateTime(offsetDateTime46);
        jSONWriter11.writeDateYYYMMDD10((int) (byte) 1, 1, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objectWriter45);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        boolean boolean20 = context17.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context17.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context17);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context17.provider;
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider24);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray32);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.of(featureArray32);
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider24, featureArray32);
        jSONWriter10.setRootObject((java.lang.Object) featureArray32);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        jSONWriter0.writeBooleanNull();
        int int10 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        boolean boolean11 = jSONWriter0.hasFilter(34359804928L);
        com.alibaba.fastjson2.JSONObject jSONObject12 = null;
        jSONWriter0.write(jSONObject12);
        com.alibaba.fastjson2.SymbolTable symbolTable14 = jSONWriter0.symbolTable;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(symbolTable14);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean14 = jSONWriter1.hasFilter((long) (short) -1);
        boolean boolean15 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat(0.0f, decimalFormat17);
        java.nio.charset.Charset charset19 = jSONWriter1.getCharset();
        java.io.Reader reader20 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter1.writeString(reader20);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        java.util.Map map31 = null;
        jSONWriter10.write(map31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        java.lang.String str35 = jSONWriter10.setPath(4, (java.lang.Object) jSONWriter34);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37, feature38, feature39, feature40, feature41 };
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.of(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray42);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray42);
        jSONWriter47.writeInt16((short) 10);
        boolean boolean50 = jSONWriter47.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray52);
        jSONWriter53.writeFloat((float) (short) 0);
        long[] longArray56 = new long[] {};
        jSONWriter53.writeInt64(longArray56);
        long long59 = jSONWriter53.getFeatures((long) '4');
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter60.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter60.writeEnum((java.lang.Enum) feature62);
        boolean boolean64 = jSONWriter60.hasFilter();
        jSONWriter60.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable67 = jSONWriter60.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable68 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable68);
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature73 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray75 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature70, feature71, feature72, feature73, feature74 };
        com.alibaba.fastjson2.JSONWriter.Context context76 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray75);
        java.lang.Class class78 = null;
        boolean boolean80 = jSONWriter69.isWriteMapTypeInfo((java.lang.Object) jSONWriter77, class78, 0L);
        java.lang.String[] strArray82 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList83 = new java.util.ArrayList<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList83, strArray82);
        jSONWriter69.writeString((java.util.List<java.lang.String>) strList83);
        jSONWriter60.write((java.util.List) strList83);
        jSONWriter53.write((java.util.List) strList83);
        jSONWriter47.write((java.util.List) strList83);
        jSONWriter34.write((java.util.List) strList83);
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(symbolTable67);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature73.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray75);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(jSONWriter90);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        jSONWriter13.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeName("");
        boolean boolean27 = jSONWriter17.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj29 = null;
        boolean boolean30 = jSONWriter28.removeReference(obj29);
        char[] charArray34 = new char[] { '#', ' ', '#' };
        jSONWriter28.writeString(charArray34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj37 = null;
        boolean boolean38 = jSONWriter36.removeReference(obj37);
        jSONWriter36.writeNull();
        boolean boolean40 = jSONWriter28.isWriteTypeInfo((java.lang.Object) jSONWriter36);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        jSONWriter36.writeBinary(byteArray43);
        boolean boolean47 = jSONWriter17.writeTypeName(byteArray43, (long) (byte) 100);
        jSONWriter13.writeRaw(byteArray43);
        jSONWriter0.writeNameRaw(byteArray43, 1024L);
        java.text.DecimalFormat decimalFormat52 = null;
        jSONWriter0.writeDouble((double) (-1.0f), decimalFormat52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        jSONWriter54.writeNameRaw(byteArray56);
        java.nio.charset.Charset charset58 = jSONWriter54.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter54.config(feature59, true);
        com.alibaba.fastjson2.JSONWriter jSONWriter62 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj63 = null;
        boolean boolean64 = jSONWriter62.removeReference(obj63);
        long[] longArray68 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter62.writeInt64(longArray68);
        jSONWriter54.writeInt64(longArray68);
        jSONWriter0.writeInt64(longArray68);
        java.time.LocalDateTime localDateTime72 = null;
        jSONWriter0.writeLocalDateTime(localDateTime72);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1, -1, 10]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        int int55 = jSONWriter40.level();
        long long57 = jSONWriter40.getFeatures((long) (-1));
        java.lang.Class<?> wildcardClass58 = jSONWriter40.getClass();
        boolean boolean60 = jSONWriter10.isWriteTypeInfo((java.lang.Object) (short) -1, (java.lang.Class) wildcardClass58, (long) '4');
        jSONWriter10.writeNumberNull();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.writeName((long) 10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter32 = null;
        context28.setBeforeFilter(beforeFilter32);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter34 = null;
        context28.setLabelFilter(labelFilter34);
        boolean boolean36 = context28.isFormatyyyyMMddhhmmss19();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        com.alibaba.fastjson2.JSONObject jSONObject8 = null;
        jSONWriter0.write(jSONObject8);
        java.lang.Class class11 = null;
        boolean boolean13 = jSONWriter0.isWriteTypeInfo((java.lang.Object) false, class11, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject14 = null;
        jSONWriter0.write(jSONObject14);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateYYYMMDD10((int) (byte) 100, (int) (byte) 0, 2);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        java.math.BigDecimal bigDecimal10 = null;
        jSONWriter0.writeDecimal(bigDecimal10, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = context19.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId21 = context19.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter22 = context19.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context19.getAfterFilter();
        java.lang.Class class24 = null;
        boolean boolean25 = jSONWriter0.isWriteTypeInfo((java.lang.Object) afterFilter23, class24);
        long long26 = jSONWriter0.getFeatures();
        boolean boolean27 = jSONWriter0.isUTF16();
        jSONWriter0.writeTypeName("$.hi\\!");
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNull(afterFilter22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1024L + "'", long26 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        jSONWriter0.writeMillis(1056L);
        java.time.LocalTime localTime10 = null;
        jSONWriter0.writeLocalTime(localTime10);
        jSONWriter0.writeInt16((short) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        boolean boolean23 = context22.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter24 = context22.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter25 = null;
        context22.setPropertyFilter(propertyFilter25);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter27 = context22.getBeforeFilter();
        java.time.ZoneId zoneId28 = context22.getZoneId();
        jSONWriter0.popPath((java.lang.Object) context22);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(propertyFilter24);
        org.junit.Assert.assertNull(beforeFilter27);
        org.junit.Assert.assertNotNull(zoneId28);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        byte[] byteArray2 = jSONWriter0.getBytes();
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj4 = null;
        boolean boolean5 = jSONWriter3.removeReference(obj4);
        long[] longArray9 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter3.writeInt64(longArray9);
        java.nio.charset.Charset charset11 = jSONWriter3.getCharset();
        boolean[] booleanArray12 = new boolean[] {};
        jSONWriter3.writeBool(booleanArray12);
        boolean boolean15 = jSONWriter3.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray22 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature16, feature17, feature18, feature19, feature20, feature21 };
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(featureArray22);
        boolean boolean25 = jSONWriter3.removeReference((java.lang.Object) featureArray22);
        byte[] byteArray26 = jSONWriter3.getBytes();
        boolean boolean27 = jSONWriter0.isRefDetect((java.lang.Object) jSONWriter3);
        java.math.BigInteger bigInteger28 = null;
        jSONWriter3.writeBigInt(bigInteger28, (long) (short) 0);
        java.math.BigInteger bigInteger31 = null;
        jSONWriter3.writeBigInt(bigInteger31, 1024L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        long[] longArray13 = new long[] {};
        jSONWriter10.writeInt64(longArray13);
        java.util.Map map15 = null;
        jSONWriter10.write(map15);
        java.util.Map map17 = null;
        jSONWriter10.write(map17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray20 = new double[] {};
        java.text.DecimalFormat decimalFormat21 = null;
        jSONWriter19.writeDouble(doubleArray20, decimalFormat21);
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter10.writeDouble(doubleArray20, decimalFormat23);
        jSONWriter0.writeAny((java.lang.Object) decimalFormat23);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter0.writeBigInt(bigInteger26);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.SymbolTable symbolTable10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9, symbolTable10);
        boolean boolean12 = context9.isDateFormatISO8601();
        java.lang.String str13 = context9.getDateFormat();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        jSONWriter0.writeDouble((double) 1024L);
        boolean boolean10 = jSONWriter0.isBeanToArray();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeMillis(0L);
        jSONWriter0.writeArrayNull();
        byte[] byteArray14 = jSONWriter0.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeDateYYYMMDD10((int) (short) -1, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-105, -1, -1, 10, -108, -84, 0, 0, 0, 0, -81]");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeMillis((long) (byte) 10);
        long long12 = jSONWriter0.getFeatures();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray1);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter5 = null;
        context4.setPropertyPreFilter(propertyPreFilter5);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter0.writeFloat((float) 100, decimalFormat18);
        java.util.UUID uUID20 = null;
        jSONWriter0.writeUUID(uUID20);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter12.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter12.writeEnum((java.lang.Enum) feature14);
        boolean boolean16 = jSONWriter12.hasFilter();
        jSONWriter12.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.math.BigDecimal bigDecimal23 = null;
        jSONWriter19.writeDecimal(bigDecimal23, 1L);
        char[] charArray30 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter19.writeString(charArray30, (int) (byte) 100, (int) (short) 0);
        jSONWriter12.writeString(charArray30);
        jSONWriter0.writeString(charArray30);
        jSONWriter0.writeInt16((short) 0);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.MapSortField;
        boolean boolean39 = jSONWriter0.isEnabled(feature38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray45 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44 };
        com.alibaba.fastjson2.JSONWriter.Context context46 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray45);
        boolean boolean47 = context46.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId48 = context46.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter49 = context46.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter50 = context46.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context46);
        boolean boolean53 = context46.isEnabled((long) (byte) 0);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter54 = null;
        context46.setContextValueFilter(contextValueFilter54);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter56 = null;
        context46.setPropertyPreFilter(propertyPreFilter56);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter58 = null;
        context46.setPropertyPreFilter(propertyPreFilter58);
        jSONWriter0.popPath((java.lang.Object) context46);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.MapSortField + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.MapSortField));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertNull(afterFilter49);
        org.junit.Assert.assertNull(afterFilter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        java.lang.String str30 = jSONWriter14.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray31 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray31);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter33 = null;
        com.alibaba.fastjson2.JSONWriter.Path path34 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path36 = new com.alibaba.fastjson2.JSONWriter.Path(path34, "");
        com.alibaba.fastjson2.JSONWriter.Path path38 = new com.alibaba.fastjson2.JSONWriter.Path(path36, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path40 = new com.alibaba.fastjson2.JSONWriter.Path(path38, "hi!");
        java.lang.String str41 = path40.toString();
        com.alibaba.fastjson2.JSONWriter.Path path43 = new com.alibaba.fastjson2.JSONWriter.Path(path40, (int) ' ');
        java.lang.String str44 = jSONWriter14.setPath(fieldWriter33, (java.lang.Object) path40);
        com.alibaba.fastjson2.JSONWriter.Path path46 = new com.alibaba.fastjson2.JSONWriter.Path(path40, (int) (byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertNotNull(path34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "$.[100].hi\\!" + "'", str41, "$.[100].hi\\!");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean8 = jSONWriter0.isWriteTypeInfo((java.lang.Object) featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature10, feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray16);
        java.lang.Class class19 = null;
        jSONWriter17.checkAndWriteTypeName((java.lang.Object) (byte) 0, class19);
        java.math.BigInteger bigInteger21 = null;
        jSONWriter17.writeBigInt(bigInteger21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter23.writeEnum((java.lang.Enum) feature25);
        boolean boolean27 = jSONWriter23.hasFilter();
        jSONWriter23.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray33 = new long[] {};
        jSONWriter30.writeInt64(longArray33);
        java.util.Map map35 = null;
        jSONWriter30.write(map35);
        java.util.Map map37 = null;
        jSONWriter30.write(map37);
        com.alibaba.fastjson2.JSONWriter jSONWriter39 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray40 = new double[] {};
        java.text.DecimalFormat decimalFormat41 = null;
        jSONWriter39.writeDouble(doubleArray40, decimalFormat41);
        java.text.DecimalFormat decimalFormat43 = null;
        jSONWriter30.writeDouble(doubleArray40, decimalFormat43);
        java.text.DecimalFormat decimalFormat45 = null;
        jSONWriter23.writeDouble(doubleArray40, decimalFormat45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray48 = new double[] {};
        java.text.DecimalFormat decimalFormat49 = null;
        jSONWriter47.writeDouble(doubleArray48, decimalFormat49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        jSONWriter47.writeDouble(doubleArray52);
        boolean boolean56 = jSONWriter47.isUTF16();
        java.lang.Class<?> wildcardClass57 = jSONWriter47.getClass();
        boolean boolean58 = jSONWriter17.isWriteTypeInfo((java.lang.Object) doubleArray40, (java.lang.Class) wildcardClass57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter9.writeDouble(doubleArray40, decimalFormat59);
        java.io.Reader reader61 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter9.writeString(reader61);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(jSONWriter39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        jSONWriter10.writeMillis((long) (-1));
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter10.flushTo(writer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        jSONWriter0.writeSymbol((int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter18 = context17.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter19 = null;
        context17.setLabelFilter(labelFilter19);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider21 = context17.provider;
        boolean boolean23 = context17.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray29 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28 };
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray29);
        boolean boolean31 = context30.isFormatyyyyMMddhhmmss19();
        boolean boolean33 = context30.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter34 = null;
        context30.setPropertyPreFilter(propertyPreFilter34);
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.of(context30);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider37 = context30.provider;
        com.alibaba.fastjson2.JSONWriter jSONWriter38 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj39 = null;
        boolean boolean40 = jSONWriter38.removeReference(obj39);
        long[] longArray41 = new long[] {};
        jSONWriter38.writeInt64(longArray41);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter38.config(feature43, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray52 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50, feature51 };
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray52);
        jSONWriter38.config(featureArray52);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(featureArray52);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider37, featureArray52);
        context17.config(featureArray52);
        boolean boolean59 = jSONWriter0.containsReference((java.lang.Object) context17);
        jSONWriter0.startArray(0);
        com.alibaba.fastjson2.JSONObject jSONObject62 = null;
        jSONWriter0.write(jSONObject62);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertNull(afterFilter18);
        org.junit.Assert.assertNotNull(objectWriterProvider21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(objectWriterProvider37);
        org.junit.Assert.assertNotNull(jSONWriter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray52);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        jSONWriter0.writeInt32(0);
        jSONWriter0.endArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        jSONWriter7.writeNull();
        java.time.LocalDate localDate11 = null;
        jSONWriter7.writeLocalDate(localDate11);
        java.util.UUID uUID13 = null;
        jSONWriter7.writeUUID(uUID13);
        jSONWriter0.writeAny((java.lang.Object) uUID13);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        long[] longArray22 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter16.writeInt64(longArray22);
        java.nio.charset.Charset charset24 = jSONWriter16.getCharset();
        boolean[] booleanArray25 = new boolean[] {};
        jSONWriter16.writeBool(booleanArray25);
        jSONWriter16.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        boolean[] booleanArray39 = new boolean[] {};
        jSONWriter30.writeBool(booleanArray39);
        jSONWriter30.writeSymbol((int) (byte) 100);
        boolean boolean43 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter44.getContext();
        jSONWriter44.writeMillis((long) (short) 1);
        long long48 = jSONWriter44.getFeatures();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        jSONWriter49.writeNameRaw(byteArray51);
        java.nio.charset.Charset charset53 = jSONWriter49.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter49.config(feature54, true);
        jSONWriter49.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj60 = null;
        boolean boolean61 = jSONWriter59.removeReference(obj60);
        jSONWriter59.writeNull();
        java.math.BigDecimal bigDecimal63 = null;
        jSONWriter59.writeDecimal(bigDecimal63, 1L);
        java.math.BigInteger bigInteger66 = null;
        jSONWriter59.writeBigInt(bigInteger66);
        jSONWriter59.writeInt64((long) 0);
        boolean boolean71 = jSONWriter49.isWriteTypeInfo((java.lang.Object) jSONWriter59, (long) (byte) 1);
        jSONWriter59.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter59.writeBooleanNull();
        java.nio.charset.Charset charset80 = jSONWriter59.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        jSONWriter81.writeNameRaw(byteArray83);
        jSONWriter59.writeStringLatin1(byteArray83);
        jSONWriter44.writeHex(byteArray83);
        jSONWriter0.writeHex(byteArray83);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeFloat((float) ' ');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeComma();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = null;
        context6.setValueFilter(valueFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = context6.getPropertyFilter();
        boolean boolean14 = context6.isEnabled((long) (short) 10);
        boolean boolean15 = context6.isDateFormatMillis();
        java.time.ZoneId zoneId16 = context6.getZoneId();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(propertyFilter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zoneId16);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        boolean boolean9 = jSONWriter8.isBeanToArray();
        jSONWriter8.close();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        com.alibaba.fastjson2.JSONObject jSONObject19 = null;
        jSONWriter11.write(jSONObject19);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter11.isWriteTypeInfo((java.lang.Object) false, class22, (long) (short) -1);
        jSONWriter11.writeChar(' ');
        com.alibaba.fastjson2.SymbolTable symbolTable27 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        long[] longArray35 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter29.writeInt64(longArray35);
        jSONWriter28.writeInt64(longArray35);
        java.math.BigDecimal bigDecimal38 = null;
        jSONWriter28.writeDecimal(bigDecimal38);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj41 = null;
        boolean boolean42 = jSONWriter40.removeReference(obj41);
        long[] longArray46 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter40.writeInt64(longArray46);
        java.nio.charset.Charset charset48 = jSONWriter40.getCharset();
        boolean[] booleanArray49 = new boolean[] {};
        jSONWriter40.writeBool(booleanArray49);
        boolean boolean52 = jSONWriter40.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray59 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53, feature54, feature55, feature56, feature57, feature58 };
        com.alibaba.fastjson2.JSONWriter jSONWriter60 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray59);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.of(featureArray59);
        boolean boolean62 = jSONWriter40.removeReference((java.lang.Object) featureArray59);
        byte[] byteArray63 = jSONWriter40.getBytes();
        jSONWriter28.writeHex(byteArray63);
        jSONWriter11.writeRaw(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter8.writeRaw(byteArray63);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray59);
        org.junit.Assert.assertNotNull(jSONWriter60);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-105, -1, -1, 10, -108]");
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        jSONWriter0.writeRaw((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        long[] longArray20 = new long[] {};
        jSONWriter17.writeInt64(longArray20);
        java.util.Map map22 = null;
        jSONWriter17.write(map22);
        java.util.Map map24 = null;
        jSONWriter17.write(map24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        java.text.DecimalFormat decimalFormat30 = null;
        jSONWriter17.writeDouble(doubleArray27, decimalFormat30);
        java.math.BigInteger bigInteger32 = null;
        jSONWriter17.writeBigInt(bigInteger32, (long) (short) -1);
        boolean boolean35 = jSONWriter0.removeReference((java.lang.Object) jSONWriter17);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        com.alibaba.fastjson2.JSONWriter.Context context45 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray43);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter46 = null;
        context45.setLabelFilter(labelFilter46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(context45);
        com.alibaba.fastjson2.SymbolTable symbolTable49 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context45, symbolTable49);
        jSONWriter50.writeInt8((byte) 100);
        java.lang.String str53 = jSONWriter0.setPath("$", (java.lang.Object) jSONWriter50);
        jSONWriter0.writeDateTime19((int) 'a', (int) '#', 10, (int) (short) 100, (int) (short) 1, 10);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        boolean boolean13 = jSONWriter1.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter14.writeBooleanNull();
        byte[] byteArray16 = jSONWriter14.getBytes();
        jSONWriter1.writeNameRaw(byteArray16);
        java.math.BigDecimal bigDecimal18 = null;
        jSONWriter1.writeDecimal(bigDecimal18, 1L);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        jSONWriter22.writeNameRaw(byteArray24);
        jSONWriter22.writeString("hi!");
        jSONWriter22.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray36 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34, feature35 };
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray36);
        jSONWriter37.writeBooleanNull();
        jSONWriter37.writeComma();
        jSONWriter22.startArray((java.lang.Object) jSONWriter37, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47 };
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray48);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter51 = null;
        context50.setBeforeFilter(beforeFilter51);
        boolean boolean53 = jSONWriter37.removeReference((java.lang.Object) context50);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter.Context context61 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray60);
        com.alibaba.fastjson2.JSONWriter jSONWriter63 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        context50.config(featureArray60);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter65 = null;
        context50.setLabelFilter(labelFilter65);
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature70 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature71 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature72 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray73 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature68, feature69, feature70, feature71, feature72 };
        com.alibaba.fastjson2.JSONWriter.Context context74 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        boolean boolean75 = jSONWriter67.isWriteTypeInfo((java.lang.Object) featureArray73);
        context50.config(featureArray73);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray73);
        java.lang.String str78 = jSONWriter1.setPath(9, (java.lang.Object) featureArray73);
        com.alibaba.fastjson2.JSONWriter.Context context79 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray73);
        boolean boolean81 = context79.isEnabled((long) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter63);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature70 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature70.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature71.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature72 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature72.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        byte[] byteArray2 = jSONWriter0.getBytes();
        java.text.DecimalFormat decimalFormat4 = null;
        jSONWriter0.writeFloat(100.0f, decimalFormat4);
        java.time.Instant instant6 = null;
        jSONWriter0.writeInstant(instant6);
        jSONWriter0.writeName("$.[100][4]");
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameAny(obj10);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-81]");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        jSONWriter10.writeMillis((long) (-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        jSONWriter14.writeNameRaw(byteArray16);
        java.nio.charset.Charset charset18 = jSONWriter14.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter14.config(feature19, true);
        jSONWriter14.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        jSONWriter23.writeNull();
        java.lang.reflect.Type type28 = null;
        boolean boolean29 = jSONWriter23.isWriteTypeInfo((java.lang.Object) true, type28);
        jSONWriter14.popPath((java.lang.Object) boolean29);
        jSONWriter14.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        jSONWriter14.writeNameRaw(byteArray35);
        long long39 = jSONWriter14.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter40 = null;
        java.lang.String str42 = jSONWriter14.setPath(fieldWriter40, (java.lang.Object) (-1.0f));
        jSONWriter14.writeNumberNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        jSONWriter44.writeNameRaw(byteArray46);
        java.nio.charset.Charset charset48 = jSONWriter44.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter44.config(feature49, true);
        jSONWriter44.writeSymbol("");
        java.math.BigDecimal bigDecimal54 = null;
        jSONWriter44.writeDecimal(bigDecimal54, (long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        jSONWriter57.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        jSONWriter61.writeNameRaw(byteArray63);
        java.nio.charset.Charset charset65 = jSONWriter61.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter61.config(feature66, true);
        jSONWriter61.writeName("");
        boolean boolean71 = jSONWriter61.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj73 = null;
        boolean boolean74 = jSONWriter72.removeReference(obj73);
        char[] charArray78 = new char[] { '#', ' ', '#' };
        jSONWriter72.writeString(charArray78);
        com.alibaba.fastjson2.JSONWriter jSONWriter80 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj81 = null;
        boolean boolean82 = jSONWriter80.removeReference(obj81);
        jSONWriter80.writeNull();
        boolean boolean84 = jSONWriter72.isWriteTypeInfo((java.lang.Object) jSONWriter80);
        com.alibaba.fastjson2.JSONWriter jSONWriter85 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        jSONWriter85.writeNameRaw(byteArray87);
        jSONWriter80.writeBinary(byteArray87);
        boolean boolean91 = jSONWriter61.writeTypeName(byteArray87, (long) (byte) 100);
        jSONWriter57.writeRaw(byteArray87);
        jSONWriter44.writeNameRaw(byteArray87, 1024L);
        jSONWriter14.writeStringLatin1(byteArray87);
        java.nio.charset.Charset charset96 = jSONWriter14.getCharset();
        byte[] byteArray97 = jSONWriter10.getBytes(charset96);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1056L + "'", long39 == 1056L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSONWriter85);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[100]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(charset96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[110, 117, 108, 108, 45, 49]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter10);
        java.math.BigInteger bigInteger26 = null;
        jSONWriter10.writeBigInt(bigInteger26, 10L);
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature29, feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray35);
        java.lang.Class class38 = null;
        jSONWriter36.checkAndWriteTypeName((java.lang.Object) (byte) 0, class38);
        java.math.BigInteger bigInteger40 = null;
        jSONWriter36.writeBigInt(bigInteger40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        long[] longArray45 = new long[] {};
        jSONWriter42.writeInt64(longArray45);
        java.util.Map map47 = null;
        jSONWriter42.write(map47);
        java.util.Map map49 = null;
        jSONWriter42.write(map49);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray52 = new double[] {};
        java.text.DecimalFormat decimalFormat53 = null;
        jSONWriter51.writeDouble(doubleArray52, decimalFormat53);
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter42.writeDouble(doubleArray52, decimalFormat55);
        boolean boolean57 = jSONWriter42.useSingleQuote;
        java.lang.Class class59 = null;
        boolean boolean60 = jSONWriter42.isWriteTypeInfo((java.lang.Object) false, class59);
        int[] intArray65 = new int[] { (short) 0, (byte) 10, '4', (short) 100 };
        jSONWriter42.writeInt32(intArray65);
        jSONWriter36.writeInt32(intArray65);
        jSONWriter10.writeInt32(intArray65);
        jSONWriter10.writeDateTime19(1, (int) (short) 100, (int) (byte) 100, (int) (byte) 10, (int) (short) 1, (int) '4');
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray77 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature76 };
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray77);
        long long80 = jSONWriter78.getFeatures((long) (short) 100);
        boolean boolean81 = jSONWriter10.isRefDetect((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 10, 52, 100]");
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray77);
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.lang.reflect.Type type14 = null;
        boolean boolean15 = jSONWriter9.isWriteTypeInfo((java.lang.Object) true, type14);
        jSONWriter0.popPath((java.lang.Object) boolean15);
        jSONWriter0.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        jSONWriter0.writeNameRaw(byteArray21);
        long long25 = jSONWriter0.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter26 = null;
        java.lang.String str28 = jSONWriter0.setPath(fieldWriter26, (java.lang.Object) (-1.0f));
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj30 = null;
        boolean boolean31 = jSONWriter29.removeReference(obj30);
        char[] charArray35 = new char[] { '#', ' ', '#' };
        jSONWriter29.writeString(charArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        boolean boolean41 = jSONWriter29.isWriteTypeInfo((java.lang.Object) jSONWriter37);
        boolean boolean42 = jSONWriter0.isIgnoreNoneSerializable((java.lang.Object) jSONWriter29);
        byte[] byteArray43 = jSONWriter29.getBytes();
        jSONWriter29.writeString("$.[100].hi\\!");
        jSONWriter29.writeMillis((long) (short) -1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1056L + "'", long25 == 1056L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[76, 35, 32, 35]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        jSONWriter10.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter32 = context31.getValueFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter33 = null;
        context31.setLabelFilter(labelFilter33);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter35 = context31.getPropertyFilter();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNull(valueFilter32);
        org.junit.Assert.assertNull(propertyFilter35);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        com.alibaba.fastjson2.JSONWriter.Context context5 = jSONWriter0.getContext();
        java.util.UUID uUID6 = null;
        jSONWriter0.writeUUID(uUID6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj10 = null;
        boolean boolean11 = jSONWriter9.removeReference(obj10);
        jSONWriter9.writeNull();
        java.math.BigDecimal bigDecimal13 = null;
        jSONWriter9.writeDecimal(bigDecimal13, 1L);
        java.math.BigInteger bigInteger16 = null;
        jSONWriter9.writeBigInt(bigInteger16);
        jSONWriter9.close();
        jSONWriter9.writeMillis((long) (byte) 10);
        java.lang.String str21 = jSONWriter0.setPath((int) (short) 100, (java.lang.Object) jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(context5);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter12 = null;
        context6.setPropertyFilter(propertyFilter12);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter14 = context6.getLabelFilter();
        boolean boolean15 = context6.isDateFormatMillis();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(labelFilter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        com.alibaba.fastjson2.JSONObject jSONObject5 = null;
        jSONWriter0.write(jSONObject5);
        boolean boolean7 = jSONWriter0.isIgnoreNoneSerializable();
        jSONWriter0.writeDateTime14(10, 3, (int) ' ', (int) (short) 10, 0, 15);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        boolean boolean9 = jSONWriter0.isIgnoreNoneSerializable();
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        jSONWriter19.writeNull();
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = jSONWriter19.isWriteTypeInfo((java.lang.Object) true, type24);
        jSONWriter10.popPath((java.lang.Object) boolean25);
        jSONWriter10.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        jSONWriter29.writeNameRaw(byteArray31);
        jSONWriter10.writeNameRaw(byteArray31);
        long long35 = jSONWriter10.getFeatures((long) ' ');
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter36 = null;
        java.lang.String str38 = jSONWriter10.setPath(fieldWriter36, (java.lang.Object) (-1.0f));
        long long39 = jSONWriter10.getFeatures();
        jSONWriter0.writeAny((java.lang.Object) long39);
        jSONWriter0.writeNull();
        boolean boolean42 = jSONWriter0.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature44, feature45, feature46, feature47, feature48 };
        com.alibaba.fastjson2.JSONWriter.Context context50 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray49);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter52 = null;
        context51.setLabelFilter(labelFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.of(context51);
        boolean boolean55 = jSONWriter54.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        jSONWriter56.writeNameRaw(byteArray58);
        java.nio.charset.Charset charset60 = jSONWriter56.getCharset();
        byte[] byteArray61 = jSONWriter54.getBytes(charset60);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeBase64(byteArray61);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1056L + "'", long35 == 1056L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1024L + "'", long39 == 1024L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100]");
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        java.math.BigDecimal bigDecimal16 = null;
        java.text.DecimalFormat decimalFormat18 = null;
        jSONWriter0.writeDecimal(bigDecimal16, 0L, decimalFormat18);
        java.math.BigInteger bigInteger20 = null;
        jSONWriter0.writeBigInt(bigInteger20);
        boolean boolean23 = jSONWriter0.isEnabled((long) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter12.writeTypeName("$");
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter5 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj6 = null;
        boolean boolean7 = jSONWriter5.removeReference(obj6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        char[] charArray14 = new char[] { '#', ' ', '#' };
        jSONWriter8.writeString(charArray14);
        boolean boolean16 = jSONWriter5.removeReference((java.lang.Object) jSONWriter8);
        java.nio.charset.Charset charset17 = jSONWriter5.getCharset();
        boolean boolean18 = jSONWriter5.isUseSingleQuotes();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        java.nio.charset.Charset charset23 = jSONWriter19.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter19.config(feature24, true);
        jSONWriter19.writeNull();
        java.text.DecimalFormat decimalFormat29 = null;
        jSONWriter19.writeFloat((float) '#', decimalFormat29);
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj32 = null;
        boolean boolean33 = jSONWriter31.removeReference(obj32);
        long[] longArray37 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter31.writeInt64(longArray37);
        java.nio.charset.Charset charset39 = jSONWriter31.getCharset();
        boolean[] booleanArray40 = new boolean[] {};
        jSONWriter31.writeBool(booleanArray40);
        jSONWriter31.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj45 = null;
        boolean boolean46 = jSONWriter44.removeReference(obj45);
        long[] longArray47 = new long[] {};
        jSONWriter44.writeInt64(longArray47);
        java.util.Map map49 = null;
        jSONWriter44.write(map49);
        java.util.Map map51 = null;
        jSONWriter44.write(map51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray54 = new double[] {};
        java.text.DecimalFormat decimalFormat55 = null;
        jSONWriter53.writeDouble(doubleArray54, decimalFormat55);
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter44.writeDouble(doubleArray54, decimalFormat57);
        boolean boolean59 = jSONWriter44.useSingleQuote;
        java.lang.Class class60 = null;
        boolean boolean62 = jSONWriter31.isWriteMapTypeInfo((java.lang.Object) jSONWriter44, class60, (long) (short) -1);
        jSONWriter31.endObject();
        jSONWriter31.writeBooleanNull();
        jSONWriter31.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter67 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter67.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature69 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter67.writeEnum((java.lang.Enum) feature69);
        boolean boolean71 = jSONWriter67.hasFilter();
        jSONWriter67.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable74 = jSONWriter67.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray82 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature77, feature78, feature79, feature80, feature81 };
        com.alibaba.fastjson2.JSONWriter.Context context83 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray82);
        com.alibaba.fastjson2.JSONWriter jSONWriter84 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray82);
        java.lang.Class class85 = null;
        boolean boolean87 = jSONWriter76.isWriteMapTypeInfo((java.lang.Object) jSONWriter84, class85, 0L);
        java.lang.String[] strArray89 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        jSONWriter76.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter67.write((java.util.List) strList90);
        jSONWriter31.write((java.util.List) strList90);
        jSONWriter19.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter5.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter2.writeString((java.util.List<java.lang.String>) strList90);
        jSONWriter2.writeBooleanNull();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[]");
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(jSONWriter67);
        org.junit.Assert.assertTrue("'" + feature69 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature69.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(symbolTable74);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray82);
        org.junit.Assert.assertNotNull(jSONWriter84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeBool(false);
        jSONWriter0.writeName("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        jSONWriter12.writeString("hi!");
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23 };
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray24);
        boolean boolean26 = context25.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId27 = context25.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = context25.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter29 = context25.getAfterFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString;
        context25.config(feature30, false);
        java.lang.String str33 = jSONWriter12.setPath("", (java.lang.Object) context25);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.of(featureArray40);
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        context25.config(featureArray40);
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        long[] longArray49 = new long[] {};
        jSONWriter46.writeInt64(longArray49);
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter46.config(feature51, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature59 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray60 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature54, feature55, feature56, feature57, feature58, feature59 };
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray60);
        com.alibaba.fastjson2.JSONWriter.Context context62 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray60);
        jSONWriter46.config(featureArray60);
        context25.config(featureArray60);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeNameAny((java.lang.Object) context25);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertNull(afterFilter28);
        org.junit.Assert.assertNull(afterFilter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNonStringValueAsString));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature59 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature59.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray60);
        org.junit.Assert.assertNotNull(jSONWriter61);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        jSONWriter35.writeNameRaw(byteArray37);
        java.nio.charset.Charset charset39 = jSONWriter35.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter35.config(feature40, true);
        jSONWriter35.writeSymbol("");
        java.math.BigDecimal bigDecimal45 = null;
        jSONWriter35.writeDecimal(bigDecimal45, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature51 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature52 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray53 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature48, feature49, feature50, feature51, feature52 };
        com.alibaba.fastjson2.JSONWriter.Context context54 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray53);
        boolean boolean55 = context54.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId56 = context54.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter57 = context54.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter58 = context54.getAfterFilter();
        java.lang.Class class59 = null;
        boolean boolean60 = jSONWriter35.isWriteTypeInfo((java.lang.Object) afterFilter58, class59);
        long long61 = jSONWriter35.getFeatures();
        jSONWriter13.popPath((java.lang.Object) long61);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature51 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature51.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature52 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature52.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(zoneId56);
        org.junit.Assert.assertNull(afterFilter57);
        org.junit.Assert.assertNull(afterFilter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1024L + "'", long61 == 1024L);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.popPath((java.lang.Object) (short) 0);
        java.math.BigInteger bigInteger10 = null;
        jSONWriter0.writeBigInt(bigInteger10, (long) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj18 = null;
        boolean boolean19 = jSONWriter17.removeReference(obj18);
        char[] charArray23 = new char[] { '#', ' ', '#' };
        jSONWriter17.writeString(charArray23);
        boolean boolean25 = jSONWriter14.removeReference((java.lang.Object) jSONWriter17);
        java.lang.String str26 = jSONWriter0.setPath((int) '#', (java.lang.Object) jSONWriter14);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray32 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature27, feature28, feature29, feature30, feature31 };
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray32);
        boolean boolean34 = context33.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId35 = context33.getZoneId();
        jSONWriter0.popPath((java.lang.Object) zoneId35);
        java.util.Map map37 = null;
        jSONWriter0.write(map37);
        jSONWriter0.writeDateTime19(6, 0, (int) (byte) 10, (int) '4', (int) (byte) 0, 9);
        boolean boolean46 = jSONWriter0.jsonb;
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        jSONWriter7.writeBooleanNull();
        long[] longArray13 = new long[] { (byte) 10, (short) 100, (short) 1, (short) 0 };
        jSONWriter7.writeInt64(longArray13);
        com.alibaba.fastjson2.JSONObject jSONObject15 = null;
        jSONWriter7.write(jSONObject15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[10, 100, 1, 0]");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        jSONWriter0.endObject();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.writeSymbol((int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter36.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter36.writeEnum((java.lang.Enum) feature38);
        boolean boolean40 = jSONWriter36.hasFilter();
        jSONWriter36.writeBool(true);
        com.alibaba.fastjson2.SymbolTable symbolTable43 = jSONWriter36.getSymbolTable();
        com.alibaba.fastjson2.SymbolTable symbolTable44 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter45 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable44);
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray51);
        java.lang.Class class54 = null;
        boolean boolean56 = jSONWriter45.isWriteMapTypeInfo((java.lang.Object) jSONWriter53, class54, 0L);
        java.lang.String[] strArray58 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        jSONWriter45.writeString((java.util.List<java.lang.String>) strList59);
        jSONWriter36.write((java.util.List) strList59);
        jSONWriter0.write((java.util.List) strList59);
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature68 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray69 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature64, feature65, feature66, feature67, feature68 };
        com.alibaba.fastjson2.JSONWriter.Context context70 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray69);
        boolean boolean71 = context70.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter72 = null;
        context70.setBeforeFilter(beforeFilter72);
        java.time.ZoneId zoneId74 = context70.getZoneId();
        boolean boolean75 = context70.isDateFormatUnixTime();
        boolean boolean76 = jSONWriter0.removeReference((java.lang.Object) context70);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter77 = null;
        context70.setPropertyFilter(propertyFilter77);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter79 = null;
        context70.setValueFilter(valueFilter79);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(symbolTable43);
        org.junit.Assert.assertNotNull(jSONWriter45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature68 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature68.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(zoneId74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        jSONWriter12.writeNameRaw(byteArray14);
        java.nio.charset.Charset charset16 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray18 = new double[] {};
        java.text.DecimalFormat decimalFormat19 = null;
        jSONWriter17.writeDouble(doubleArray18, decimalFormat19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray22 = new double[] {};
        java.text.DecimalFormat decimalFormat23 = null;
        jSONWriter21.writeDouble(doubleArray22, decimalFormat23);
        jSONWriter17.writeDouble(doubleArray22);
        boolean boolean26 = jSONWriter17.isUTF16();
        java.lang.Class<?> wildcardClass27 = jSONWriter17.getClass();
        com.alibaba.fastjson2.writer.ObjectWriter objectWriter28 = jSONWriter12.getObjectWriter((java.lang.Class) wildcardClass27);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter29.writeBooleanNull();
        boolean boolean32 = jSONWriter29.isEnabled((long) (byte) 0);
        boolean boolean33 = jSONWriter29.isIgnoreErrorGetter();
        java.time.OffsetDateTime offsetDateTime34 = null;
        jSONWriter29.writeOffsetDateTime(offsetDateTime34);
        jSONWriter12.writeAny((java.lang.Object) offsetDateTime34);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        long[] longArray43 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter37.writeInt64(longArray43);
        java.nio.charset.Charset charset45 = jSONWriter37.getCharset();
        boolean[] booleanArray46 = new boolean[] {};
        jSONWriter37.writeBool(booleanArray46);
        jSONWriter37.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj51 = null;
        boolean boolean52 = jSONWriter50.removeReference(obj51);
        long[] longArray53 = new long[] {};
        jSONWriter50.writeInt64(longArray53);
        java.util.Map map55 = null;
        jSONWriter50.write(map55);
        java.util.Map map57 = null;
        jSONWriter50.write(map57);
        com.alibaba.fastjson2.JSONWriter jSONWriter59 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray60 = new double[] {};
        java.text.DecimalFormat decimalFormat61 = null;
        jSONWriter59.writeDouble(doubleArray60, decimalFormat61);
        java.text.DecimalFormat decimalFormat63 = null;
        jSONWriter50.writeDouble(doubleArray60, decimalFormat63);
        boolean boolean65 = jSONWriter50.useSingleQuote;
        java.lang.Class class66 = null;
        boolean boolean68 = jSONWriter37.isWriteMapTypeInfo((java.lang.Object) jSONWriter50, class66, (long) (short) -1);
        jSONWriter37.endObject();
        java.math.BigDecimal bigDecimal70 = null;
        jSONWriter37.writeDecimal(bigDecimal70);
        com.alibaba.fastjson2.SymbolTable symbolTable72 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter73 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable72);
        com.alibaba.fastjson2.JSONWriter.Feature feature74 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature75 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature76 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature77 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray79 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature74, feature75, feature76, feature77, feature78 };
        com.alibaba.fastjson2.JSONWriter.Context context80 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray79);
        java.lang.Class class82 = null;
        boolean boolean84 = jSONWriter73.isWriteMapTypeInfo((java.lang.Object) jSONWriter81, class82, 0L);
        java.lang.String[] strArray86 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        jSONWriter73.writeString((java.util.List<java.lang.String>) strList87);
        jSONWriter37.writeString((java.util.List<java.lang.String>) strList87);
        jSONWriter12.write((java.util.List) strList87);
        jSONWriter11.write((java.util.List) strList87);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objectWriter28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[]");
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertNotNull(jSONWriter59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(jSONWriter73);
        org.junit.Assert.assertTrue("'" + feature74 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature74.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature75.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature76 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature76.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature77.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray79);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        context8.config(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofUTF8(context10);
        jSONWriter11.writeName((-1L));
        jSONWriter11.writeRaw('4');
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        long[] longArray22 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter16.writeInt64(longArray22);
        java.nio.charset.Charset charset24 = jSONWriter16.getCharset();
        boolean[] booleanArray25 = new boolean[] {};
        jSONWriter16.writeBool(booleanArray25);
        jSONWriter16.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter16);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        long[] longArray36 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter30.writeInt64(longArray36);
        java.nio.charset.Charset charset38 = jSONWriter30.getCharset();
        boolean[] booleanArray39 = new boolean[] {};
        jSONWriter30.writeBool(booleanArray39);
        jSONWriter30.writeSymbol((int) (byte) 100);
        boolean boolean43 = jSONWriter29.isRefDetect((java.lang.Object) jSONWriter30);
        com.alibaba.fastjson2.JSONWriter jSONWriter44 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter29);
        com.alibaba.fastjson2.JSONWriter.Context context45 = jSONWriter44.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter46 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj47 = null;
        boolean boolean48 = jSONWriter46.removeReference(obj47);
        long[] longArray49 = new long[] {};
        jSONWriter46.writeInt64(longArray49);
        java.util.Map map51 = null;
        jSONWriter46.write(map51);
        java.util.Map map53 = null;
        jSONWriter46.write(map53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray56 = new double[] {};
        java.text.DecimalFormat decimalFormat57 = null;
        jSONWriter55.writeDouble(doubleArray56, decimalFormat57);
        java.text.DecimalFormat decimalFormat59 = null;
        jSONWriter46.writeDouble(doubleArray56, decimalFormat59);
        boolean boolean61 = jSONWriter46.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray68 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature62, feature63, feature64, feature65, feature66, feature67 };
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray68);
        com.alibaba.fastjson2.JSONWriter jSONWriter70 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj71 = null;
        boolean boolean72 = jSONWriter70.removeReference(obj71);
        long[] longArray76 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter70.writeInt64(longArray76);
        com.alibaba.fastjson2.JSONWriter jSONWriter78 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj79 = null;
        boolean boolean80 = jSONWriter78.removeReference(obj79);
        char[] charArray84 = new char[] { '#', ' ', '#' };
        jSONWriter78.writeString(charArray84);
        java.lang.Class class86 = null;
        boolean boolean87 = jSONWriter70.isWriteTypeInfo((java.lang.Object) charArray84, class86);
        jSONWriter69.writeRaw(charArray84, (int) (byte) 0, (int) (byte) 0);
        jSONWriter46.writeString(charArray84);
        jSONWriter44.writeString(charArray84);
        jSONWriter11.writeString(charArray84);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSONWriter44);
        org.junit.Assert.assertNotNull(context45);
        org.junit.Assert.assertNotNull(jSONWriter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertNotNull(jSONWriter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        boolean boolean10 = context6.isDateFormatHasDay();
        boolean boolean11 = context6.isDateFormatMillis();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter12 = null;
        context6.setContextValueFilter(contextValueFilter12);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = context6.getContextValueFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(contextValueFilter14);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        jSONWriter2.writeFloat((float) (short) 0);
        long[] longArray5 = new long[] {};
        jSONWriter2.writeInt64(longArray5);
        jSONWriter2.writeInt16((short) 0);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean14 = jSONWriter1.hasFilter((long) (short) -1);
        boolean boolean15 = jSONWriter1.useSingleQuote;
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter1.writeFloat(0.0f, decimalFormat17);
        java.nio.charset.Charset charset19 = jSONWriter1.getCharset();
        jSONWriter1.writeMillis((long) 1);
        jSONWriter1.writeFloat((java.lang.Float) 100.0f);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj25 = null;
        boolean boolean26 = jSONWriter24.removeReference(obj25);
        long[] longArray30 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter24.writeInt64(longArray30);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter24.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray40 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38, feature39 };
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray40);
        java.lang.Class class43 = null;
        jSONWriter41.checkAndWriteTypeName((java.lang.Object) (byte) 0, class43);
        java.math.BigInteger bigInteger45 = null;
        jSONWriter41.writeBigInt(bigInteger45);
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj48 = null;
        boolean boolean49 = jSONWriter47.removeReference(obj48);
        boolean boolean50 = jSONWriter47.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context51 = jSONWriter47.context;
        java.lang.String str52 = context51.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter53 = null;
        context51.setBeforeFilter(beforeFilter53);
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue;
        boolean boolean56 = context51.isEnabled(feature55);
        boolean boolean57 = jSONWriter41.containsReference((java.lang.Object) feature55);
        boolean boolean58 = jSONWriter24.isEnabled(feature55);
        jSONWriter1.config(feature55, false);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        jSONWriter61.writeNameRaw(byteArray63);
        java.nio.charset.Charset charset65 = jSONWriter61.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter61.config(feature66, true);
        jSONWriter61.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter71 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj72 = null;
        boolean boolean73 = jSONWriter71.removeReference(obj72);
        long[] longArray77 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter71.writeInt64(longArray77);
        java.nio.charset.Charset charset79 = jSONWriter71.getCharset();
        java.lang.String str80 = jSONWriter61.setPath((int) (short) -1, (java.lang.Object) charset79);
        com.alibaba.fastjson2.JSONWriter jSONWriter81 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        jSONWriter81.writeNameRaw(byteArray83);
        jSONWriter61.writeNameRaw(byteArray83);
        jSONWriter1.writeRaw(byteArray83);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(context51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NullAsDefaultValue));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(jSONWriter81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        com.alibaba.fastjson2.SymbolTable symbolTable28 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable28);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        java.lang.Class class38 = null;
        boolean boolean40 = jSONWriter29.isWriteMapTypeInfo((java.lang.Object) jSONWriter37, class38, 0L);
        boolean boolean41 = jSONWriter29.useSingleQuote;
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter42.writeBooleanNull();
        byte[] byteArray44 = jSONWriter42.getBytes();
        jSONWriter29.writeNameRaw(byteArray44);
        jSONWriter0.setRootObject((java.lang.Object) jSONWriter29);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter29.writeDateTimeISO8601((int) (short) 1, 3, (int) (short) 10, 0, (int) (byte) -1, 3, (int) '4', (-1), false);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81]");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter32 = null;
        context28.setAfterFilter(afterFilter32);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter34 = context28.getPropertyFilter();
        boolean boolean35 = context28.isDateFormatUnixTime();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(propertyFilter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(0L);
        boolean boolean13 = context6.isDateFormatUnixTime();
        com.alibaba.fastjson2.filter.ValueFilter valueFilter14 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter15 = context6.getPropertyPreFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(valueFilter14);
        org.junit.Assert.assertNull(propertyPreFilter15);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray1 = new double[] {};
        java.text.DecimalFormat decimalFormat2 = null;
        jSONWriter0.writeDouble(doubleArray1, decimalFormat2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray5 = new double[] {};
        java.text.DecimalFormat decimalFormat6 = null;
        jSONWriter4.writeDouble(doubleArray5, decimalFormat6);
        jSONWriter0.writeDouble(doubleArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        jSONWriter9.writeNameRaw(byteArray11);
        jSONWriter9.writeString("hi!");
        jSONWriter9.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature17, feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray23);
        jSONWriter24.writeBooleanNull();
        jSONWriter24.writeComma();
        jSONWriter9.startArray((java.lang.Object) jSONWriter24, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Context context37 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray35);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter38 = null;
        context37.setBeforeFilter(beforeFilter38);
        boolean boolean40 = jSONWriter24.removeReference((java.lang.Object) context37);
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        context37.config(featureArray47);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter52 = null;
        context37.setLabelFilter(labelFilter52);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj55 = null;
        boolean boolean56 = jSONWriter54.removeReference(obj55);
        com.alibaba.fastjson2.JSONWriter jSONWriter57 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSONWriter57.removeReference(obj58);
        char[] charArray63 = new char[] { '#', ' ', '#' };
        jSONWriter57.writeString(charArray63);
        boolean boolean65 = jSONWriter54.removeReference((java.lang.Object) jSONWriter57);
        boolean boolean66 = jSONWriter57.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature67 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter57.writeEnum((java.lang.Enum) feature67);
        boolean boolean69 = context37.isEnabled(feature67);
        jSONWriter0.writeEnum((java.lang.Enum) feature67);
        jSONWriter0.writeChar('4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSONWriter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature67.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray1 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0 };
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray1);
        java.math.BigInteger bigInteger4 = null;
        jSONWriter3.writeBigInt(bigInteger4, 100L);
        boolean boolean7 = jSONWriter3.isIgnoreNoneSerializable();
        boolean boolean8 = jSONWriter3.hasFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        jSONWriter10.writeFloat((float) 0);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter10.getContext();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = context40.getAfterFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter42 = null;
        context40.setContextValueFilter(contextValueFilter42);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNull(afterFilter41);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter0.writeEnum((java.lang.Enum) feature2);
        boolean boolean4 = jSONWriter0.hasFilter();
        jSONWriter0.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj8 = null;
        boolean boolean9 = jSONWriter7.removeReference(obj8);
        jSONWriter7.writeNull();
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter7.writeDecimal(bigDecimal11, 1L);
        char[] charArray18 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter7.writeString(charArray18, (int) (byte) 100, (int) (short) 0);
        jSONWriter0.writeString(charArray18);
        jSONWriter0.writeInt64(10L);
        com.alibaba.fastjson2.SymbolTable symbolTable25 = jSONWriter0.getSymbolTable();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4,  , a, 4]");
        org.junit.Assert.assertNull(symbolTable25);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        jSONWriter0.writeDouble((double) 1024L);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter10 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        jSONWriter11.writeNull();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter11.writeDecimal(bigDecimal15, 1L);
        java.math.BigInteger bigInteger18 = null;
        jSONWriter11.writeBigInt(bigInteger18);
        jSONWriter11.close();
        jSONWriter11.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter23.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter23.writeEnum((java.lang.Enum) feature25);
        boolean boolean27 = jSONWriter23.hasFilter();
        jSONWriter23.writeBool(true);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj31 = null;
        boolean boolean32 = jSONWriter30.removeReference(obj31);
        jSONWriter30.writeNull();
        java.math.BigDecimal bigDecimal34 = null;
        jSONWriter30.writeDecimal(bigDecimal34, 1L);
        char[] charArray41 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter30.writeString(charArray41, (int) (byte) 100, (int) (short) 0);
        jSONWriter23.writeString(charArray41);
        jSONWriter11.writeString(charArray41);
        java.lang.String str47 = jSONWriter0.setPath(fieldWriter10, (java.lang.Object) charArray41);
        java.io.Reader reader48 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeString(reader48);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4,  , a, 4]");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj15 = null;
        boolean boolean16 = jSONWriter14.removeReference(obj15);
        long[] longArray20 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter14.writeInt64(longArray20);
        java.nio.charset.Charset charset22 = jSONWriter14.getCharset();
        boolean[] booleanArray23 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray23);
        jSONWriter14.writeSymbol((int) (byte) 100);
        boolean boolean27 = jSONWriter13.isRefDetect((java.lang.Object) jSONWriter14);
        java.lang.String str30 = jSONWriter14.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray31 = new boolean[] {};
        jSONWriter14.writeBool(booleanArray31);
        int int33 = jSONWriter14.size();
        java.text.DecimalFormat decimalFormat35 = null;
        jSONWriter14.writeFloat((float) 2, decimalFormat35);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.close();
        jSONWriter0.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        jSONWriter0.popPath((java.lang.Object) (short) 10);
        java.time.LocalDateTime localDateTime23 = null;
        jSONWriter0.writeLocalDateTime(localDateTime23);
        int int25 = jSONWriter0.level();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        char[] charArray6 = new char[] { '#', ' ', '#' };
        jSONWriter0.writeString(charArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj9 = null;
        boolean boolean10 = jSONWriter8.removeReference(obj9);
        jSONWriter8.writeNull();
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter8);
        java.text.DecimalFormat decimalFormat14 = null;
        jSONWriter0.writeDouble((double) (byte) -1, decimalFormat14);
        boolean boolean16 = jSONWriter0.utf8;
        jSONWriter0.writeSymbol((int) '4');
        jSONWriter0.writeRaw((byte) 100);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = jSONWriter0.flushTo(outputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        boolean boolean10 = context9.isDateFormatISO8601();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context9);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofPretty();
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter.Context context19 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        boolean boolean20 = jSONWriter12.isWriteTypeInfo((java.lang.Object) featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray18);
        context9.config(featureArray18);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        boolean boolean11 = context6.isDateFormatHasDay();
        context6.setDateFormat("$");
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = null;
        context22.setLabelFilter(labelFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        context22.config(featureArray31);
        context6.config(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(featureArray31);
        jSONWriter37.endArray();
        jSONWriter37.writeRaw('a', 'a');
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context10.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context12 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11);
        long long13 = context12.getFeatures();
        long long14 = context12.getFeatures();
        long long15 = context12.getFeatures();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter16 = null;
        context12.setLabelFilter(labelFilter16);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        jSONWriter10.writeArrayNull();
        com.alibaba.fastjson2.JSONObject jSONObject12 = null;
        jSONWriter10.write(jSONObject12);
        int int14 = jSONWriter10.level();
        jSONWriter10.writeReference("hi!");
        jSONWriter10.writeDoubleArray((double) '#', (double) ' ');
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        boolean boolean9 = jSONWriter0.hasFilter(0L);
        jSONWriter0.writeFloat((float) 1);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj13 = null;
        boolean boolean14 = jSONWriter12.removeReference(obj13);
        long[] longArray18 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter12.writeInt64(longArray18);
        java.nio.charset.Charset charset20 = jSONWriter12.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray28 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature22, feature23, feature24, feature25, feature26, feature27 };
        com.alibaba.fastjson2.JSONWriter jSONWriter29 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray28);
        com.alibaba.fastjson2.JSONWriter.Context context30 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray28);
        java.lang.String str31 = jSONWriter12.setPath(0, (java.lang.Object) context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context30);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        jSONWriter33.writeNameRaw(byteArray35);
        java.nio.charset.Charset charset37 = jSONWriter33.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter33.config(feature38, true);
        jSONWriter33.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        jSONWriter42.writeNull();
        java.lang.reflect.Type type47 = null;
        boolean boolean48 = jSONWriter42.isWriteTypeInfo((java.lang.Object) true, type47);
        jSONWriter33.popPath((java.lang.Object) boolean48);
        jSONWriter33.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        jSONWriter52.writeNameRaw(byteArray54);
        jSONWriter33.writeNameRaw(byteArray54);
        jSONWriter32.writeRaw(byteArray54);
        boolean boolean59 = jSONWriter0.writeTypeName(byteArray54, (long) (short) -1);
        boolean boolean61 = jSONWriter0.isEnabled((long) (byte) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray28);
        org.junit.Assert.assertNotNull(jSONWriter29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1 };
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context5 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray2);
        com.alibaba.fastjson2.filter.ContextNameFilter contextNameFilter6 = context5.getContextNameFilter();
        com.alibaba.fastjson2.filter.NameFilter nameFilter7 = context5.getNameFilter();
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNull(contextNameFilter6);
        org.junit.Assert.assertNull(nameFilter7);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.time.LocalDate localDate4 = null;
        jSONWriter0.writeLocalDate(localDate4);
        boolean boolean6 = jSONWriter0.isUTF16();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        jSONWriter0.writeSymbol((int) (byte) -1);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        jSONWriter11.writeNameRaw(byteArray13);
        java.nio.charset.Charset charset15 = jSONWriter11.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter11.config(feature16, true);
        jSONWriter11.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        jSONWriter20.writeNull();
        java.lang.reflect.Type type25 = null;
        boolean boolean26 = jSONWriter20.isWriteTypeInfo((java.lang.Object) true, type25);
        jSONWriter11.popPath((java.lang.Object) boolean26);
        jSONWriter11.writeInt8((byte) 10);
        com.alibaba.fastjson2.JSONWriter jSONWriter30 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        jSONWriter30.writeNameRaw(byteArray32);
        jSONWriter11.writeNameRaw(byteArray32);
        long long36 = jSONWriter11.getFeatures((long) ' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        java.lang.Class class49 = null;
        jSONWriter47.checkAndWriteTypeName((java.lang.Object) (byte) 0, class49);
        java.math.BigInteger bigInteger51 = null;
        jSONWriter47.writeBigInt(bigInteger51);
        java.lang.reflect.Type type53 = null;
        boolean boolean54 = jSONWriter37.isWriteTypeInfo((java.lang.Object) jSONWriter47, type53);
        com.alibaba.fastjson2.JSONWriter jSONWriter55 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        jSONWriter55.writeNameRaw(byteArray57);
        java.nio.charset.Charset charset59 = jSONWriter55.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature60 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter55.config(feature60, true);
        jSONWriter55.writeName("");
        boolean boolean65 = jSONWriter55.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter66 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj67 = null;
        boolean boolean68 = jSONWriter66.removeReference(obj67);
        char[] charArray72 = new char[] { '#', ' ', '#' };
        jSONWriter66.writeString(charArray72);
        com.alibaba.fastjson2.JSONWriter jSONWriter74 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj75 = null;
        boolean boolean76 = jSONWriter74.removeReference(obj75);
        jSONWriter74.writeNull();
        boolean boolean78 = jSONWriter66.isWriteTypeInfo((java.lang.Object) jSONWriter74);
        com.alibaba.fastjson2.JSONWriter jSONWriter79 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        jSONWriter79.writeNameRaw(byteArray81);
        jSONWriter74.writeBinary(byteArray81);
        boolean boolean85 = jSONWriter55.writeTypeName(byteArray81, (long) (byte) 100);
        jSONWriter37.writeBinary(byteArray81);
        jSONWriter11.writeNameRaw(byteArray81);
        jSONWriter0.writeNameRaw(byteArray81);
        boolean boolean89 = jSONWriter0.isWriteNulls();
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeColon();
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSONWriter30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1056L + "'", long36 == 1056L);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSONWriter55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + feature60 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature60.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSONWriter66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSONWriter79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        jSONWriter11.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter11);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj26 = null;
        boolean boolean27 = jSONWriter25.removeReference(obj26);
        long[] longArray31 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter25.writeInt64(longArray31);
        java.nio.charset.Charset charset33 = jSONWriter25.getCharset();
        boolean[] booleanArray34 = new boolean[] {};
        jSONWriter25.writeBool(booleanArray34);
        jSONWriter25.writeSymbol((int) (byte) 100);
        boolean boolean38 = jSONWriter24.isRefDetect((java.lang.Object) jSONWriter25);
        java.lang.String str41 = jSONWriter25.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray42 = new boolean[] {};
        jSONWriter25.writeBool(booleanArray42);
        jSONWriter0.writeBool(booleanArray42);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray10 = new double[] {};
        java.text.DecimalFormat decimalFormat11 = null;
        jSONWriter9.writeDouble(doubleArray10, decimalFormat11);
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter0.writeDouble(doubleArray10, decimalFormat13);
        boolean boolean15 = jSONWriter0.useSingleQuote;
        java.time.LocalDate localDate16 = null;
        jSONWriter0.writeLocalDate(localDate16);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        boolean boolean10 = context6.isEnabled(0L);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId19 = context17.getZoneId();
        context6.setZoneId(zoneId19);
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.of(context6);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(jSONWriter21);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = context6.getValueFilter();
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray12 = new double[] {};
        java.text.DecimalFormat decimalFormat13 = null;
        jSONWriter11.writeDouble(doubleArray12, decimalFormat13);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray16 = new double[] {};
        java.text.DecimalFormat decimalFormat17 = null;
        jSONWriter15.writeDouble(doubleArray16, decimalFormat17);
        jSONWriter11.writeDouble(doubleArray16);
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        jSONWriter20.writeNameRaw(byteArray22);
        jSONWriter20.writeString("hi!");
        jSONWriter20.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray34 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature28, feature29, feature30, feature31, feature32, feature33 };
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray34);
        jSONWriter35.writeBooleanNull();
        jSONWriter35.writeComma();
        jSONWriter20.startArray((java.lang.Object) jSONWriter35, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter.Context context47 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray46);
        com.alibaba.fastjson2.JSONWriter.Context context48 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray46);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter49 = null;
        context48.setBeforeFilter(beforeFilter49);
        boolean boolean51 = jSONWriter35.removeReference((java.lang.Object) context48);
        com.alibaba.fastjson2.JSONWriter.Feature feature53 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature54 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature55 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature56 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature57 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray58 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature53, feature54, feature55, feature56, feature57 };
        com.alibaba.fastjson2.JSONWriter.Context context59 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray58);
        com.alibaba.fastjson2.JSONWriter.Context context60 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray58);
        com.alibaba.fastjson2.JSONWriter jSONWriter61 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray58);
        context48.config(featureArray58);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter63 = null;
        context48.setLabelFilter(labelFilter63);
        com.alibaba.fastjson2.JSONWriter jSONWriter65 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj66 = null;
        boolean boolean67 = jSONWriter65.removeReference(obj66);
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj69 = null;
        boolean boolean70 = jSONWriter68.removeReference(obj69);
        char[] charArray74 = new char[] { '#', ' ', '#' };
        jSONWriter68.writeString(charArray74);
        boolean boolean76 = jSONWriter65.removeReference((java.lang.Object) jSONWriter68);
        boolean boolean77 = jSONWriter68.jsonb;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter68.writeEnum((java.lang.Enum) feature78);
        boolean boolean80 = context48.isEnabled(feature78);
        jSONWriter11.writeEnum((java.lang.Enum) feature78);
        context6.config(feature78, true);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter84 = context6.getContextValueFilter();
        boolean boolean85 = context6.isDateFormatUnixTime();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(valueFilter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray34);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature53.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature54.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature55.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature56 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature56.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature57 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature57.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray58);
        org.junit.Assert.assertNotNull(jSONWriter61);
        org.junit.Assert.assertNotNull(jSONWriter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(contextValueFilter84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        jSONWriter1.writeNameRaw(byteArray3);
        java.nio.charset.Charset charset5 = jSONWriter1.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter1.config(feature6, true);
        jSONWriter1.writeSymbol("");
        java.math.BigDecimal bigDecimal11 = null;
        jSONWriter1.writeDecimal(bigDecimal11, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray19 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18 };
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray19);
        boolean boolean21 = context20.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId22 = context20.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter23 = context20.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter24 = context20.getAfterFilter();
        java.lang.Class class25 = null;
        boolean boolean26 = jSONWriter1.isWriteTypeInfo((java.lang.Object) afterFilter24, class25);
        boolean boolean27 = jSONWriter0.isWriteTypeInfo((java.lang.Object) class25);
        java.math.BigInteger bigInteger28 = null;
        jSONWriter0.writeBigInt(bigInteger28);
        long long30 = jSONWriter0.getFeatures();
        jSONWriter0.writeNumberNull();
        jSONWriter0.writeDoubleArray((double) (-1), (double) (short) 100);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertNull(afterFilter23);
        org.junit.Assert.assertNull(afterFilter24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter11 = context8.getBeforeFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        boolean boolean21 = context18.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter22 = null;
        context18.setPropertyPreFilter(propertyPreFilter22);
        com.alibaba.fastjson2.JSONWriter jSONWriter24 = com.alibaba.fastjson2.JSONWriter.of(context18);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter25 = null;
        context18.setLabelFilter(labelFilter25);
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter;
        context18.config(feature27, true);
        boolean boolean30 = context8.isEnabled(feature27);
        boolean boolean32 = context8.isEnabled(100L);
        boolean boolean34 = context8.isEnabled((long) 2);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertNull(beforeFilter11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSONWriter24);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.IgnoreErrorGetter));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray2 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1 };
        com.alibaba.fastjson2.JSONWriter jSONWriter3 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray2);
        com.alibaba.fastjson2.JSONWriter.Context context4 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray2);
        com.alibaba.fastjson2.SymbolTable symbolTable5 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter6 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context4, symbolTable5);
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter7 = context4.getContextValueFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter8 = null;
        context4.setPropertyFilter(propertyFilter8);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray2);
        org.junit.Assert.assertNotNull(jSONWriter3);
        org.junit.Assert.assertNotNull(jSONWriter6);
        org.junit.Assert.assertNull(contextValueFilter7);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context6.getBeforeFilter();
        com.alibaba.fastjson2.filter.ContextValueFilter contextValueFilter14 = null;
        context6.setContextValueFilter(contextValueFilter14);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(beforeFilter13);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean9 = context8.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter10 = context8.getPropertyFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter11 = null;
        context8.setPropertyFilter(propertyFilter11);
        long long13 = context8.getFeatures();
        com.alibaba.fastjson2.JSONWriter jSONWriter14 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        com.alibaba.fastjson2.JSONObject jSONObject15 = null;
        jSONWriter14.write(jSONObject15);
        com.alibaba.fastjson2.writer.FieldWriter fieldWriter17 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.of();
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        jSONWriter19.writeNameRaw(byteArray21);
        java.nio.charset.Charset charset23 = jSONWriter19.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter19.config(feature24, true);
        jSONWriter19.writeSymbol("");
        java.math.BigDecimal bigDecimal29 = null;
        jSONWriter19.writeDecimal(bigDecimal29, (long) ' ');
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray37 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature32, feature33, feature34, feature35, feature36 };
        com.alibaba.fastjson2.JSONWriter.Context context38 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray37);
        boolean boolean39 = context38.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId40 = context38.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter41 = context38.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter42 = context38.getAfterFilter();
        java.lang.Class class43 = null;
        boolean boolean44 = jSONWriter19.isWriteTypeInfo((java.lang.Object) afterFilter42, class43);
        boolean boolean45 = jSONWriter18.isWriteTypeInfo((java.lang.Object) class43);
        java.math.BigInteger bigInteger46 = null;
        jSONWriter18.writeBigInt(bigInteger46);
        java.util.UUID uUID48 = null;
        jSONWriter18.writeUUID(uUID48);
        java.lang.String str50 = jSONWriter14.setPath(fieldWriter17, (java.lang.Object) jSONWriter18);
        java.lang.Object obj51 = null;
        boolean boolean53 = jSONWriter18.isWriteTypeInfo(obj51, (long) 15);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(propertyFilter10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 34359804928L + "'", long13 == 34359804928L);
        org.junit.Assert.assertNotNull(jSONWriter14);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zoneId40);
        org.junit.Assert.assertNull(afterFilter41);
        org.junit.Assert.assertNull(afterFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter13 = context6.getBeforeFilter();
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter15 = context6.getAfterFilter();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider16 = context6.provider;
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter17 = null;
        context6.setBeforeFilter(beforeFilter17);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(beforeFilter13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(afterFilter15);
        org.junit.Assert.assertNotNull(objectWriterProvider16);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        java.lang.String str1 = path0.toString();
        com.alibaba.fastjson2.JSONWriter.Path path3 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path5 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 100);
        java.lang.String str6 = path5.toString();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$" + "'", str1, "$");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "$[100]" + "'", str6, "$[100]");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        boolean boolean10 = context8.isEnabled(0L);
        java.lang.String str11 = context8.getDateFormat();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter12 = null;
        context8.setLabelFilter(labelFilter12);
        com.alibaba.fastjson2.filter.NameFilter nameFilter14 = context8.getNameFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(nameFilter14);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        boolean boolean15 = jSONWriter0.isIgnoreNoneSerializable();
        jSONWriter0.writeSymbol((int) '4');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path9, "");
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        jSONWriter15.writeNameRaw(byteArray17);
        java.nio.charset.Charset charset19 = jSONWriter15.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter15.config(feature20, true);
        jSONWriter15.writeSymbol("");
        boolean boolean25 = jSONWriter15.isWriteNulls();
        boolean boolean26 = jSONWriter0.containsReference((java.lang.Object) boolean25);
        java.util.UUID uUID27 = null;
        jSONWriter0.writeUUID(uUID27);
        java.lang.Object obj29 = null;
        jSONWriter0.writeAny(obj29);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId8 = context6.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter9 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter10 = context6.getAfterFilter();
        boolean boolean11 = context6.isDateFormatHasDay();
        context6.setDateFormat("$");
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter.Context context21 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context22 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray20);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter23 = null;
        context22.setLabelFilter(labelFilter23);
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray31 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature26, feature27, feature28, feature29, feature30 };
        com.alibaba.fastjson2.JSONWriter.Context context32 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray31);
        com.alibaba.fastjson2.JSONWriter.Context context33 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray31);
        context22.config(featureArray31);
        context6.config(featureArray31);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.of(featureArray31);
        jSONWriter37.endArray();
        byte[] byteArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter37.writeNameRaw(byteArray39);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNull(afterFilter9);
        org.junit.Assert.assertNull(afterFilter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray31);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter37);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter9 = null;
        context8.setLabelFilter(labelFilter9);
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray16 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15 };
        com.alibaba.fastjson2.JSONWriter.Context context17 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray16);
        boolean boolean18 = context17.isFormatyyyyMMddhhmmss19();
        boolean boolean20 = context17.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter21 = null;
        context17.setPropertyPreFilter(propertyPreFilter21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(context17);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider24 = context17.provider;
        java.time.ZoneId zoneId25 = context17.getZoneId();
        context8.setZoneId(zoneId25);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(objectWriterProvider24);
        org.junit.Assert.assertNotNull(zoneId25);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        java.nio.charset.Charset charset8 = jSONWriter7.getCharset();
        jSONWriter7.writeName("$[100]");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        java.math.BigInteger bigInteger25 = null;
        jSONWriter10.writeBigInt(bigInteger25, (long) 0);
        boolean boolean28 = jSONWriter10.isUTF8();
        java.time.ZonedDateTime zonedDateTime29 = null;
        jSONWriter10.writeZonedDateTime(zonedDateTime29);
        jSONWriter10.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray38 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature33, feature34, feature35, feature36, feature37 };
        com.alibaba.fastjson2.JSONWriter.Context context39 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray38);
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray38);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter41 = null;
        context40.setBeforeFilter(beforeFilter41);
        com.alibaba.fastjson2.JSONWriter jSONWriter43 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj44 = null;
        boolean boolean45 = jSONWriter43.removeReference(obj44);
        long[] longArray49 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter43.writeInt64(longArray49);
        java.nio.charset.Charset charset51 = jSONWriter43.getCharset();
        boolean[] booleanArray52 = new boolean[] {};
        jSONWriter43.writeBool(booleanArray52);
        jSONWriter43.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter43);
        jSONWriter43.startObject();
        jSONWriter43.writeDateTime14(6, 100, (-1), (int) (byte) 1, 0, 0);
        boolean boolean66 = jSONWriter43.hasFilter((long) (short) 10);
        java.lang.Class<?> wildcardClass67 = jSONWriter43.getClass();
        boolean boolean68 = jSONWriter10.isWriteTypeInfo((java.lang.Object) beforeFilter41, (java.lang.Class) wildcardClass67);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray38);
        org.junit.Assert.assertNotNull(jSONWriter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.of(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context9.provider;
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider11 = context9.getProvider();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = context18.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter20 = null;
        context18.setLabelFilter(labelFilter20);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider22 = context18.provider;
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider22);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray25 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24 };
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray25);
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray25);
        jSONWriter28.writeComma();
        java.util.Map map30 = null;
        jSONWriter28.write(map30);
        boolean boolean32 = jSONWriter28.hasFilter();
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature35 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature36 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray39 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature34, feature35, feature36, feature37, feature38 };
        com.alibaba.fastjson2.JSONWriter.Context context40 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray39);
        com.alibaba.fastjson2.JSONWriter.Context context41 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray39);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter42 = null;
        context41.setBeforeFilter(beforeFilter42);
        boolean boolean44 = context41.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature49 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature50 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray51 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature45, feature46, feature47, feature48, feature49, feature50 };
        com.alibaba.fastjson2.JSONWriter jSONWriter52 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray51);
        context41.config(featureArray51);
        jSONWriter28.config(featureArray51);
        context23.config(featureArray51);
        com.alibaba.fastjson2.JSONWriter.Context context57 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider11, featureArray51);
        boolean boolean59 = context57.isEnabled(52L);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertNotNull(objectWriterProvider11);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNull(afterFilter19);
        org.junit.Assert.assertNotNull(objectWriterProvider22);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.ErrorOnNoneSerializable));
        org.junit.Assert.assertNotNull(featureArray25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature35.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature36.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature49.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature50 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature50.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray51);
        org.junit.Assert.assertNotNull(jSONWriter52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        java.math.BigInteger bigInteger7 = null;
        jSONWriter0.writeBigInt(bigInteger7);
        jSONWriter0.writeInt64((long) 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        com.alibaba.fastjson2.JSONObject jSONObject19 = null;
        jSONWriter11.write(jSONObject19);
        java.lang.Class class22 = null;
        boolean boolean24 = jSONWriter11.isWriteTypeInfo((java.lang.Object) false, class22, (long) (short) -1);
        jSONWriter11.writeChar(' ');
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        boolean boolean30 = jSONWriter27.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter.Context context31 = jSONWriter27.context;
        java.lang.String str32 = context31.getDateFormat();
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter33 = null;
        context31.setBeforeFilter(beforeFilter33);
        boolean boolean36 = jSONWriter11.isWriteTypeInfo((java.lang.Object) context31, (long) (short) 100);
        int[] intArray39 = new int[] { 1, 'a' };
        jSONWriter11.writeInt32(intArray39);
        jSONWriter0.writeInt32(intArray39);
        com.alibaba.fastjson2.JSONWriter jSONWriter42 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj43 = null;
        boolean boolean44 = jSONWriter42.removeReference(obj43);
        long[] longArray48 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter42.writeInt64(longArray48);
        com.alibaba.fastjson2.JSONObject jSONObject50 = null;
        jSONWriter42.write(jSONObject50);
        java.lang.Class class53 = null;
        boolean boolean55 = jSONWriter42.isWriteTypeInfo((java.lang.Object) false, class53, (long) (short) -1);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) -1, (byte) 0, (byte) 10, (byte) 10, (byte) 10 };
        jSONWriter42.writeRaw(byteArray62);
        com.alibaba.fastjson2.JSONWriter jSONWriter64 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj65 = null;
        boolean boolean66 = jSONWriter64.removeReference(obj65);
        long[] longArray70 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter64.writeInt64(longArray70);
        com.alibaba.fastjson2.JSONWriter jSONWriter72 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj73 = null;
        boolean boolean74 = jSONWriter72.removeReference(obj73);
        char[] charArray78 = new char[] { '#', ' ', '#' };
        jSONWriter72.writeString(charArray78);
        java.lang.Class class80 = null;
        boolean boolean81 = jSONWriter64.isWriteTypeInfo((java.lang.Object) charArray78, class80);
        jSONWriter42.writeString(charArray78, (int) (byte) 0, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter0.writeRaw(charArray78);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(context31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1, 97]");
        org.junit.Assert.assertNotNull(jSONWriter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, -1, 0, 10, 10, 10]");
        org.junit.Assert.assertNotNull(jSONWriter64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        int[] intArray11 = new int[] { (-1) };
        jSONWriter9.writeInt32(intArray11);
        java.time.OffsetDateTime offsetDateTime13 = null;
        jSONWriter9.writeOffsetDateTime(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1]");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider13 = context6.provider;
        java.time.ZoneId zoneId14 = context6.getZoneId();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter15 = context6.getPropertyFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter16 = null;
        context6.setAfterFilter(afterFilter16);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter18 = context6.getValueFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter19 = null;
        context6.setAfterFilter(afterFilter19);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNotNull(objectWriterProvider13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNull(propertyFilter15);
        org.junit.Assert.assertNull(valueFilter18);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        boolean boolean12 = jSONWriter0.isWriteTypeInfo((java.lang.Object) 100.0d);
        boolean boolean13 = jSONWriter0.useSingleQuote;
        com.alibaba.fastjson2.SymbolTable symbolTable14 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable14);
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj17 = null;
        boolean boolean18 = jSONWriter16.removeReference(obj17);
        long[] longArray22 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter16.writeInt64(longArray22);
        jSONWriter15.writeInt64(longArray22);
        java.math.BigDecimal bigDecimal25 = null;
        jSONWriter15.writeDecimal(bigDecimal25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        boolean boolean39 = jSONWriter27.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray46 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature40, feature41, feature42, feature43, feature44, feature45 };
        com.alibaba.fastjson2.JSONWriter jSONWriter47 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.of(featureArray46);
        boolean boolean49 = jSONWriter27.removeReference((java.lang.Object) featureArray46);
        byte[] byteArray50 = jSONWriter27.getBytes();
        jSONWriter15.writeHex(byteArray50);
        jSONWriter15.writeBooleanNull();
        boolean boolean53 = jSONWriter0.isRefDetect((java.lang.Object) jSONWriter15);
        jSONWriter15.writeRaw((byte) 1);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray46);
        org.junit.Assert.assertNotNull(jSONWriter47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter9.writeBooleanNull();
        byte[] byteArray11 = jSONWriter9.getBytes();
        jSONWriter0.writeRaw(byteArray11);
        jSONWriter0.writeArrayNull();
        jSONWriter0.writeChar('#');
        jSONWriter0.writeDateTime14((int) '4', (int) (byte) 1, (int) (short) 0, 10, 0, 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81]");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        jSONWriter0.writeFloat((java.lang.Float) (-1.0f));
        jSONWriter0.writeFloat((float) 1056L);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.startArray((-1));
        java.util.UUID uUID4 = null;
        jSONWriter0.writeUUID(uUID4);
        boolean boolean6 = jSONWriter0.hasFilter();
        java.math.BigDecimal bigDecimal7 = null;
        jSONWriter0.writeDecimal(bigDecimal7, (long) ' ');
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.of(context9);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        jSONWriter11.writeNull();
        java.math.BigDecimal bigDecimal15 = null;
        jSONWriter11.writeDecimal(bigDecimal15, 1L);
        char[] charArray22 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter11.writeString(charArray22, (int) (byte) 100, (int) (short) 0);
        jSONWriter10.writeString(charArray22, 4, 1, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray35);
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray43 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature38, feature39, feature40, feature41, feature42 };
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray43);
        boolean boolean45 = context44.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId46 = context44.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter47 = context44.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter48 = context44.getAfterFilter();
        boolean boolean49 = context44.isDateFormatHasDay();
        java.lang.reflect.Type type50 = null;
        boolean boolean52 = jSONWriter37.isWriteTypeInfo((java.lang.Object) boolean49, type50, (long) (-1));
        jSONWriter37.startObject();
        boolean boolean54 = jSONWriter10.isIgnoreNoneSerializable((java.lang.Object) jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(zoneId46);
        org.junit.Assert.assertNull(afterFilter47);
        org.junit.Assert.assertNull(afterFilter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter11 = null;
        context6.setNameFilter(nameFilter11);
        boolean boolean13 = context6.isDateFormatMillis();
        boolean boolean15 = context6.isEnabled((long) 0);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter16 = context6.getPropertyPreFilter();
        java.time.ZoneId zoneId17 = context6.getZoneId();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(propertyPreFilter16);
        org.junit.Assert.assertNotNull(zoneId17);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        int int9 = jSONWriter8.level();
        java.util.Map map10 = null;
        jSONWriter8.write(map10);
        boolean boolean12 = jSONWriter8.utf8;
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter.Context context7 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray6);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray6);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter9 = null;
        context8.setBeforeFilter(beforeFilter9);
        boolean boolean11 = context8.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray18 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16, feature17 };
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        com.alibaba.fastjson2.JSONWriter.Context context20 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray18);
        context8.config(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray18);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray18);
        java.util.Map map24 = null;
        jSONWriter23.write(map24);
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider10 = context6.provider;
        boolean boolean12 = context6.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.of(context6);
        long long14 = jSONWriter13.getFeatures();
        com.alibaba.fastjson2.JSONWriter.Context context15 = jSONWriter13.getContext();
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        boolean boolean17 = context15.isEnabled(feature16);
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray23 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature18, feature19, feature20, feature21, feature22 };
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray23);
        boolean boolean25 = context24.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId26 = context24.getZoneId();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter27 = context24.getAfterFilter();
        com.alibaba.fastjson2.filter.AfterFilter afterFilter28 = context24.getAfterFilter();
        boolean boolean29 = context24.isDateFormatHasDay();
        boolean boolean30 = context24.isDateFormatHasDay();
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter31.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection;
        jSONWriter31.writeEnum((java.lang.Enum) feature33);
        boolean boolean35 = context24.isEnabled(feature33);
        boolean boolean36 = context15.isEnabled(feature33);
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter37 = context15.getPropertyFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 34359804928L + "'", long14 == 34359804928L);
        org.junit.Assert.assertNotNull(context15);
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNull(afterFilter27);
        org.junit.Assert.assertNull(afterFilter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.ReferenceDetection));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(propertyFilter37);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startObject();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray21 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature15, feature16, feature17, feature18, feature19, feature20 };
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.of(featureArray21);
        com.alibaba.fastjson2.JSONWriter.Context context24 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        long[] longArray33 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter27.writeInt64(longArray33);
        java.nio.charset.Charset charset35 = jSONWriter27.getCharset();
        boolean[] booleanArray36 = new boolean[] {};
        jSONWriter27.writeBool(booleanArray36);
        jSONWriter27.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter40 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter27);
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj42 = null;
        boolean boolean43 = jSONWriter41.removeReference(obj42);
        long[] longArray47 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter41.writeInt64(longArray47);
        java.nio.charset.Charset charset49 = jSONWriter41.getCharset();
        boolean[] booleanArray50 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray50);
        jSONWriter41.writeSymbol((int) (byte) 100);
        boolean boolean54 = jSONWriter40.isRefDetect((java.lang.Object) jSONWriter41);
        java.lang.String str57 = jSONWriter41.setPath("", (java.lang.Object) (short) 10);
        boolean[] booleanArray58 = new boolean[] {};
        jSONWriter41.writeBool(booleanArray58);
        jSONWriter26.writeBool(booleanArray58);
        jSONWriter0.writeBool(booleanArray58);
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero;
        boolean boolean63 = jSONWriter0.isEnabled(feature62);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[]");
        org.junit.Assert.assertNotNull(jSONWriter40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[]");
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteNullNumberAsZero));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        java.math.BigDecimal bigDecimal4 = null;
        jSONWriter0.writeDecimal(bigDecimal4, 1L);
        char[] charArray11 = new char[] { '4', ' ', 'a', '4' };
        jSONWriter0.writeString(charArray11, (int) (byte) 100, (int) (short) 0);
        boolean boolean15 = jSONWriter0.isUTF8();
        com.alibaba.fastjson2.JSONWriter jSONWriter16 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        jSONWriter16.writeNameRaw(byteArray18);
        jSONWriter16.writeString("hi!");
        jSONWriter16.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        jSONWriter31.writeBooleanNull();
        jSONWriter31.writeComma();
        jSONWriter16.startArray((java.lang.Object) jSONWriter31, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature37 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature38 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature39 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray42 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature37, feature38, feature39, feature40, feature41 };
        com.alibaba.fastjson2.JSONWriter.Context context43 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray42);
        com.alibaba.fastjson2.JSONWriter.Context context44 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray42);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter45 = null;
        context44.setBeforeFilter(beforeFilter45);
        boolean boolean47 = jSONWriter31.removeReference((java.lang.Object) context44);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter48 = null;
        context44.setBeforeFilter(beforeFilter48);
        com.alibaba.fastjson2.filter.NameFilter nameFilter50 = null;
        context44.setNameFilter(nameFilter50);
        java.time.ZoneId zoneId52 = context44.getZoneId();
        boolean boolean53 = context44.isDateFormatMillis();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider54 = context44.provider;
        boolean boolean55 = jSONWriter0.removeReference((java.lang.Object) context44);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "4 a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[4,  , a, 4]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSONWriter16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature37.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature38.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature39.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zoneId52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        jSONWriter0.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        jSONWriter4.writeNameRaw(byteArray6);
        java.nio.charset.Charset charset8 = jSONWriter4.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter4.config(feature9, true);
        jSONWriter4.writeName("");
        boolean boolean14 = jSONWriter4.isWriteNulls();
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj16 = null;
        boolean boolean17 = jSONWriter15.removeReference(obj16);
        char[] charArray21 = new char[] { '#', ' ', '#' };
        jSONWriter15.writeString(charArray21);
        com.alibaba.fastjson2.JSONWriter jSONWriter23 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj24 = null;
        boolean boolean25 = jSONWriter23.removeReference(obj24);
        jSONWriter23.writeNull();
        boolean boolean27 = jSONWriter15.isWriteTypeInfo((java.lang.Object) jSONWriter23);
        com.alibaba.fastjson2.JSONWriter jSONWriter28 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        jSONWriter28.writeNameRaw(byteArray30);
        jSONWriter23.writeBinary(byteArray30);
        boolean boolean34 = jSONWriter4.writeTypeName(byteArray30, (long) (byte) 100);
        jSONWriter0.writeRaw(byteArray30);
        java.time.LocalDate localDate36 = null;
        jSONWriter0.writeLocalDate(localDate36);
        jSONWriter0.writeStringNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#,  , #]");
        org.junit.Assert.assertNotNull(jSONWriter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSONWriter28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean13 = jSONWriter1.isBeanToArray();
        java.nio.charset.Charset charset14 = jSONWriter1.getCharset();
        jSONWriter1.writeFloat((float) 10L);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        jSONWriter17.writeNameRaw(byteArray19);
        java.nio.charset.Charset charset21 = jSONWriter17.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter17.config(feature22, true);
        jSONWriter17.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        jSONWriter27.writeNull();
        java.math.BigDecimal bigDecimal31 = null;
        jSONWriter27.writeDecimal(bigDecimal31, 1L);
        java.math.BigInteger bigInteger34 = null;
        jSONWriter27.writeBigInt(bigInteger34);
        jSONWriter27.writeInt64((long) 0);
        boolean boolean39 = jSONWriter17.isWriteTypeInfo((java.lang.Object) jSONWriter27, (long) (byte) 1);
        jSONWriter27.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter27.writeBooleanNull();
        java.nio.charset.Charset charset48 = jSONWriter27.getCharset();
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        jSONWriter49.writeNameRaw(byteArray51);
        jSONWriter27.writeStringLatin1(byteArray51);
        boolean boolean55 = jSONWriter1.writeTypeName(byteArray51, (long) (short) 0);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter jSONWriter2 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj3 = null;
        boolean boolean4 = jSONWriter2.removeReference(obj3);
        long[] longArray8 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter2.writeInt64(longArray8);
        jSONWriter1.writeInt64(longArray8);
        jSONWriter1.writeTypeName("");
        boolean boolean13 = jSONWriter1.isBeanToArray();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter1.writeDecimal(bigDecimal14);
        int int16 = jSONWriter1.level();
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        jSONWriter0.startArray((int) (byte) 0);
        jSONWriter0.writeChar('a');
        java.time.LocalDateTime localDateTime18 = null;
        jSONWriter0.writeLocalDateTime(localDateTime18);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj11 = null;
        boolean boolean12 = jSONWriter10.removeReference(obj11);
        jSONWriter10.writeNull();
        java.math.BigDecimal bigDecimal14 = null;
        jSONWriter10.writeDecimal(bigDecimal14, 1L);
        java.math.BigInteger bigInteger17 = null;
        jSONWriter10.writeBigInt(bigInteger17);
        jSONWriter10.writeInt64((long) 0);
        boolean boolean22 = jSONWriter0.isWriteTypeInfo((java.lang.Object) jSONWriter10, (long) (byte) 1);
        java.time.LocalDate localDate23 = null;
        jSONWriter10.writeLocalDate(localDate23);
        jSONWriter10.writeBooleanNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        jSONWriter26.writeNameRaw(byteArray28);
        java.nio.charset.Charset charset30 = jSONWriter26.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter26.config(feature31, true);
        jSONWriter26.writeName("");
        boolean boolean37 = jSONWriter10.isWriteTypeInfo((java.lang.Object) "", (long) 'a');
        jSONWriter10.writeFloat((float) 0);
        com.alibaba.fastjson2.JSONWriter.Context context40 = jSONWriter10.getContext();
        com.alibaba.fastjson2.JSONWriter jSONWriter41 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        jSONWriter41.writeNameRaw(byteArray43);
        java.nio.charset.Charset charset45 = jSONWriter41.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter41.config(feature46, true);
        jSONWriter41.writeSymbol("");
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj52 = null;
        boolean boolean53 = jSONWriter51.removeReference(obj52);
        jSONWriter51.writeNull();
        java.math.BigDecimal bigDecimal55 = null;
        jSONWriter51.writeDecimal(bigDecimal55, 1L);
        java.math.BigInteger bigInteger58 = null;
        jSONWriter51.writeBigInt(bigInteger58);
        jSONWriter51.writeInt64((long) 0);
        boolean boolean63 = jSONWriter41.isWriteTypeInfo((java.lang.Object) jSONWriter51, (long) (byte) 1);
        jSONWriter51.writeDateTime14((int) (byte) 10, 4, (int) (byte) -1, (int) '#', 100, (int) (short) 100);
        jSONWriter51.writeInt16((short) (byte) 100);
        jSONWriter51.startObject();
        boolean boolean75 = jSONWriter10.isWriteTypeInfo((java.lang.Object) jSONWriter51, (long) (short) 0);
        java.io.OutputStream outputStream76 = null;
        com.alibaba.fastjson2.JSONWriter.Feature feature78 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature79 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature80 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature81 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature82 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray83 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature78, feature79, feature80, feature81, feature82 };
        com.alibaba.fastjson2.JSONWriter.Context context84 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray83);
        com.alibaba.fastjson2.JSONWriter.Context context85 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray83);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter86 = null;
        context85.setLabelFilter(labelFilter86);
        com.alibaba.fastjson2.JSONWriter jSONWriter88 = com.alibaba.fastjson2.JSONWriter.of(context85);
        boolean boolean89 = jSONWriter88.isBeanToArray();
        com.alibaba.fastjson2.JSONWriter jSONWriter90 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        jSONWriter90.writeNameRaw(byteArray92);
        java.nio.charset.Charset charset94 = jSONWriter90.getCharset();
        byte[] byteArray95 = jSONWriter88.getBytes(charset94);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = jSONWriter51.flushTo(outputStream76, charset94);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(context40);
        org.junit.Assert.assertNotNull(jSONWriter41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature78.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature79.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature80.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature81.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature82 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature82.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray83);
        org.junit.Assert.assertNotNull(jSONWriter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSONWriter90);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[100]");
        org.junit.Assert.assertNotNull(charset94);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        jSONWriter0.endObject();
        jSONWriter0.writeTypeName("$");
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj36 = null;
        boolean boolean37 = jSONWriter35.removeReference(obj36);
        long[] longArray38 = new long[] {};
        jSONWriter35.writeInt64(longArray38);
        com.alibaba.fastjson2.JSONWriter.Feature feature40 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter35.config(feature40, true);
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature48 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray49 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47, feature48 };
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Context context51 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray49);
        jSONWriter35.config(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter53 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray49);
        com.alibaba.fastjson2.JSONWriter.Path path55 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path57 = new com.alibaba.fastjson2.JSONWriter.Path(path55, 0);
        com.alibaba.fastjson2.JSONWriter jSONWriter58 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj59 = null;
        boolean boolean60 = jSONWriter58.removeReference(obj59);
        long[] longArray64 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter58.writeInt64(longArray64);
        java.nio.charset.Charset charset66 = jSONWriter58.getCharset();
        boolean boolean67 = path55.equals((java.lang.Object) charset66);
        byte[] byteArray68 = jSONWriter54.getBytes(charset66);
        jSONWriter0.writeRaw(byteArray68);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature40.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature48 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature48.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter53);
        org.junit.Assert.assertNotNull(jSONWriter54);
        org.junit.Assert.assertNotNull(path55);
        org.junit.Assert.assertNotNull(jSONWriter58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        jSONWriter0.writeBooleanNull();
        jSONWriter0.startArray((-1));
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj5 = null;
        boolean boolean6 = jSONWriter4.removeReference(obj5);
        long[] longArray10 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter4.writeInt64(longArray10);
        java.nio.charset.Charset charset12 = jSONWriter4.getCharset();
        boolean[] booleanArray13 = new boolean[] {};
        jSONWriter4.writeBool(booleanArray13);
        jSONWriter4.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter17 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter4);
        char[] charArray18 = null;
        jSONWriter4.writeString(charArray18, (int) (short) 1, (int) '#');
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        com.alibaba.fastjson2.JSONWriter jSONWriter26 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray27 = new double[] {};
        java.text.DecimalFormat decimalFormat28 = null;
        jSONWriter26.writeDouble(doubleArray27, decimalFormat28);
        jSONWriter22.writeDouble(doubleArray27);
        java.text.DecimalFormat decimalFormat31 = null;
        jSONWriter4.writeDouble(doubleArray27, decimalFormat31);
        java.text.DecimalFormat decimalFormat33 = null;
        jSONWriter0.writeDouble(doubleArray27, decimalFormat33);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertNotNull(jSONWriter17);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(jSONWriter26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(jSONWriter35);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider8 = context6.getProvider();
        com.alibaba.fastjson2.JSONWriter.Context context9 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter.Context context10 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8);
        com.alibaba.fastjson2.JSONWriter jSONWriter11 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj12 = null;
        boolean boolean13 = jSONWriter11.removeReference(obj12);
        long[] longArray17 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter11.writeInt64(longArray17);
        java.nio.charset.Charset charset19 = jSONWriter11.getCharset();
        boolean[] booleanArray20 = new boolean[] {};
        jSONWriter11.writeBool(booleanArray20);
        boolean boolean23 = jSONWriter11.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature26 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature27 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature28 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature29 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray30 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature24, feature25, feature26, feature27, feature28, feature29 };
        com.alibaba.fastjson2.JSONWriter jSONWriter31 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter32 = com.alibaba.fastjson2.JSONWriter.of(featureArray30);
        boolean boolean33 = jSONWriter11.removeReference((java.lang.Object) featureArray30);
        com.alibaba.fastjson2.JSONWriter.Context context34 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider8, featureArray30);
        com.alibaba.fastjson2.JSONWriter jSONWriter35 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray30);
        int int36 = jSONWriter35.size();
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        jSONWriter37.writeNull();
        java.time.LocalDate localDate41 = null;
        jSONWriter37.writeLocalDate(localDate41);
        jSONWriter37.writeInt64((long) 10);
        jSONWriter37.writeTypeName("$.[100][4]");
        long long47 = jSONWriter37.getFeatures();
        byte[] byteArray48 = jSONWriter37.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = jSONWriter35.writeTypeName(byteArray48, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: UnsupportedOperation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objectWriterProvider8);
        org.junit.Assert.assertNotNull(jSONWriter11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature26.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature27.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature28 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature28.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature29 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature29.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray30);
        org.junit.Assert.assertNotNull(jSONWriter31);
        org.junit.Assert.assertNotNull(jSONWriter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-81, -81, -22, -110, 83, 36, 46, 91, 49, 48, 48, 93, 91, 52, 93, 0]");
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.ValueFilter valueFilter10 = null;
        context6.setValueFilter(valueFilter10);
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter.Context context18 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray17);
        boolean boolean19 = context18.isFormatyyyyMMddhhmmss19();
        java.time.ZoneId zoneId20 = context18.getZoneId();
        context6.setZoneId(zoneId20);
        com.alibaba.fastjson2.filter.NameFilter nameFilter22 = null;
        context6.setNameFilter(nameFilter22);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter24 = context6.getBeforeFilter();
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNull(beforeFilter24);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        jSONWriter0.writeString("hi!");
        jSONWriter0.writeFloat((float) 'a');
        com.alibaba.fastjson2.JSONWriter.Feature feature8 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature10 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray14 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature8, feature9, feature10, feature11, feature12, feature13 };
        com.alibaba.fastjson2.JSONWriter jSONWriter15 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray14);
        jSONWriter15.writeBooleanNull();
        jSONWriter15.writeComma();
        jSONWriter0.startArray((java.lang.Object) jSONWriter15, (int) (byte) 1);
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature24 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature25 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray26 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature21, feature22, feature23, feature24, feature25 };
        com.alibaba.fastjson2.JSONWriter.Context context27 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray26);
        com.alibaba.fastjson2.JSONWriter.Context context28 = new com.alibaba.fastjson2.JSONWriter.Context("hi!", featureArray26);
        com.alibaba.fastjson2.filter.BeforeFilter beforeFilter29 = null;
        context28.setBeforeFilter(beforeFilter29);
        boolean boolean31 = jSONWriter15.removeReference((java.lang.Object) context28);
        context28.setDateFormat("$.[100][4]");
        boolean boolean34 = context28.isDateFormatISO8601();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + feature8 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature8.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature10 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature10.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray14);
        org.junit.Assert.assertNotNull(jSONWriter15);
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature24 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature24.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature25.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature6 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray7 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature2, feature3, feature4, feature5, feature6 };
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray7);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray7);
        java.lang.Class class10 = null;
        boolean boolean12 = jSONWriter1.isWriteMapTypeInfo((java.lang.Object) jSONWriter9, class10, 0L);
        java.lang.String[] strArray14 = new java.lang.String[] { "$[0]" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        jSONWriter1.writeString((java.util.List<java.lang.String>) strList15);
        boolean boolean18 = jSONWriter1.utf8;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature20 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature21 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature22 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature23 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray24 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature19, feature20, feature21, feature22, feature23 };
        com.alibaba.fastjson2.JSONWriter.Context context25 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray24);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter26 = context25.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter27 = null;
        context25.setLabelFilter(labelFilter27);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter29 = null;
        context25.setPropertyPreFilter(propertyPreFilter29);
        boolean boolean32 = context25.isEnabled((long) 4);
        com.alibaba.fastjson2.JSONWriter jSONWriter33 = com.alibaba.fastjson2.JSONWriter.of(context25);
        boolean boolean34 = jSONWriter1.removeReference((java.lang.Object) jSONWriter33);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature6 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature6.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature20 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature20.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature21 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature21.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature22 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature22.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature23 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature23.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray24);
        org.junit.Assert.assertNull(afterFilter26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSONWriter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray6 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter0.writeInt64(longArray6);
        java.nio.charset.Charset charset8 = jSONWriter0.getCharset();
        boolean[] booleanArray9 = new boolean[] {};
        jSONWriter0.writeBool(booleanArray9);
        jSONWriter0.writeSymbol((int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter13 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj14 = null;
        boolean boolean15 = jSONWriter13.removeReference(obj14);
        long[] longArray16 = new long[] {};
        jSONWriter13.writeInt64(longArray16);
        java.util.Map map18 = null;
        jSONWriter13.write(map18);
        java.util.Map map20 = null;
        jSONWriter13.write(map20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        double[] doubleArray23 = new double[] {};
        java.text.DecimalFormat decimalFormat24 = null;
        jSONWriter22.writeDouble(doubleArray23, decimalFormat24);
        java.text.DecimalFormat decimalFormat26 = null;
        jSONWriter13.writeDouble(doubleArray23, decimalFormat26);
        boolean boolean28 = jSONWriter13.useSingleQuote;
        java.lang.Class class29 = null;
        boolean boolean31 = jSONWriter0.isWriteMapTypeInfo((java.lang.Object) jSONWriter13, class29, (long) (short) -1);
        com.alibaba.fastjson2.JSONObject jSONObject32 = null;
        jSONWriter13.write(jSONObject32);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofPretty(jSONWriter13);
        com.alibaba.fastjson2.SymbolTable symbolTable35 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter36 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable35);
        com.alibaba.fastjson2.JSONWriter jSONWriter37 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj38 = null;
        boolean boolean39 = jSONWriter37.removeReference(obj38);
        long[] longArray43 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter37.writeInt64(longArray43);
        jSONWriter36.writeInt64(longArray43);
        java.math.BigDecimal bigDecimal46 = null;
        jSONWriter36.writeDecimal(bigDecimal46);
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj49 = null;
        boolean boolean50 = jSONWriter48.removeReference(obj49);
        long[] longArray54 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter48.writeInt64(longArray54);
        java.nio.charset.Charset charset56 = jSONWriter48.getCharset();
        boolean[] booleanArray57 = new boolean[] {};
        jSONWriter48.writeBool(booleanArray57);
        boolean boolean60 = jSONWriter48.isWriteTypeInfo((java.lang.Object) 100.0d);
        com.alibaba.fastjson2.JSONWriter.Feature feature61 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature62 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature63 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature64 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature65 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature66 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray67 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature61, feature62, feature63, feature64, feature65, feature66 };
        com.alibaba.fastjson2.JSONWriter jSONWriter68 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray67);
        com.alibaba.fastjson2.JSONWriter jSONWriter69 = com.alibaba.fastjson2.JSONWriter.of(featureArray67);
        boolean boolean70 = jSONWriter48.removeReference((java.lang.Object) featureArray67);
        byte[] byteArray71 = jSONWriter48.getBytes();
        jSONWriter36.writeHex(byteArray71);
        boolean boolean74 = jSONWriter13.writeTypeName(byteArray71, (long) '#');
        com.alibaba.fastjson2.SymbolTable symbolTable75 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter76 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable75);
        com.alibaba.fastjson2.JSONWriter jSONWriter77 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj78 = null;
        boolean boolean79 = jSONWriter77.removeReference(obj78);
        long[] longArray83 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter77.writeInt64(longArray83);
        jSONWriter76.writeInt64(longArray83);
        jSONWriter13.writeInt64(longArray83);
        // The following exception was thrown during execution in test generation
        try {
            jSONWriter13.writeDoubleArray((double) (byte) 10, (double) 1056L);
            org.junit.Assert.fail("Expected exception of type com.alibaba.fastjson2.JSONException; message: unsupported operation");
        } catch (com.alibaba.fastjson2.JSONException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertNotNull(jSONWriter13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(jSONWriter36);
        org.junit.Assert.assertNotNull(jSONWriter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + feature61 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature61.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature62.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature63.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature64 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature64.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature65 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature65.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature66 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature66.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray67);
        org.junit.Assert.assertNotNull(jSONWriter68);
        org.junit.Assert.assertNotNull(jSONWriter69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-105, -1, -1, 10, -108]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSONWriter76);
        org.junit.Assert.assertNotNull(jSONWriter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[-1, -1, 10]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        jSONWriter0.writeNameRaw(byteArray2);
        java.nio.charset.Charset charset4 = jSONWriter0.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter0.config(feature5, true);
        jSONWriter0.writeName("");
        com.alibaba.fastjson2.JSONWriter.Feature feature11 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature12 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature13 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray17 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature11, feature12, feature13, feature14, feature15, feature16 };
        com.alibaba.fastjson2.JSONWriter jSONWriter18 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray17);
        com.alibaba.fastjson2.JSONWriter jSONWriter19 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj20 = null;
        boolean boolean21 = jSONWriter19.removeReference(obj20);
        long[] longArray25 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter19.writeInt64(longArray25);
        com.alibaba.fastjson2.JSONWriter jSONWriter27 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj28 = null;
        boolean boolean29 = jSONWriter27.removeReference(obj28);
        char[] charArray33 = new char[] { '#', ' ', '#' };
        jSONWriter27.writeString(charArray33);
        java.lang.Class class35 = null;
        boolean boolean36 = jSONWriter19.isWriteTypeInfo((java.lang.Object) charArray33, class35);
        jSONWriter18.writeRaw(charArray33, (int) (byte) 0, (int) (byte) 0);
        java.lang.String str40 = jSONWriter0.setPath("", (java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature11 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature11.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature12 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature12.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature13 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature13.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray17);
        org.junit.Assert.assertNotNull(jSONWriter18);
        org.junit.Assert.assertNotNull(jSONWriter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(jSONWriter27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "# #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "# #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#,  , #]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        com.alibaba.fastjson2.JSONWriter jSONWriter0 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj1 = null;
        boolean boolean2 = jSONWriter0.removeReference(obj1);
        long[] longArray3 = new long[] {};
        jSONWriter0.writeInt64(longArray3);
        java.util.Map map5 = null;
        jSONWriter0.write(map5);
        java.util.Map map7 = null;
        jSONWriter0.write(map7);
        jSONWriter0.writeFloat((java.lang.Float) (-1.0f));
        int int11 = jSONWriter0.level();
        jSONWriter0.writeDouble((double) 52L);
        jSONWriter0.writeNull();
        org.junit.Assert.assertNotNull(jSONWriter0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, 0);
        java.lang.String str3 = path2.toString();
        java.lang.String str4 = path2.toString();
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$[0]" + "'", str3, "$[0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$[0]" + "'", str4, "$[0]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        com.alibaba.fastjson2.SymbolTable symbolTable0 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter1 = com.alibaba.fastjson2.JSONWriter.ofJSONB(symbolTable0);
        com.alibaba.fastjson2.JSONObject jSONObject2 = null;
        jSONWriter1.write(jSONObject2);
        com.alibaba.fastjson2.JSONWriter jSONWriter4 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj5 = null;
        boolean boolean6 = jSONWriter4.removeReference(obj5);
        long[] longArray7 = new long[] {};
        jSONWriter4.writeInt64(longArray7);
        com.alibaba.fastjson2.JSONWriter.Feature feature9 = com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64;
        jSONWriter4.config(feature9, true);
        int int12 = jSONWriter4.level();
        jSONWriter4.writeInt64((long) 1);
        boolean boolean15 = jSONWriter1.isIgnoreNoneSerializable((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(jSONWriter1);
        org.junit.Assert.assertNotNull(jSONWriter4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertTrue("'" + feature9 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64 + "'", feature9.equals(com.alibaba.fastjson2.JSONWriter.Feature.WriteByteArrayAsBase64));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        com.alibaba.fastjson2.JSONWriter.Path path0 = com.alibaba.fastjson2.JSONWriter.Path.ROOT;
        com.alibaba.fastjson2.JSONWriter.Path path2 = new com.alibaba.fastjson2.JSONWriter.Path(path0, "");
        com.alibaba.fastjson2.JSONWriter.Path path4 = new com.alibaba.fastjson2.JSONWriter.Path(path2, (int) (byte) 100);
        com.alibaba.fastjson2.JSONWriter.Path path6 = new com.alibaba.fastjson2.JSONWriter.Path(path4, "hi!");
        java.lang.String str7 = path6.toString();
        com.alibaba.fastjson2.JSONWriter.Path path9 = new com.alibaba.fastjson2.JSONWriter.Path(path6, (int) ' ');
        com.alibaba.fastjson2.JSONWriter.Path path11 = new com.alibaba.fastjson2.JSONWriter.Path(path6, 4);
        org.junit.Assert.assertNotNull(path0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "$.[100].hi\\!" + "'", str7, "$.[100].hi\\!");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature5 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray6 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4, feature5 };
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter8 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofUTF8(featureArray6);
        com.alibaba.fastjson2.JSONWriter jSONWriter10 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        jSONWriter10.writeNameRaw(byteArray12);
        java.nio.charset.Charset charset14 = jSONWriter10.getCharset();
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        jSONWriter10.config(feature15, true);
        jSONWriter10.writeNull();
        com.alibaba.fastjson2.JSONWriter jSONWriter20 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        java.lang.Object obj21 = null;
        boolean boolean22 = jSONWriter20.removeReference(obj21);
        long[] longArray26 = new long[] { (short) -1, (-1), (byte) 10 };
        jSONWriter20.writeInt64(longArray26);
        java.nio.charset.Charset charset28 = jSONWriter20.getCharset();
        java.lang.String str29 = jSONWriter10.setPath((int) (short) -1, (java.lang.Object) charset28);
        byte[] byteArray30 = jSONWriter9.getBytes(charset28);
        java.lang.Object obj31 = null;
        boolean boolean33 = jSONWriter9.isWriteTypeInfo(obj31, (long) (byte) 100);
        com.alibaba.fastjson2.JSONWriter jSONWriter34 = com.alibaba.fastjson2.JSONWriter.ofJSONB();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        jSONWriter34.writeNameRaw(byteArray36);
        jSONWriter34.writeString("hi!");
        java.math.BigDecimal bigDecimal40 = null;
        jSONWriter34.writeDecimal(bigDecimal40, (long) '#');
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature47 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray48 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature43, feature44, feature45, feature46, feature47 };
        com.alibaba.fastjson2.JSONWriter.Context context49 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray48);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter50 = context49.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter51 = null;
        context49.setLabelFilter(labelFilter51);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider53 = context49.provider;
        boolean boolean55 = context49.isEnabled(1024L);
        com.alibaba.fastjson2.JSONWriter jSONWriter56 = com.alibaba.fastjson2.JSONWriter.of(context49);
        boolean boolean57 = jSONWriter34.isIgnoreNoneSerializable((java.lang.Object) context49);
        com.alibaba.fastjson2.JSONWriter.Feature feature58 = com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray;
        context49.config(feature58, false);
        jSONWriter9.popPath((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature5 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature5.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray6);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter8);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(jSONWriter10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(jSONWriter20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, -1, 10]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSONWriter34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature47.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray48);
        org.junit.Assert.assertNull(afterFilter50);
        org.junit.Assert.assertNotNull(objectWriterProvider53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(jSONWriter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + feature58 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray + "'", feature58.equals(com.alibaba.fastjson2.JSONWriter.Feature.BeanToArray));
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter7 = context6.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter8 = null;
        context6.setLabelFilter(labelFilter8);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider12 = context6.provider;
        com.alibaba.fastjson2.JSONWriter.Context context13 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12);
        com.alibaba.fastjson2.JSONWriter.Feature feature14 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature15 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature16 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature17 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature18 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature19 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray20 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature14, feature15, feature16, feature17, feature18, feature19 };
        com.alibaba.fastjson2.JSONWriter jSONWriter21 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray20);
        com.alibaba.fastjson2.JSONWriter jSONWriter22 = com.alibaba.fastjson2.JSONWriter.of(featureArray20);
        com.alibaba.fastjson2.JSONWriter.Context context23 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray20);
        com.alibaba.fastjson2.SymbolTable symbolTable24 = null;
        com.alibaba.fastjson2.JSONWriter jSONWriter25 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context23, symbolTable24);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider26 = context23.provider;
        com.alibaba.fastjson2.filter.NameFilter nameFilter27 = null;
        context23.setNameFilter(nameFilter27);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider29 = context23.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature30 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature31 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature32 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature33 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature34 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray35 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature30, feature31, feature32, feature33, feature34 };
        com.alibaba.fastjson2.JSONWriter.Context context36 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray35);
        com.alibaba.fastjson2.filter.AfterFilter afterFilter37 = context36.getAfterFilter();
        com.alibaba.fastjson2.filter.LabelFilter labelFilter38 = null;
        context36.setLabelFilter(labelFilter38);
        com.alibaba.fastjson2.writer.ObjectWriterProvider objectWriterProvider40 = context36.provider;
        com.alibaba.fastjson2.JSONWriter.Feature feature41 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature42 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature43 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature feature44 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature45 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature46 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray47 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature41, feature42, feature43, feature44, feature45, feature46 };
        com.alibaba.fastjson2.JSONWriter jSONWriter48 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter49 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter50 = com.alibaba.fastjson2.JSONWriter.of(objectWriterProvider40, featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter51 = com.alibaba.fastjson2.JSONWriter.of(featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context52 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider29, featureArray47);
        com.alibaba.fastjson2.JSONWriter.Context context53 = new com.alibaba.fastjson2.JSONWriter.Context(objectWriterProvider12, featureArray47);
        com.alibaba.fastjson2.JSONWriter jSONWriter54 = com.alibaba.fastjson2.JSONWriter.ofUTF16(featureArray47);
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNull(afterFilter7);
        org.junit.Assert.assertNotNull(objectWriterProvider12);
        org.junit.Assert.assertTrue("'" + feature14 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature14.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature15 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature15.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature16 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature16.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature17 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature17.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature18 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature18.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature19 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature19.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray20);
        org.junit.Assert.assertNotNull(jSONWriter21);
        org.junit.Assert.assertNotNull(jSONWriter22);
        org.junit.Assert.assertNotNull(jSONWriter25);
        org.junit.Assert.assertNotNull(objectWriterProvider26);
        org.junit.Assert.assertNotNull(objectWriterProvider29);
        org.junit.Assert.assertTrue("'" + feature30 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature30.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature31 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature31.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature32.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature33.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature34.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray35);
        org.junit.Assert.assertNull(afterFilter37);
        org.junit.Assert.assertNotNull(objectWriterProvider40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature41.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature42.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature43.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature44.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature45.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature46.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertNotNull(featureArray47);
        org.junit.Assert.assertNotNull(jSONWriter48);
        org.junit.Assert.assertNotNull(jSONWriter49);
        org.junit.Assert.assertNotNull(jSONWriter50);
        org.junit.Assert.assertNotNull(jSONWriter51);
        org.junit.Assert.assertNotNull(jSONWriter54);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        boolean boolean7 = context6.isFormatyyyyMMddhhmmss19();
        boolean boolean9 = context6.isEnabled((long) (short) 10);
        com.alibaba.fastjson2.filter.PropertyPreFilter propertyPreFilter10 = null;
        context6.setPropertyPreFilter(propertyPreFilter10);
        com.alibaba.fastjson2.JSONWriter jSONWriter12 = com.alibaba.fastjson2.JSONWriter.of(context6);
        com.alibaba.fastjson2.filter.LabelFilter labelFilter13 = context6.getLabelFilter();
        com.alibaba.fastjson2.filter.PropertyFilter propertyFilter14 = context6.getPropertyFilter();
        context6.setDateFormat("hi!");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSONWriter12);
        org.junit.Assert.assertNull(labelFilter13);
        org.junit.Assert.assertNull(propertyFilter14);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        com.alibaba.fastjson2.JSONWriter.Feature feature0 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature1 = com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat;
        com.alibaba.fastjson2.JSONWriter.Feature feature2 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature3 = com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName;
        com.alibaba.fastjson2.JSONWriter.Feature feature4 = com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure;
        com.alibaba.fastjson2.JSONWriter.Feature[] featureArray5 = new com.alibaba.fastjson2.JSONWriter.Feature[] { feature0, feature1, feature2, feature3, feature4 };
        com.alibaba.fastjson2.JSONWriter.Context context6 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter7 = com.alibaba.fastjson2.JSONWriter.ofJSONB(featureArray5);
        com.alibaba.fastjson2.JSONWriter.Context context8 = new com.alibaba.fastjson2.JSONWriter.Context(featureArray5);
        com.alibaba.fastjson2.JSONWriter jSONWriter9 = com.alibaba.fastjson2.JSONWriter.ofJSONB(context8);
        int[] intArray11 = new int[] { (-1) };
        jSONWriter9.writeInt32(intArray11);
        jSONWriter9.writeDouble((double) 'a');
        jSONWriter9.writeTypeName("hi!");
        org.junit.Assert.assertTrue("'" + feature0 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature0.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature1 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat + "'", feature1.equals(com.alibaba.fastjson2.JSONWriter.Feature.PrettyFormat));
        org.junit.Assert.assertTrue("'" + feature2 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature2.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature3 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName + "'", feature3.equals(com.alibaba.fastjson2.JSONWriter.Feature.NotWriteRootClassName));
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure + "'", feature4.equals(com.alibaba.fastjson2.JSONWriter.Feature.BrowserSecure));
        org.junit.Assert.assertNotNull(featureArray5);
        org.junit.Assert.assertNotNull(jSONWriter7);
        org.junit.Assert.assertNotNull(jSONWriter9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1]");
    }
}

